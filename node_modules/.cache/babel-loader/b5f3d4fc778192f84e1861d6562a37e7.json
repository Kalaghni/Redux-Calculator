{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log1p as _log1p } from '../../utils/number.js';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      log = _ref.log,\n      Complex = _ref.Complex;\n  /**\r\n   * Calculate the logarithm of a `value+1`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log1p(x)\r\n   *    math.log1p(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log1p(2.5)                 // returns 1.252762968495368\r\n   *    math.exp(math.log1p(1.4))       // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                 // returns 10000\r\n   *    math.log1p(9999, 10)            // returns 4\r\n   *    math.log1p(9999) / math.log(10) // returns 4\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log2, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm of `x+1`.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x+1` is calculated.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the logarithm of `x+1`\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(this(x), log(base));\n    }\n  });\n  /**\r\n   * Calculate the natural logarithm of a complex number + 1\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\n\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});","map":{"version":3,"names":["factory","deepMap","log1p","_log1p","name","dependencies","createLog1p","_ref","typed","config","divideScalar","log","Complex","number","x","predictable","_log1pComplex","BigNumber","y","plus","isNegative","ln","toNumber","ArrayMatrix","anyAny","base","xRe1p","re","Math","sqrt","im","atan2"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/log1p.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { log1p as _log1p } from '../../utils/number.js';\r\nvar name = 'log1p';\r\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\r\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    divideScalar,\r\n    log,\r\n    Complex\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the logarithm of a `value+1`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log1p(x)\r\n   *    math.log1p(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log1p(2.5)                 // returns 1.252762968495368\r\n   *    math.exp(math.log1p(1.4))       // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                 // returns 10000\r\n   *    math.log1p(9999, 10)            // returns 4\r\n   *    math.log1p(9999) / math.log(10) // returns 4\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log2, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm of `x+1`.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x+1` is calculated.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the logarithm of `x+1`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= -1 || config.predictable) {\r\n        return _log1p(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return _log1pComplex(new Complex(x, 0));\r\n      }\r\n    },\r\n    Complex: _log1pComplex,\r\n    BigNumber: function BigNumber(x) {\r\n      var y = x.plus(1);\r\n\r\n      if (!y.isNegative() || config.predictable) {\r\n        return y.ln();\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return _log1pComplex(new Complex(x.toNumber(), 0));\r\n      }\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    },\r\n    'any, any': function anyAny(x, base) {\r\n      // calculate logarithm for a specified base, log1p(x, base)\r\n      return divideScalar(this(x), log(base));\r\n    }\r\n  });\r\n  /**\r\n   * Calculate the natural logarithm of a complex number + 1\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\r\n\r\n  function _log1pComplex(x) {\r\n    var xRe1p = x.re + 1;\r\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,KAAK,IAAIC,MAAlB,QAAgC,uBAAhC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,cAApB,EAAoC,KAApC,EAA2C,SAA3C,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAMIF,IANJ,CAEEE,MAFF;EAAA,IAGEC,YAHF,GAMIH,IANJ,CAGEG,YAHF;EAAA,IAIEC,GAJF,GAMIJ,IANJ,CAIEI,GAJF;EAAA,IAKEC,OALF,GAMIL,IANJ,CAKEK,OALF;EAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOJ,KAAK,CAACJ,IAAD,EAAO;IACjBS,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,IAAIA,CAAC,IAAI,CAAC,CAAN,IAAWL,MAAM,CAACM,WAAtB,EAAmC;QACjC,OAAOZ,MAAM,CAACW,CAAD,CAAb;MACD,CAFD,MAEO;QACL;QACA,OAAOE,aAAa,CAAC,IAAIJ,OAAJ,CAAYE,CAAZ,EAAe,CAAf,CAAD,CAApB;MACD;IACF,CARgB;IASjBF,OAAO,EAAEI,aATQ;IAUjBC,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;MAC/B,IAAII,CAAC,GAAGJ,CAAC,CAACK,IAAF,CAAO,CAAP,CAAR;;MAEA,IAAI,CAACD,CAAC,CAACE,UAAF,EAAD,IAAmBX,MAAM,CAACM,WAA9B,EAA2C;QACzC,OAAOG,CAAC,CAACG,EAAF,EAAP;MACD,CAFD,MAEO;QACL;QACA,OAAOL,aAAa,CAAC,IAAIJ,OAAJ,CAAYE,CAAC,CAACQ,QAAF,EAAZ,EAA0B,CAA1B,CAAD,CAApB;MACD;IACF,CAnBgB;IAoBjB,kBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;MACxC,OAAOb,OAAO,CAACa,CAAD,EAAI,IAAJ,CAAd;IACD,CAtBgB;IAuBjB,YAAY,SAASU,MAAT,CAAgBV,CAAhB,EAAmBW,IAAnB,EAAyB;MACnC;MACA,OAAOf,YAAY,CAAC,KAAKI,CAAL,CAAD,EAAUH,GAAG,CAACc,IAAD,CAAb,CAAnB;IACD;EA1BgB,CAAP,CAAZ;EA4BA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAAST,aAAT,CAAuBF,CAAvB,EAA0B;IACxB,IAAIY,KAAK,GAAGZ,CAAC,CAACa,EAAF,GAAO,CAAnB;IACA,OAAO,IAAIf,OAAJ,CAAYgB,IAAI,CAACjB,GAAL,CAASiB,IAAI,CAACC,IAAL,CAAUH,KAAK,GAAGA,KAAR,GAAgBZ,CAAC,CAACgB,EAAF,GAAOhB,CAAC,CAACgB,EAAnC,CAAT,CAAZ,EAA8DF,IAAI,CAACG,KAAL,CAAWjB,CAAC,CAACgB,EAAb,EAAiBJ,KAAjB,CAA9D,CAAP;EACD;AACF,CA/E8C,CAAxC"},"metadata":{},"sourceType":"module"}