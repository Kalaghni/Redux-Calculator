{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      map = _ref.map,\n      median = _ref.median,\n      subtract = _ref.subtract;\n  /**\r\n   * Compute the median absolute deviation of a matrix or a list with values.\r\n   * The median absolute deviation is defined as the median of the absolute\r\n   * deviations from the median.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mad(a, b, c, ...)\r\n   *     math.mad(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mad(10, 20, 30)             // returns 10\r\n   *     math.mad([1, 2, 3])              // returns 1\r\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, mean, std, abs\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or multiple scalar values.\r\n   * @return {*} The median absolute deviation.\r\n   */\n\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});","map":{"version":3,"names":["flatten","factory","improveErrorMessage","name","dependencies","createMad","_ref","typed","abs","map","median","subtract","_mad","_","args","array","valueOf","length","Error","med","value","err","TypeError","message","indexOf","replace"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/mad.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'mad';\r\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\r\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    map,\r\n    median,\r\n    subtract\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the median absolute deviation of a matrix or a list with values.\r\n   * The median absolute deviation is defined as the median of the absolute\r\n   * deviations from the median.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mad(a, b, c, ...)\r\n   *     math.mad(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mad(10, 20, 30)             // returns 10\r\n   *     math.mad([1, 2, 3])              // returns 1\r\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, mean, std, abs\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or multiple scalar values.\r\n   * @return {*} The median absolute deviation.\r\n   */\r\n  return typed(name, {\r\n    // mad([a, b, c, d, ...])\r\n    'Array | Matrix': _mad,\r\n    // mad(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _mad(args);\r\n    }\r\n  });\r\n\r\n  function _mad(array) {\r\n    array = flatten(array.valueOf());\r\n\r\n    if (array.length === 0) {\r\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\r\n    }\r\n\r\n    try {\r\n      var med = median(array);\r\n      return median(map(array, function (value) {\r\n        return abs(subtract(value, med));\r\n      }));\r\n    } catch (err) {\r\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\r\n        throw new TypeError(err.message.replace('median', 'mad'));\r\n      } else {\r\n        throw improveErrorMessage(err, 'mad');\r\n      }\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,EAAwB,QAAxB,EAAkC,UAAlC,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,GAFF,GAMIF,IANJ,CAEEE,GAFF;EAAA,IAGEC,GAHF,GAMIH,IANJ,CAGEG,GAHF;EAAA,IAIEC,MAJF,GAMIJ,IANJ,CAIEI,MAJF;EAAA,IAKEC,QALF,GAMIL,IANJ,CAKEK,QALF;EAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOJ,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBS,IAFD;IAGjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,OAAOF,IAAI,CAACE,IAAD,CAAX;IACD;EANgB,CAAP,CAAZ;;EASA,SAASF,IAAT,CAAcG,KAAd,EAAqB;IACnBA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAACC,OAAN,EAAD,CAAf;;IAEA,IAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;MACtB,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;IACD;;IAED,IAAI;MACF,IAAIC,GAAG,GAAGT,MAAM,CAACK,KAAD,CAAhB;MACA,OAAOL,MAAM,CAACD,GAAG,CAACM,KAAD,EAAQ,UAAUK,KAAV,EAAiB;QACxC,OAAOZ,GAAG,CAACG,QAAQ,CAACS,KAAD,EAAQD,GAAR,CAAT,CAAV;MACD,CAFgB,CAAJ,CAAb;IAGD,CALD,CAKE,OAAOE,GAAP,EAAY;MACZ,IAAIA,GAAG,YAAYC,SAAf,IAA4BD,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAnE,EAAsE;QACpE,MAAM,IAAIF,SAAJ,CAAcD,GAAG,CAACE,OAAJ,CAAYE,OAAZ,CAAoB,QAApB,EAA8B,KAA9B,CAAd,CAAN;MACD,CAFD,MAEO;QACL,MAAMvB,mBAAmB,CAACmB,GAAD,EAAM,KAAN,CAAzB;MACD;IACF;EACF;AACF,CA9D4C,CAAtC"},"metadata":{},"sourceType":"module"}