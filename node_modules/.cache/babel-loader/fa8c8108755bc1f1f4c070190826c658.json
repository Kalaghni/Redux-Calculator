{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      number = _ref.number;\n  /**\r\n   * Create a new matrix or array of the difference between elements of the given array\r\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\r\n   * If no dimension parameter is passed it is assumed as dimension 0\r\n   *\r\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\r\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\r\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.diff(arr)\r\n   *     math.diff(arr, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const arr = [1, 2, 4, 7, 0]\r\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\r\n   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])\r\n   *\r\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\r\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\r\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\r\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\r\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\r\n   *\r\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\r\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\r\n   *\r\n   *     // These will all produce the same result\r\n   *     math.diff([[1, 2], [3, 4]])\r\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\r\n   *     math.diff([[1, 2], math.matrix([3, 4])])\r\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\r\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\r\n   *\r\n   * See Also:\r\n   *\r\n   *      sum\r\n   *      subtract\r\n   *      partitionSelect\r\n   *\r\n   * @param {Array | Matrix} arr    An array or matrix\r\n   * @param {number} dim            Dimension\r\n   * @return {Array | Matrix}       Difference between array elements in given dimension\r\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if (isMatrix(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\n\n      if (isMatrix(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {\n      return this(arr, number(dim));\n    }\n  });\n  /**\r\n   * Recursively find the correct dimension in the array/matrix\r\n   * Then Apply _diff to that dimension\r\n   *\r\n   * @param {Array} arr      The array\r\n   * @param {number} dim     Dimension\r\n   * @return {Array}         resulting array\r\n   */\n\n  function _recursive(arr, dim) {\n    if (isMatrix(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(function (element) {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n  /**\r\n   * Difference between elements in the array\r\n   *\r\n   * @param {Array} arr      An array\r\n   * @return {Array}         resulting array\r\n   */\n\n\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n\n    if (size < 2) {\n      return arr;\n    }\n\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n\n    return result;\n  }\n  /**\r\n   * Difference between 2 objects\r\n   *\r\n   * @param {Object} obj1    First object\r\n   * @param {Object} obj2    Second object\r\n   * @return {Array}         resulting array\r\n   */\n\n\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n  /**\r\n   * Difference of elements in 2 arrays\r\n   *\r\n   * @param {Array} arr1     Array 1\r\n   * @param {Array} arr2     Array 2\r\n   * @return {Array}         resulting array\r\n   */\n\n\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n\n    var result = [];\n    var size = arr1.length;\n\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n\n    return result;\n  }\n});","map":{"version":3,"names":["factory","isInteger","isMatrix","name","dependencies","createDiff","_ref","typed","matrix","subtract","number","ArrayMatrix","arr","_diff","toArray","ArrayMatrixNumber","dim","RangeError","_recursive","ArrayMatrixBigNumber","Array","isArray","result","forEach","element","push","size","length","i","_ElementDiff","obj1","obj2","obj1IsArray","obj2IsArray","_ArrayDiff","TypeError","arr1","arr2"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/matrix/diff.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { isInteger } from '../../utils/number.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nvar name = 'diff';\r\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\r\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    subtract,\r\n    number\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a new matrix or array of the difference between elements of the given array\r\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\r\n   * If no dimension parameter is passed it is assumed as dimension 0\r\n   *\r\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\r\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\r\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.diff(arr)\r\n   *     math.diff(arr, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const arr = [1, 2, 4, 7, 0]\r\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\r\n   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])\r\n   *\r\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\r\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\r\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\r\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\r\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\r\n   *\r\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\r\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\r\n   *\r\n   *     // These will all produce the same result\r\n   *     math.diff([[1, 2], [3, 4]])\r\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\r\n   *     math.diff([[1, 2], math.matrix([3, 4])])\r\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\r\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\r\n   *\r\n   * See Also:\r\n   *\r\n   *      sum\r\n   *      subtract\r\n   *      partitionSelect\r\n   *\r\n   * @param {Array | Matrix} arr    An array or matrix\r\n   * @param {number} dim            Dimension\r\n   * @return {Array | Matrix}       Difference between array elements in given dimension\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(arr) {\r\n      // No dimension specified => assume dimension 0\r\n      if (isMatrix(arr)) {\r\n        return matrix(_diff(arr.toArray()));\r\n      } else {\r\n        return _diff(arr);\r\n      }\r\n    },\r\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\r\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\r\n\r\n      if (isMatrix(arr)) {\r\n        return matrix(_recursive(arr.toArray(), dim));\r\n      } else {\r\n        return _recursive(arr, dim);\r\n      }\r\n    },\r\n    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {\r\n      return this(arr, number(dim));\r\n    }\r\n  });\r\n  /**\r\n   * Recursively find the correct dimension in the array/matrix\r\n   * Then Apply _diff to that dimension\r\n   *\r\n   * @param {Array} arr      The array\r\n   * @param {number} dim     Dimension\r\n   * @return {Array}         resulting array\r\n   */\r\n\r\n  function _recursive(arr, dim) {\r\n    if (isMatrix(arr)) {\r\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\r\n    }\r\n\r\n    if (!Array.isArray(arr)) {\r\n      throw RangeError('Array/Matrix does not have that many dimensions');\r\n    }\r\n\r\n    if (dim > 0) {\r\n      var result = [];\r\n      arr.forEach(element => {\r\n        result.push(_recursive(element, dim - 1));\r\n      });\r\n      return result;\r\n    } else if (dim === 0) {\r\n      return _diff(arr);\r\n    } else {\r\n      throw RangeError('Cannot have negative dimension');\r\n    }\r\n  }\r\n  /**\r\n   * Difference between elements in the array\r\n   *\r\n   * @param {Array} arr      An array\r\n   * @return {Array}         resulting array\r\n   */\r\n\r\n\r\n  function _diff(arr) {\r\n    var result = [];\r\n    var size = arr.length;\r\n\r\n    if (size < 2) {\r\n      return arr;\r\n    }\r\n\r\n    for (var i = 1; i < size; i++) {\r\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\r\n    }\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * Difference between 2 objects\r\n   *\r\n   * @param {Object} obj1    First object\r\n   * @param {Object} obj2    Second object\r\n   * @return {Array}         resulting array\r\n   */\r\n\r\n\r\n  function _ElementDiff(obj1, obj2) {\r\n    // Convert matrices to arrays\r\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\r\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\r\n    var obj1IsArray = Array.isArray(obj1);\r\n    var obj2IsArray = Array.isArray(obj2);\r\n\r\n    if (obj1IsArray && obj2IsArray) {\r\n      return _ArrayDiff(obj1, obj2);\r\n    }\r\n\r\n    if (!obj1IsArray && !obj2IsArray) {\r\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\r\n    }\r\n\r\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\r\n  }\r\n  /**\r\n   * Difference of elements in 2 arrays\r\n   *\r\n   * @param {Array} arr1     Array 1\r\n   * @param {Array} arr2     Array 2\r\n   * @return {Array}         resulting array\r\n   */\r\n\r\n\r\n  function _ArrayDiff(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n      throw RangeError('Not all sub-arrays have the same length');\r\n    }\r\n\r\n    var result = [];\r\n    var size = arr1.length;\r\n\r\n    for (var i = 0; i < size; i++) {\r\n      result.push(_ElementDiff(arr1[i], arr2[i]));\r\n    }\r\n\r\n    return result;\r\n  }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}