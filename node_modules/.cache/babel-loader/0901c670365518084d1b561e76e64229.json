{"ast":null,"code":"import { clone, mapObject, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\r\n   * Set configuration options for math.js, and get current options.\r\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\r\n   *\r\n   * This function is only available on a mathjs instance created using `create`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.config(config: Object): Object\r\n   *\r\n   * Examples:\r\n   *\r\n   *\r\n   *     import { create, all } from 'mathjs'\r\n   *\r\n   *     // create a mathjs instance\r\n   *     const math = create(all)\r\n   *\r\n   *     math.config().number                // outputs 'number'\r\n   *     math.evaluate('0.4')                // outputs number 0.4\r\n   *     math.config({number: 'Fraction'})\r\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\r\n   *\r\n   * @param {Object} [options] Available options:\r\n   *                            {number} epsilon\r\n   *                              Minimum relative difference between two\r\n   *                              compared values, used by all comparison functions.\r\n   *                            {string} matrix\r\n   *                              A string 'Matrix' (default) or 'Array'.\r\n   *                            {string} number\r\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\r\n   *                            {number} precision\r\n   *                              The number of significant digits for BigNumbers.\r\n   *                              Not applicable for Numbers.\r\n   *                            {string} parenthesis\r\n   *                              How to display parentheses in LaTeX and string\r\n   *                              output.\r\n   *                            {string} randomSeed\r\n   *                              Random seed for seeded pseudo random number generator.\r\n   *                              Set to null to randomly seed.\r\n   * @return {Object} Returns the current configuration\r\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\r\n * Test whether an Array contains a specific item.\r\n * @param {Array.<string>} array\r\n * @param {string} item\r\n * @return {boolean}\r\n */\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\r\n * Validate an option\r\n * @param {Object} options         Object with options\r\n * @param {string} name            Name of the option to validate\r\n * @param {Array.<string>} values  Array with valid values for this option\r\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}","map":{"version":3,"names":["clone","mapObject","deepExtend","DEFAULT_CONFIG","MATRIX_OPTIONS","NUMBER_OPTIONS","configFactory","config","emit","_config","options","prev","validateOption","curr","changes","Object","keys","forEach","key","defineProperty","get","enumerable","configurable","contains","array","item","indexOf","name","values","undefined","console","warn","map","value","JSON","stringify","join"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/core/function/config.js"],"sourcesContent":["import { clone, mapObject, deepExtend } from '../../utils/object.js';\r\nimport { DEFAULT_CONFIG } from '../config.js';\r\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\r\n\r\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\r\n\r\nexport function configFactory(config, emit) {\r\n  /**\r\n   * Set configuration options for math.js, and get current options.\r\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\r\n   *\r\n   * This function is only available on a mathjs instance created using `create`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.config(config: Object): Object\r\n   *\r\n   * Examples:\r\n   *\r\n   *\r\n   *     import { create, all } from 'mathjs'\r\n   *\r\n   *     // create a mathjs instance\r\n   *     const math = create(all)\r\n   *\r\n   *     math.config().number                // outputs 'number'\r\n   *     math.evaluate('0.4')                // outputs number 0.4\r\n   *     math.config({number: 'Fraction'})\r\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\r\n   *\r\n   * @param {Object} [options] Available options:\r\n   *                            {number} epsilon\r\n   *                              Minimum relative difference between two\r\n   *                              compared values, used by all comparison functions.\r\n   *                            {string} matrix\r\n   *                              A string 'Matrix' (default) or 'Array'.\r\n   *                            {string} number\r\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\r\n   *                            {number} precision\r\n   *                              The number of significant digits for BigNumbers.\r\n   *                              Not applicable for Numbers.\r\n   *                            {string} parenthesis\r\n   *                              How to display parentheses in LaTeX and string\r\n   *                              output.\r\n   *                            {string} randomSeed\r\n   *                              Random seed for seeded pseudo random number generator.\r\n   *                              Set to null to randomly seed.\r\n   * @return {Object} Returns the current configuration\r\n   */\r\n  function _config(options) {\r\n    if (options) {\r\n      var prev = mapObject(config, clone); // validate some of the options\r\n\r\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\r\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\r\n\r\n      deepExtend(config, options);\r\n      var curr = mapObject(config, clone);\r\n      var changes = mapObject(options, clone); // emit 'config' event\r\n\r\n      emit('config', curr, prev, changes);\r\n      return curr;\r\n    } else {\r\n      return mapObject(config, clone);\r\n    }\r\n  } // attach the valid options to the function so they can be extended\r\n\r\n\r\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\r\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\r\n\r\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\r\n    Object.defineProperty(_config, key, {\r\n      get: () => config[key],\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  });\r\n  return _config;\r\n}\r\n/**\r\n * Test whether an Array contains a specific item.\r\n * @param {Array.<string>} array\r\n * @param {string} item\r\n * @return {boolean}\r\n */\r\n\r\nfunction contains(array, item) {\r\n  return array.indexOf(item) !== -1;\r\n}\r\n/**\r\n * Validate an option\r\n * @param {Object} options         Object with options\r\n * @param {string} name            Name of the option to validate\r\n * @param {Array.<string>} values  Array with valid values for this option\r\n */\r\n\r\n\r\nfunction validateOption(options, name, values) {\r\n  if (options[name] !== undefined && !contains(values, options[name])) {\r\n    // unknown value\r\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}