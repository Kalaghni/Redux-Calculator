{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\r\n   */\n\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","asinhNumber","name","dependencies","createAsinh","_ref","typed","number","Complex","x","asinh","BigNumber","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/trigonometry/asinh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { asinhNumber } from '../../plain/number/index.js';\r\nvar name = 'asinh';\r\nvar dependencies = ['typed'];\r\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\r\n   */\r\n  return typed('asinh', {\r\n    number: asinhNumber,\r\n    Complex: function Complex(x) {\r\n      return x.asinh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.asinh();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since asinh(0) = 0\r\n      return deepMap(x, this, true);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAAC,OAAD,EAAU;IACpBC,MAAM,EAAEN,WADY;IAEpBO,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACC,KAAF,EAAP;IACD,CAJmB;IAKpBC,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;MAC/B,OAAOA,CAAC,CAACC,KAAF,EAAP;IACD,CAPmB;IAQpB,kBAAkB,SAASE,WAAT,CAAqBH,CAArB,EAAwB;MACxC;MACA,OAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;IACD;EAXmB,CAAV,CAAZ;AAaD,CAvC8C,CAAxC"},"metadata":{},"sourceType":"module"}