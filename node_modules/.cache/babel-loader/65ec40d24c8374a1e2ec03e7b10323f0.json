{"ast":null,"code":"import { evaluate, sqrt } from \"mathjs\";\n\nconst appendReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"APPEND_NUM\":\n      return state + action.char.toString();\n\n    case \"APPEND_SYMBOL\":\n      return state + \" \" + action.char + \" \";\n\n    case \"BACKSPACE_NUM\":\n      if (state.toString().endsWith(\" \")) {\n        return state.toString().slice(0, -3);\n      } else {\n        return state.toString().slice(0, -1);\n      }\n\n    case \"EQUALS\":\n      let result = evaluate(state);\n\n      if (!isNaN(result)) {\n        return evaluate(state);\n      } else {\n        return state;\n      }\n\n    case \"SQRT\":\n      return sqrt(parseFloat(state));\n\n    case \"CLEAR\":\n      return \"\";\n\n    default:\n      return state;\n  }\n};\n\nexport default appendReducer;","map":{"version":3,"names":["evaluate","sqrt","appendReducer","state","action","type","char","toString","endsWith","slice","result","isNaN","parseFloat"],"sources":["/Users/joshwood/Workspace/react-playground/redux-calculator/src/reducers/appendReducer.js"],"sourcesContent":["import { evaluate, sqrt } from \"mathjs\";\n\nconst appendReducer = (state = \"\", action) => {\n    switch(action.type) {\n        case \"APPEND_NUM\":\n            return state + action.char.toString();\n        case \"APPEND_SYMBOL\":\n            return state + \" \" + action.char + \" \";\n        case \"BACKSPACE_NUM\":\n            if (state.toString().endsWith(\" \")) {\n                return state.toString().slice(0, -3);\n            }\n            else {\n                return state.toString().slice(0, -1);\n            }            \n        case \"EQUALS\":\n            let result = evaluate(state);\n            if (!isNaN(result)) {\n                return evaluate(state);\n            }\n            else {\n                return state;\n            }\n        case \"SQRT\":\n            return sqrt(parseFloat(state));\n        case \"CLEAR\":\n            return \"\";\n        default:\n            return state;\n    }\n}\nexport default appendReducer;"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,QAA+B,QAA/B;;AAEA,MAAMC,aAAa,GAAG,YAAwB;EAAA,IAAvBC,KAAuB,uEAAf,EAAe;EAAA,IAAXC,MAAW;;EAC1C,QAAOA,MAAM,CAACC,IAAd;IACI,KAAK,YAAL;MACI,OAAOF,KAAK,GAAGC,MAAM,CAACE,IAAP,CAAYC,QAAZ,EAAf;;IACJ,KAAK,eAAL;MACI,OAAOJ,KAAK,GAAG,GAAR,GAAcC,MAAM,CAACE,IAArB,GAA4B,GAAnC;;IACJ,KAAK,eAAL;MACI,IAAIH,KAAK,CAACI,QAAN,GAAiBC,QAAjB,CAA0B,GAA1B,CAAJ,EAAoC;QAChC,OAAOL,KAAK,CAACI,QAAN,GAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAAC,CAA3B,CAAP;MACH,CAFD,MAGK;QACD,OAAON,KAAK,CAACI,QAAN,GAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAAC,CAA3B,CAAP;MACH;;IACL,KAAK,QAAL;MACI,IAAIC,MAAM,GAAGV,QAAQ,CAACG,KAAD,CAArB;;MACA,IAAI,CAACQ,KAAK,CAACD,MAAD,CAAV,EAAoB;QAChB,OAAOV,QAAQ,CAACG,KAAD,CAAf;MACH,CAFD,MAGK;QACD,OAAOA,KAAP;MACH;;IACL,KAAK,MAAL;MACI,OAAOF,IAAI,CAACW,UAAU,CAACT,KAAD,CAAX,CAAX;;IACJ,KAAK,OAAL;MACI,OAAO,EAAP;;IACJ;MACI,OAAOA,KAAP;EAzBR;AA2BH,CA5BD;;AA6BA,eAAeD,aAAf"},"metadata":{},"sourceType":"module"}