{"ast":null,"code":"import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n  /**\r\n   * Concatenate two or more matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.concat(A, B, C, ...)\r\n   *     math.concat(A, B, C, ..., dim)\r\n   *\r\n   * Where:\r\n   *\r\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\r\n   *   By default the last dimension of the matrices.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const A = [[1, 2], [5, 6]]\r\n   *    const B = [[3, 4], [7, 8]]\r\n   *\r\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\r\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\r\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\r\n   *\r\n   * See also:\r\n   *\r\n   *    size, squeeze, subset, transpose\r\n   *\r\n   * @param {... Array | Matrix} args     Two or more matrices\r\n   * @return {Array | Matrix} Concatenated matrix\r\n   */\n\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n/**\r\n * Recursively concatenate two matrices.\r\n * The contents of the matrices is not cloned.\r\n * @param {Array} a             Multi dimensional array\r\n * @param {Array} b             Multi dimensional array\r\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\r\n * @param {number} dim          The current dim (zero-based)\r\n * @return {Array} c            The concatenated matrix\r\n * @private\r\n */\n\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}","map":{"version":3,"names":["isBigNumber","isMatrix","isNumber","clone","arraySize","IndexError","DimensionError","factory","name","dependencies","createConcat","_ref","typed","matrix","isInteger","ArrayMatrixNumberBigNumber","args","i","len","length","dim","prevDim","asMatrix","matrices","arg","Error","valueOf","TypeError","m","size","SyntaxError","res","shift","_concat","string","join","a","b","concatDim","c","concat"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/matrix/concat.js"],"sourcesContent":["import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { arraySize } from '../../utils/array.js';\r\nimport { IndexError } from '../../error/IndexError.js';\r\nimport { DimensionError } from '../../error/DimensionError.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'concat';\r\nvar dependencies = ['typed', 'matrix', 'isInteger'];\r\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    isInteger\r\n  } = _ref;\r\n\r\n  /**\r\n   * Concatenate two or more matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.concat(A, B, C, ...)\r\n   *     math.concat(A, B, C, ..., dim)\r\n   *\r\n   * Where:\r\n   *\r\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\r\n   *   By default the last dimension of the matrices.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const A = [[1, 2], [5, 6]]\r\n   *    const B = [[3, 4], [7, 8]]\r\n   *\r\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\r\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\r\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\r\n   *\r\n   * See also:\r\n   *\r\n   *    size, squeeze, subset, transpose\r\n   *\r\n   * @param {... Array | Matrix} args     Two or more matrices\r\n   * @return {Array | Matrix} Concatenated matrix\r\n   */\r\n  return typed(name, {\r\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\r\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\r\n      var i;\r\n      var len = args.length;\r\n      var dim = -1; // zero-based dimension\r\n\r\n      var prevDim;\r\n      var asMatrix = false;\r\n      var matrices = []; // contains multi dimensional arrays\r\n\r\n      for (i = 0; i < len; i++) {\r\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\r\n\r\n        if (isMatrix(arg)) {\r\n          asMatrix = true;\r\n        }\r\n\r\n        if (isNumber(arg) || isBigNumber(arg)) {\r\n          if (i !== len - 1) {\r\n            throw new Error('Dimension must be specified as last argument');\r\n          } // last argument contains the dimension on which to concatenate\r\n\r\n\r\n          prevDim = dim;\r\n          dim = arg.valueOf(); // change BigNumber to number\r\n\r\n          if (!isInteger(dim)) {\r\n            throw new TypeError('Integer number expected for dimension');\r\n          }\r\n\r\n          if (dim < 0 || i > 0 && dim > prevDim) {\r\n            // TODO: would be more clear when throwing a DimensionError here\r\n            throw new IndexError(dim, prevDim + 1);\r\n          }\r\n        } else {\r\n          // this is a matrix or array\r\n          var m = clone(arg).valueOf();\r\n          var size = arraySize(m);\r\n          matrices[i] = m;\r\n          prevDim = dim;\r\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\r\n\r\n          if (i > 0 && dim !== prevDim) {\r\n            throw new DimensionError(prevDim + 1, dim + 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (matrices.length === 0) {\r\n        throw new SyntaxError('At least one matrix expected');\r\n      }\r\n\r\n      var res = matrices.shift();\r\n\r\n      while (matrices.length) {\r\n        res = _concat(res, matrices.shift(), dim, 0);\r\n      }\r\n\r\n      return asMatrix ? matrix(res) : res;\r\n    },\r\n    '...string': function string(args) {\r\n      return args.join('');\r\n    }\r\n  });\r\n});\r\n/**\r\n * Recursively concatenate two matrices.\r\n * The contents of the matrices is not cloned.\r\n * @param {Array} a             Multi dimensional array\r\n * @param {Array} b             Multi dimensional array\r\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\r\n * @param {number} dim          The current dim (zero-based)\r\n * @return {Array} c            The concatenated matrix\r\n * @private\r\n */\r\n\r\nfunction _concat(a, b, concatDim, dim) {\r\n  if (dim < concatDim) {\r\n    // recurse into next dimension\r\n    if (a.length !== b.length) {\r\n      throw new DimensionError(a.length, b.length);\r\n    }\r\n\r\n    var c = [];\r\n\r\n    for (var i = 0; i < a.length; i++) {\r\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\r\n    }\r\n\r\n    return c;\r\n  } else {\r\n    // concatenate this dimension\r\n    return a.concat(b);\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}