{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log2Number } from '../../plain/number/index.js';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n  /**\r\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log2(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log2(0.03125)           // returns -5\r\n   *    math.log2(16)                // returns 4\r\n   *    math.log2(16) / math.log2(2) // returns 4\r\n   *    math.pow(2, 4)               // returns 16\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 2-base logarithm of `x`\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n  /**\r\n   * Calculate log2 for a complex value\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\n\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});","map":{"version":3,"names":["factory","deepMap","log2Number","name","dependencies","createLog2","_ref","typed","config","Complex","number","x","predictable","_log2Complex","BigNumber","isNegative","log","toNumber","ArrayMatrix","newX","Math","sqrt","re","im","log2","LN2","atan2"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/log2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { log2Number } from '../../plain/number/index.js';\r\nvar name = 'log2';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log2(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log2(0.03125)           // returns -5\r\n   *    math.log2(16)                // returns 4\r\n   *    math.log2(16) / math.log2(2) // returns 4\r\n   *    math.pow(2, 4)               // returns 16\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 2-base logarithm of `x`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= 0 || config.predictable) {\r\n        return log2Number(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return _log2Complex(new Complex(x, 0));\r\n      }\r\n    },\r\n    Complex: _log2Complex,\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.log(2);\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return _log2Complex(new Complex(x.toNumber(), 0));\r\n      }\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n  /**\r\n   * Calculate log2 for a complex value\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\r\n\r\n  function _log2Complex(x) {\r\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\r\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAIIF,IAJJ,CAEEE,MAFF;EAAA,IAGEC,OAHF,GAIIH,IAJJ,CAGEG,OAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjBO,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,IAAIA,CAAC,IAAI,CAAL,IAAUH,MAAM,CAACI,WAArB,EAAkC;QAChC,OAAOV,UAAU,CAACS,CAAD,CAAjB;MACD,CAFD,MAEO;QACL;QACA,OAAOE,YAAY,CAAC,IAAIJ,OAAJ,CAAYE,CAAZ,EAAe,CAAf,CAAD,CAAnB;MACD;IACF,CARgB;IASjBF,OAAO,EAAEI,YATQ;IAUjBC,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;MAC/B,IAAI,CAACA,CAAC,CAACI,UAAF,EAAD,IAAmBP,MAAM,CAACI,WAA9B,EAA2C;QACzC,OAAOD,CAAC,CAACK,GAAF,CAAM,CAAN,CAAP;MACD,CAFD,MAEO;QACL;QACA,OAAOH,YAAY,CAAC,IAAIJ,OAAJ,CAAYE,CAAC,CAACM,QAAF,EAAZ,EAA0B,CAA1B,CAAD,CAAnB;MACD;IACF,CAjBgB;IAkBjB,kBAAkB,SAASC,WAAT,CAAqBP,CAArB,EAAwB;MACxC,OAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;IACD;EApBgB,CAAP,CAAZ;EAsBA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASE,YAAT,CAAsBF,CAAtB,EAAyB;IACvB,IAAIQ,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUV,CAAC,CAACW,EAAF,GAAOX,CAAC,CAACW,EAAT,GAAcX,CAAC,CAACY,EAAF,GAAOZ,CAAC,CAACY,EAAjC,CAAX;IACA,OAAO,IAAId,OAAJ,CAAYW,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACI,IAAL,CAAUL,IAAV,CAAZ,GAA8BC,IAAI,CAACJ,GAAL,CAASG,IAAT,IAAiBC,IAAI,CAACK,GAAhE,EAAqEL,IAAI,CAACM,KAAL,CAAWf,CAAC,CAACY,EAAb,EAAiBZ,CAAC,CAACW,EAAnB,IAAyBF,IAAI,CAACK,GAAnG,CAAP;EACD;AACF,CAjE6C,CAAvC"},"metadata":{},"sourceType":"module"}