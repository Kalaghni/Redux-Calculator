{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNaN = _ref.isNaN,\n      isNumeric = _ref.isNumeric;\n  /**\r\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\r\n  * If there are more than one modes, it returns a list of those values.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *     math.mode(a, b, c, ...)\r\n  *     math.mode(A)\r\n  *\r\n  * Examples:\r\n  *\r\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\r\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\r\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\r\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\r\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\r\n  *\r\n  * See also:\r\n  *\r\n  *     median,\r\n  *     mean\r\n  *\r\n  * @param {... *} args  A single matrix\r\n  * @return {*} The mode of all values\r\n  */\n\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n  /**\r\n   * Calculates the mode in an 1-dimensional array\r\n   * @param {Array} values\r\n   * @return {Array} mode\r\n   * @private\r\n   */\n\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n\n    var count = {};\n    var mode = [];\n    var max = 0;\n\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n\n      count[value]++;\n\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n\n    return mode;\n  }\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createMode","_ref","typed","isNaN","isNumeric","_mode","_","args","values","valueOf","num","length","Error","count","mode","max","i","value","push"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/mode.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'mode';\r\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\r\nexport var createMode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    isNaN,\r\n    isNumeric\r\n  } = _ref;\r\n\r\n  /**\r\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\r\n  * If there are more than one modes, it returns a list of those values.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *     math.mode(a, b, c, ...)\r\n  *     math.mode(A)\r\n  *\r\n  * Examples:\r\n  *\r\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\r\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\r\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\r\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\r\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\r\n  *\r\n  * See also:\r\n  *\r\n  *     median,\r\n  *     mean\r\n  *\r\n  * @param {... *} args  A single matrix\r\n  * @return {*} The mode of all values\r\n  */\r\n  return typed(name, {\r\n    'Array | Matrix': _mode,\r\n    '...': function _(args) {\r\n      return _mode(args);\r\n    }\r\n  });\r\n  /**\r\n   * Calculates the mode in an 1-dimensional array\r\n   * @param {Array} values\r\n   * @return {Array} mode\r\n   * @private\r\n   */\r\n\r\n  function _mode(values) {\r\n    values = flatten(values.valueOf());\r\n    var num = values.length;\r\n\r\n    if (num === 0) {\r\n      throw new Error('Cannot calculate mode of an empty array');\r\n    }\r\n\r\n    var count = {};\r\n    var mode = [];\r\n    var max = 0;\r\n\r\n    for (var i = 0; i < values.length; i++) {\r\n      var value = values[i];\r\n\r\n      if (isNumeric(value) && isNaN(value)) {\r\n        throw new Error('Cannot calculate mode of an array containing NaN values');\r\n      }\r\n\r\n      if (!(value in count)) {\r\n        count[value] = 0;\r\n      }\r\n\r\n      count[value]++;\r\n\r\n      if (count[value] === max) {\r\n        mode.push(value);\r\n      } else if (count[value] > max) {\r\n        max = count[value];\r\n        mode = [value];\r\n      }\r\n    }\r\n\r\n    return mode;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,WAAnB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,KAFF,GAIIF,IAJJ,CAEEE,KAFF;EAAA,IAGEC,SAHF,GAIIH,IAJJ,CAGEG,SAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkBO,KADD;IAEjB,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,OAAOF,KAAK,CAACE,IAAD,CAAZ;IACD;EAJgB,CAAP,CAAZ;EAMA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASF,KAAT,CAAeG,MAAf,EAAuB;IACrBA,MAAM,GAAGZ,OAAO,CAACY,MAAM,CAACC,OAAP,EAAD,CAAhB;IACA,IAAIC,GAAG,GAAGF,MAAM,CAACG,MAAjB;;IAEA,IAAID,GAAG,KAAK,CAAZ,EAAe;MACb,MAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;IACD;;IAED,IAAIC,KAAK,GAAG,EAAZ;IACA,IAAIC,IAAI,GAAG,EAAX;IACA,IAAIC,GAAG,GAAG,CAAV;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACG,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;MACtC,IAAIC,KAAK,GAAGT,MAAM,CAACQ,CAAD,CAAlB;;MAEA,IAAIZ,SAAS,CAACa,KAAD,CAAT,IAAoBd,KAAK,CAACc,KAAD,CAA7B,EAAsC;QACpC,MAAM,IAAIL,KAAJ,CAAU,yDAAV,CAAN;MACD;;MAED,IAAI,EAAEK,KAAK,IAAIJ,KAAX,CAAJ,EAAuB;QACrBA,KAAK,CAACI,KAAD,CAAL,GAAe,CAAf;MACD;;MAEDJ,KAAK,CAACI,KAAD,CAAL;;MAEA,IAAIJ,KAAK,CAACI,KAAD,CAAL,KAAiBF,GAArB,EAA0B;QACxBD,IAAI,CAACI,IAAL,CAAUD,KAAV;MACD,CAFD,MAEO,IAAIJ,KAAK,CAACI,KAAD,CAAL,GAAeF,GAAnB,EAAwB;QAC7BA,GAAG,GAAGF,KAAK,CAACI,KAAD,CAAX;QACAH,IAAI,GAAG,CAACG,KAAD,CAAP;MACD;IACF;;IAED,OAAOH,IAAP;EACD;AACF,CAhF6C,CAAvC"},"metadata":{},"sourceType":"module"}