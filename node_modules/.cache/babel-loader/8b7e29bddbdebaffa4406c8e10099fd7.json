{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareNatural = _ref.compareNatural;\n  /**\r\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\r\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setSize(set)\r\n   *    math.setSize(set, unique)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setSize([1, 2, 2, 4])          // returns 4\r\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference\r\n   *\r\n   * @param {Array | Matrix}    a  A multiset\r\n   * @return {number}            The number of elements of the (multi)set\r\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n\n        return count;\n      }\n    }\n  });\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createSetSize","_ref","typed","compareNatural","ArrayMatrix","a","Array","isArray","length","toArray","ArrayMatrixBoolean","unique","b","sort","count","i"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/set/setSize.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'setSize';\r\nvar dependencies = ['typed', 'compareNatural'];\r\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    compareNatural\r\n  } = _ref;\r\n\r\n  /**\r\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\r\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setSize(set)\r\n   *    math.setSize(set, unique)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setSize([1, 2, 2, 4])          // returns 4\r\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference\r\n   *\r\n   * @param {Array | Matrix}    a  A multiset\r\n   * @return {number}            The number of elements of the (multi)set\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(a) {\r\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\r\n    },\r\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\r\n      if (unique === false || a.length === 0) {\r\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\r\n      } else {\r\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\r\n        var count = 1;\r\n\r\n        for (var i = 1; i < b.length; i++) {\r\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\r\n            count++;\r\n          }\r\n        }\r\n\r\n        return count;\r\n      }\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,gBAAV,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,cAFF,GAGIF,IAHJ,CAEEE,cAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASM,WAAT,CAAqBC,CAArB,EAAwB;MACxC,OAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBT,OAAO,CAACS,CAAD,CAAP,CAAWG,MAA9B,GAAuCZ,OAAO,CAACS,CAAC,CAACI,OAAF,EAAD,CAAP,CAAqBD,MAAnE;IACD,CAHgB;IAIjB,2BAA2B,SAASE,kBAAT,CAA4BL,CAA5B,EAA+BM,MAA/B,EAAuC;MAChE,IAAIA,MAAM,KAAK,KAAX,IAAoBN,CAAC,CAACG,MAAF,KAAa,CAArC,EAAwC;QACtC,OAAOF,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBT,OAAO,CAACS,CAAD,CAAP,CAAWG,MAA9B,GAAuCZ,OAAO,CAACS,CAAC,CAACI,OAAF,EAAD,CAAP,CAAqBD,MAAnE;MACD,CAFD,MAEO;QACL,IAAII,CAAC,GAAGhB,OAAO,CAACU,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBA,CAAnB,GAAuBA,CAAC,CAACI,OAAF,EAAxB,CAAP,CAA4CI,IAA5C,CAAiDV,cAAjD,CAAR;QACA,IAAIW,KAAK,GAAG,CAAZ;;QAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACJ,MAAtB,EAA8BO,CAAC,EAA/B,EAAmC;UACjC,IAAIZ,cAAc,CAACS,CAAC,CAACG,CAAD,CAAF,EAAOH,CAAC,CAACG,CAAC,GAAG,CAAL,CAAR,CAAd,KAAmC,CAAvC,EAA0C;YACxCD,KAAK;UACN;QACF;;QAED,OAAOA,KAAP;MACD;IACF;EAnBgB,CAAP,CAAZ;AAqBD,CAhDgD,CAA1C"},"metadata":{},"sourceType":"module"}