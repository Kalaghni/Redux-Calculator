{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      abs = _ref.abs,\n      fix = _ref.fix,\n      round = _ref.round,\n      equal = _ref.equal,\n      isNumeric = _ref.isNumeric,\n      format = _ref.format,\n      number = _ref.number,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber,\n      _Fraction = _ref.Fraction;\n  var toNumber = number;\n  /**\r\n   * A unit can be constructed in the following ways:\r\n   *\r\n   *     const a = new Unit(value, name)\r\n   *     const b = new Unit(null, name)\r\n   *     const c = Unit.parse(str)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const a = new Unit(5, 'cm')               // 50 mm\r\n   *     const b = Unit.parse('23 kg')             // 23 kg\r\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\r\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\r\n   *\r\n   * @class Unit\r\n   * @constructor Unit\r\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\r\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\r\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\r\n   * Attach type information\r\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Parse a string into a unit. The value of the unit is parsed as number,\r\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\r\n   *\r\n   * Throws an exception if the provided string does not contain a valid unit or\r\n   * cannot be parsed.\r\n   * @memberof Unit\r\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\r\n   * @return {Unit} unit\r\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\r\n   * create a copy of this unit\r\n   * @memberof Unit\r\n   * @return {Unit} Returns a cloned version of the unit\r\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\r\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\r\n   * @memberof Unit\r\n   * @return {boolean} True if the unit is derived\r\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\r\n   * Normalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number | BigNumber | Fraction | boolean} value\r\n   * @return {number | BigNumber | Fraction | boolean} normalized value\r\n   * @private\r\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\r\n   * Denormalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number} value\r\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\r\n   * @return {number} denormalized value\r\n   * @private\r\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\r\n   * Find a unit from a string\r\n   * @memberof Unit\r\n   * @param {string} str              A string like 'cm' or 'inch'\r\n   * @returns {Object | null} result  When found, an object with fields unit and\r\n   *                                  prefix is returned. Else, null is returned.\r\n   * @private\r\n   */\n\n\n  var _findUnit = memoize(function (str) {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: function hasher(args) {\n      return args[0];\n    },\n    limit: 100\n  });\n  /**\r\n   * Test if the given expression is a unit.\r\n   * The unit can have a prefix but cannot have a value.\r\n   * @memberof Unit\r\n   * @param {string} name   A string to be tested whether it is a value less unit.\r\n   *                        The unit can have prefix, like \"cm\"\r\n   * @return {boolean}      true if the given string is a unit\r\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\r\n   * check if this unit has given base unit\r\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\r\n   * @memberof Unit\r\n   * @param {BASE_UNITS | string | undefined} base\r\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Check if this unit has a base or bases equal to another base or bases\r\n   * For derived units, the exponent on each base also must match\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if equal base\r\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Check if this unit equals another unit\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if both units are equal\r\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\r\n   * Multiply this unit with another one\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} product of this unit and the other unit\r\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\r\n   * Divide this unit by another one\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} result of dividing this unit by the other unit\r\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\r\n   * Calculate the power of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} p\r\n   * @returns {Unit}      The result: this^p\r\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\r\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\r\n   * @param {Unit} unit\r\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\r\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\r\n   * Calculate the absolute value of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} x\r\n   * @returns {Unit}      The result: |x|, absolute value of x\r\n   */\n\n\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = Unit._getNumberConverter(typeOf(ret.value)); // convert to Fraction or BigNumber if needed\n\n\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\r\n   * Convert the unit to a specific unit name.\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\r\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n  /**\r\n   * Return the value of the unit when represented with given valueless unit\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number} Returns the unit value as number.\r\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\r\n   * Return the value of the unit in the original numeric type\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number | BigNumber | Fraction} Returns the unit value\r\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\r\n   * Get a string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\r\n   * Get a JSON representation of the unit\r\n   * @memberof Unit\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\r\n   * Instantiate a Unit from a JSON object\r\n   * @memberof Unit\r\n   * @param {Object} json  A JSON object structured as:\r\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   * @return {Unit}\r\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\r\n   * Returns the string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\r\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\r\n   * The returned Unit will contain a list of the \"best\" units for formatting.\r\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\r\n   * Returns a new Unit in the SI system with the same value as this one\r\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\r\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\r\n   * Get a string representation of the Unit, with optional formatting options.\r\n   * @memberof Unit\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string}\r\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\r\n   * Calculate the best prefix using current value.\r\n   * @memberof Unit\r\n   * @returns {Object} prefix\r\n   * @private\r\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\r\n   * Returns an array of units whose sum is equal to this unit\r\n   * @memberof Unit\r\n   * @param {Array} [parts] An array of strings or valueless units.\r\n   *\r\n   *   Example:\r\n   *\r\n   *   const u = new Unit(1, 'm')\r\n   *   u.splitUnit(['feet', 'inch'])\r\n   *     [ 3 feet, 3.3700787401575 inch ]\r\n   *\r\n   * @return {Array} An array of units.\r\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\r\n   * Index  Dimension\r\n   * -----  ---------\r\n   *   0    Length\r\n   *   1    Mass\r\n   *   2    Time\r\n   *   3    Current\r\n   *   4    Temperature\r\n   *   5    Luminous intensity\r\n   *   6    Amount of substance\r\n   *   7    Angle\r\n   *   8    Bit (digital)\r\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\r\n   *\r\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(function (x) {\n      return 0;\n    })\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\r\n     * Unicode breaks in browsers if charset is not specified\r\n    Ω: {\r\n      name: 'Ω',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\r\n   * Calculate the values for the angle units.\r\n   * Value is calculated as number or BigNumber depending on the configuration\r\n   * @param {{number: 'number' | 'BigNumber'}} config\r\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\r\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\r\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\r\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\r\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\r\n   * Set a unit system for formatting derived units.\r\n   * @param {string} [name] The name of the unit system.\r\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\r\n   * Return the current unit system.\r\n   * @return {string} The current unit system.\r\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\r\n   * Converters to convert from number to an other numeric type like BigNumber\r\n   * or Fraction\r\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\r\n   * Retrieve the right convertor function corresponding with the type\r\n   * of provided exampleValue.\r\n   *\r\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\r\n   *                        In case of an unknown type,\r\n   * @return {Function}\r\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\r\n   * Checks if a character is a valid latin letter (upper or lower case).\r\n   * Note that this function can be overridden, for example to allow support of other alphabets.\r\n   * @param {string} c Tested character\r\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\r\n   * Wrapper around createUnitSingle.\r\n   * Example:\r\n   *  createUnit({\r\n   *    foo: { },\r\n   *    bar: {\r\n   *      definition: 'kg/foo',\r\n   *      aliases: ['ba', 'barr', 'bars'],\r\n   *      offset: 200\r\n   *    },\r\n   *    baz: '4 bar'\r\n   *  },\r\n   *  {\r\n   *    override: true\r\n   *  })\r\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\r\n   * @param {object} options\r\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   * Example:\r\n   *  createUnitSingle('knot', '0.514444444 m/s')\r\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\r\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\r\n   * or an Object. If an Object, may have the following properties:\r\n   *   - definition {string|Unit} The definition of this unit.\r\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\r\n   *     The default is \"none\".\r\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\r\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\r\n   *     is 459.67. Default is 0.\r\n   *   - baseName {string} If the unit's dimension does not match that of any other\r\n   *     base unit, the name of the newly create base unit. Otherwise, this property\r\n   *     has no effect.\r\n   *\r\n   * @param {Object} options   (optional) An object containing any of the following\r\n   * properties:\r\n   *   - override {boolean} Whether this unit should be allowed to override existing\r\n   *     units.\r\n   *\r\n   * @return {Unit}\r\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["_extends","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","_BigNumber","BigNumber","_Fraction","Fraction","toNumber","Unit","value","Error","undefined","TypeError","u","parse","units","dimensions","unit","UNIT_NONE","prefix","PREFIXES","NONE","power","BASE_DIMENSIONS","_normalize","fixPrefix","skipAutomaticSimplification","prototype","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","p","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","slice","_isDerived","Math","convert","_getNumberConverter","unitValue","unitPrefixValue","unitPower","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_i","inverted","valThis","valOther","getNumericIfUnitless","divide","_i2","_i3","predictable","ret","offset","nominalOffset","unitOffset","W","to","valuelessUnit","concat","thisUnitValue","thisNominalOffset","thisUnitOffset","otherUnitValue","otherNominalOffset","otherUnitOffset","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","x","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","map","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { memoize } from '../../utils/function.js';\r\nimport { endsWith } from '../../utils/string.js';\r\nimport { clone, hasOwnProperty } from '../../utils/object.js';\r\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\r\nvar name = 'Unit';\r\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\r\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    on,\r\n    config,\r\n    addScalar,\r\n    subtract,\r\n    multiplyScalar,\r\n    divideScalar,\r\n    pow,\r\n    abs,\r\n    fix,\r\n    round,\r\n    equal,\r\n    isNumeric,\r\n    format,\r\n    number,\r\n    Complex,\r\n    BigNumber: _BigNumber,\r\n    Fraction: _Fraction\r\n  } = _ref;\r\n  var toNumber = number;\r\n  /**\r\n   * A unit can be constructed in the following ways:\r\n   *\r\n   *     const a = new Unit(value, name)\r\n   *     const b = new Unit(null, name)\r\n   *     const c = Unit.parse(str)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const a = new Unit(5, 'cm')               // 50 mm\r\n   *     const b = Unit.parse('23 kg')             // 23 kg\r\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\r\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\r\n   *\r\n   * @class Unit\r\n   * @constructor Unit\r\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\r\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\r\n   */\r\n\r\n  function Unit(value, name) {\r\n    if (!(this instanceof Unit)) {\r\n      throw new Error('Constructor must be called with the new operator');\r\n    }\r\n\r\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\r\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\r\n    }\r\n\r\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\r\n      throw new TypeError('Second parameter in Unit constructor must be a string');\r\n    }\r\n\r\n    if (name !== undefined) {\r\n      var u = Unit.parse(name);\r\n      this.units = u.units;\r\n      this.dimensions = u.dimensions;\r\n    } else {\r\n      this.units = [{\r\n        unit: UNIT_NONE,\r\n        prefix: PREFIXES.NONE,\r\n        // link to a list with supported prefixes\r\n        power: 0\r\n      }];\r\n      this.dimensions = [];\r\n\r\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n        this.dimensions[i] = 0;\r\n      }\r\n    }\r\n\r\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\r\n    this.fixPrefix = false; // if true, function format will not search for the\r\n    // best prefix but leave it as initially provided.\r\n    // fixPrefix is set true by the method Unit.to\r\n    // The justification behind this is that if the constructor is explicitly called,\r\n    // the caller wishes the units to be returned exactly as he supplied.\r\n\r\n    this.skipAutomaticSimplification = true;\r\n  }\r\n  /**\r\n   * Attach type information\r\n   */\r\n\r\n\r\n  Unit.prototype.type = 'Unit';\r\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\r\n\r\n  var text, index, c;\r\n\r\n  function skipWhitespace() {\r\n    while (c === ' ' || c === '\\t') {\r\n      next();\r\n    }\r\n  }\r\n\r\n  function isDigitDot(c) {\r\n    return c >= '0' && c <= '9' || c === '.';\r\n  }\r\n\r\n  function isDigit(c) {\r\n    return c >= '0' && c <= '9';\r\n  }\r\n\r\n  function next() {\r\n    index++;\r\n    c = text.charAt(index);\r\n  }\r\n\r\n  function revert(oldIndex) {\r\n    index = oldIndex;\r\n    c = text.charAt(index);\r\n  }\r\n\r\n  function parseNumber() {\r\n    var number = '';\r\n    var oldIndex = index;\r\n\r\n    if (c === '+') {\r\n      next();\r\n    } else if (c === '-') {\r\n      number += c;\r\n      next();\r\n    }\r\n\r\n    if (!isDigitDot(c)) {\r\n      // a + or - must be followed by a digit\r\n      revert(oldIndex);\r\n      return null;\r\n    } // get number, can have a single dot\r\n\r\n\r\n    if (c === '.') {\r\n      number += c;\r\n      next();\r\n\r\n      if (!isDigit(c)) {\r\n        // this is no legal number, it is just a dot\r\n        revert(oldIndex);\r\n        return null;\r\n      }\r\n    } else {\r\n      while (isDigit(c)) {\r\n        number += c;\r\n        next();\r\n      }\r\n\r\n      if (c === '.') {\r\n        number += c;\r\n        next();\r\n      }\r\n    }\r\n\r\n    while (isDigit(c)) {\r\n      number += c;\r\n      next();\r\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\r\n\r\n\r\n    if (c === 'E' || c === 'e') {\r\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\r\n      var tentativeNumber = '';\r\n      var tentativeIndex = index;\r\n      tentativeNumber += c;\r\n      next();\r\n\r\n      if (c === '+' || c === '-') {\r\n        tentativeNumber += c;\r\n        next();\r\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\r\n\r\n\r\n      if (!isDigit(c)) {\r\n        // The e or E must belong to something else, so return the number without the e or E.\r\n        revert(tentativeIndex);\r\n        return number;\r\n      } // We can now safely say that this is scientific notation.\r\n\r\n\r\n      number = number + tentativeNumber;\r\n\r\n      while (isDigit(c)) {\r\n        number += c;\r\n        next();\r\n      }\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  function parseUnit() {\r\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\r\n\r\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\r\n      unitName += c;\r\n      next();\r\n    } // Must begin with [a-zA-Z]\r\n\r\n\r\n    var firstC = unitName.charAt(0);\r\n\r\n    if (Unit.isValidAlpha(firstC)) {\r\n      return unitName;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function parseCharacter(toFind) {\r\n    if (c === toFind) {\r\n      next();\r\n      return toFind;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * Parse a string into a unit. The value of the unit is parsed as number,\r\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\r\n   *\r\n   * Throws an exception if the provided string does not contain a valid unit or\r\n   * cannot be parsed.\r\n   * @memberof Unit\r\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\r\n   * @return {Unit} unit\r\n   */\r\n\r\n\r\n  Unit.parse = function (str, options) {\r\n    options = options || {};\r\n    text = str;\r\n    index = -1;\r\n    c = '';\r\n\r\n    if (typeof text !== 'string') {\r\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\r\n    }\r\n\r\n    var unit = new Unit();\r\n    unit.units = [];\r\n    var powerMultiplierCurrent = 1;\r\n    var expectingUnit = false; // A unit should follow this pattern:\r\n    // [number] ...[ [*/] unit[^number] ]\r\n    // unit[^number] ... [ [*/] unit[^number] ]\r\n    // Rules:\r\n    // number is any floating point number.\r\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\r\n    // The string may optionally begin with a number.\r\n    // Each unit may optionally be followed by ^number.\r\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\r\n    //   2m^2kg/s^2\r\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\r\n    //   4erg\r\n\r\n    next();\r\n    skipWhitespace(); // Optional number at the start of the string\r\n\r\n    var valueStr = parseNumber();\r\n    var value = null;\r\n\r\n    if (valueStr) {\r\n      if (config.number === 'BigNumber') {\r\n        value = new _BigNumber(valueStr);\r\n      } else if (config.number === 'Fraction') {\r\n        try {\r\n          // not all numbers can be turned in Fractions, for example very small numbers not\r\n          value = new _Fraction(valueStr);\r\n        } catch (err) {\r\n          value = parseFloat(valueStr);\r\n        }\r\n      } else {\r\n        // number\r\n        value = parseFloat(valueStr);\r\n      }\r\n\r\n      skipWhitespace(); // Whitespace is not required here\r\n      // handle multiplication or division right after the value, like '1/s'\r\n\r\n      if (parseCharacter('*')) {\r\n        powerMultiplierCurrent = 1;\r\n        expectingUnit = true;\r\n      } else if (parseCharacter('/')) {\r\n        powerMultiplierCurrent = -1;\r\n        expectingUnit = true;\r\n      }\r\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\r\n\r\n\r\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\r\n\r\n    var powerMultiplierStackProduct = 1;\r\n\r\n    while (true) {\r\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\r\n      // A '(' will always appear directly before a unit.\r\n\r\n      while (c === '(') {\r\n        powerMultiplierStack.push(powerMultiplierCurrent);\r\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\r\n        powerMultiplierCurrent = 1;\r\n        next();\r\n        skipWhitespace();\r\n      } // Is there something here?\r\n\r\n\r\n      var uStr = void 0;\r\n\r\n      if (c) {\r\n        var oldC = c;\r\n        uStr = parseUnit();\r\n\r\n        if (uStr === null) {\r\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\r\n        }\r\n      } else {\r\n        // End of input.\r\n        break;\r\n      } // Verify the unit exists and get the prefix (if any)\r\n\r\n\r\n      var res = _findUnit(uStr);\r\n\r\n      if (res === null) {\r\n        // Unit not found.\r\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\r\n      }\r\n\r\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\r\n\r\n      skipWhitespace();\r\n\r\n      if (parseCharacter('^')) {\r\n        skipWhitespace();\r\n        var p = parseNumber();\r\n\r\n        if (p === null) {\r\n          // No valid number found for the power!\r\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\r\n        }\r\n\r\n        power *= p;\r\n      } // Add the unit to the list\r\n\r\n\r\n      unit.units.push({\r\n        unit: res.unit,\r\n        prefix: res.prefix,\r\n        power\r\n      });\r\n\r\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\r\n      } // Check for and consume closing parentheses, popping from the stack.\r\n      // A ')' will always follow a unit.\r\n\r\n\r\n      skipWhitespace();\r\n\r\n      while (c === ')') {\r\n        if (powerMultiplierStack.length === 0) {\r\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\r\n        }\r\n\r\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\r\n        next();\r\n        skipWhitespace();\r\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\r\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\r\n\r\n\r\n      expectingUnit = false;\r\n\r\n      if (parseCharacter('*')) {\r\n        // explicit multiplication\r\n        powerMultiplierCurrent = 1;\r\n        expectingUnit = true;\r\n      } else if (parseCharacter('/')) {\r\n        // division\r\n        powerMultiplierCurrent = -1;\r\n        expectingUnit = true;\r\n      } else {\r\n        // implicit multiplication\r\n        powerMultiplierCurrent = 1;\r\n      } // Replace the unit into the auto unit system\r\n\r\n\r\n      if (res.unit.base) {\r\n        var baseDim = res.unit.base.key;\r\n        UNIT_SYSTEMS.auto[baseDim] = {\r\n          unit: res.unit,\r\n          prefix: res.prefix\r\n        };\r\n      }\r\n    } // Has the string been entirely consumed?\r\n\r\n\r\n    skipWhitespace();\r\n\r\n    if (c) {\r\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\r\n    } // Is there a trailing slash?\r\n\r\n\r\n    if (expectingUnit) {\r\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\r\n    } // Is the parentheses stack empty?\r\n\r\n\r\n    if (powerMultiplierStack.length !== 0) {\r\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\r\n    } // Are there any units at all?\r\n\r\n\r\n    if (unit.units.length === 0 && !options.allowNoUnits) {\r\n      throw new SyntaxError('\"' + str + '\" contains no units');\r\n    }\r\n\r\n    unit.value = value !== undefined ? unit._normalize(value) : null;\r\n    return unit;\r\n  };\r\n  /**\r\n   * create a copy of this unit\r\n   * @memberof Unit\r\n   * @return {Unit} Returns a cloned version of the unit\r\n   */\r\n\r\n\r\n  Unit.prototype.clone = function () {\r\n    var unit = new Unit();\r\n    unit.fixPrefix = this.fixPrefix;\r\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\r\n    unit.value = clone(this.value);\r\n    unit.dimensions = this.dimensions.slice(0);\r\n    unit.units = [];\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      unit.units[i] = {};\r\n\r\n      for (var p in this.units[i]) {\r\n        if (hasOwnProperty(this.units[i], p)) {\r\n          unit.units[i][p] = this.units[i][p];\r\n        }\r\n      }\r\n    }\r\n\r\n    return unit;\r\n  };\r\n  /**\r\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\r\n   * @memberof Unit\r\n   * @return {boolean} True if the unit is derived\r\n   */\r\n\r\n\r\n  Unit.prototype._isDerived = function () {\r\n    if (this.units.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\r\n  };\r\n  /**\r\n   * Normalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number | BigNumber | Fraction | boolean} value\r\n   * @return {number | BigNumber | Fraction | boolean} normalized value\r\n   * @private\r\n   */\r\n\r\n\r\n  Unit.prototype._normalize = function (value) {\r\n    if (value === null || value === undefined || this.units.length === 0) {\r\n      return value;\r\n    }\r\n\r\n    var res = value;\r\n\r\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      var unitValue = convert(this.units[i].unit.value);\r\n      var unitPrefixValue = convert(this.units[i].prefix.value);\r\n      var unitPower = convert(this.units[i].power);\r\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\r\n    }\r\n\r\n    return res;\r\n  };\r\n  /**\r\n   * Denormalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number} value\r\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\r\n   * @return {number} denormalized value\r\n   * @private\r\n   */\r\n\r\n\r\n  Unit.prototype._denormalize = function (value, prefixValue) {\r\n    if (value === null || value === undefined || this.units.length === 0) {\r\n      return value;\r\n    }\r\n\r\n    var res = value;\r\n\r\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      var unitValue = convert(this.units[i].unit.value);\r\n      var unitPrefixValue = convert(this.units[i].prefix.value);\r\n      var unitPower = convert(this.units[i].power);\r\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\r\n    }\r\n\r\n    return res;\r\n  };\r\n  /**\r\n   * Find a unit from a string\r\n   * @memberof Unit\r\n   * @param {string} str              A string like 'cm' or 'inch'\r\n   * @returns {Object | null} result  When found, an object with fields unit and\r\n   *                                  prefix is returned. Else, null is returned.\r\n   * @private\r\n   */\r\n\r\n\r\n  var _findUnit = memoize(str => {\r\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\r\n    if (hasOwnProperty(UNITS, str)) {\r\n      var unit = UNITS[str];\r\n      var prefix = unit.prefixes[''];\r\n      return {\r\n        unit,\r\n        prefix\r\n      };\r\n    }\r\n\r\n    for (var _name in UNITS) {\r\n      if (hasOwnProperty(UNITS, _name)) {\r\n        if (endsWith(str, _name)) {\r\n          var _unit = UNITS[_name];\r\n          var prefixLen = str.length - _name.length;\r\n          var prefixName = str.substring(0, prefixLen);\r\n\r\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\r\n\r\n          if (_prefix !== undefined) {\r\n            // store unit, prefix, and value\r\n            return {\r\n              unit: _unit,\r\n              prefix: _prefix\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }, {\r\n    hasher: args => args[0],\r\n    limit: 100\r\n  });\r\n  /**\r\n   * Test if the given expression is a unit.\r\n   * The unit can have a prefix but cannot have a value.\r\n   * @memberof Unit\r\n   * @param {string} name   A string to be tested whether it is a value less unit.\r\n   *                        The unit can have prefix, like \"cm\"\r\n   * @return {boolean}      true if the given string is a unit\r\n   */\r\n\r\n\r\n  Unit.isValuelessUnit = function (name) {\r\n    return _findUnit(name) !== null;\r\n  };\r\n  /**\r\n   * check if this unit has given base unit\r\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\r\n   * @memberof Unit\r\n   * @param {BASE_UNITS | string | undefined} base\r\n   */\r\n\r\n\r\n  Unit.prototype.hasBase = function (base) {\r\n    if (typeof base === 'string') {\r\n      base = BASE_UNITS[base];\r\n    }\r\n\r\n    if (!base) {\r\n      return false;\r\n    } // All dimensions must be the same\r\n\r\n\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n  /**\r\n   * Check if this unit has a base or bases equal to another base or bases\r\n   * For derived units, the exponent on each base also must match\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if equal base\r\n   */\r\n\r\n\r\n  Unit.prototype.equalBase = function (other) {\r\n    // All dimensions must be the same\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n  /**\r\n   * Check if this unit equals another unit\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if both units are equal\r\n   */\r\n\r\n\r\n  Unit.prototype.equals = function (other) {\r\n    return this.equalBase(other) && equal(this.value, other.value);\r\n  };\r\n  /**\r\n   * Multiply this unit with another one\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} product of this unit and the other unit\r\n   */\r\n\r\n\r\n  Unit.prototype.multiply = function (other) {\r\n    var res = this.clone();\r\n\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\r\n    } // Append other's units list onto res\r\n\r\n\r\n    for (var _i = 0; _i < other.units.length; _i++) {\r\n      // Make a shallow copy of every unit\r\n      var inverted = _objectSpread({}, other.units[_i]);\r\n\r\n      res.units.push(inverted);\r\n    } // If at least one operand has a value, then the result should also have a value\r\n\r\n\r\n    if (this.value !== null || other.value !== null) {\r\n      var valThis = this.value === null ? this._normalize(1) : this.value;\r\n      var valOther = other.value === null ? other._normalize(1) : other.value;\r\n      res.value = multiplyScalar(valThis, valOther);\r\n    } else {\r\n      res.value = null;\r\n    }\r\n\r\n    res.skipAutomaticSimplification = false;\r\n    return getNumericIfUnitless(res);\r\n  };\r\n  /**\r\n   * Divide this unit by another one\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} result of dividing this unit by the other unit\r\n   */\r\n\r\n\r\n  Unit.prototype.divide = function (other) {\r\n    var res = this.clone();\r\n\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\r\n    } // Invert and append other's units list onto res\r\n\r\n\r\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\r\n      // Make a shallow copy of every unit\r\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\r\n        power: -other.units[_i2].power\r\n      });\r\n\r\n      res.units.push(inverted);\r\n    } // If at least one operand has a value, the result should have a value\r\n\r\n\r\n    if (this.value !== null || other.value !== null) {\r\n      var valThis = this.value === null ? this._normalize(1) : this.value;\r\n      var valOther = other.value === null ? other._normalize(1) : other.value;\r\n      res.value = divideScalar(valThis, valOther);\r\n    } else {\r\n      res.value = null;\r\n    }\r\n\r\n    res.skipAutomaticSimplification = false;\r\n    return getNumericIfUnitless(res);\r\n  };\r\n  /**\r\n   * Calculate the power of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} p\r\n   * @returns {Unit}      The result: this^p\r\n   */\r\n\r\n\r\n  Unit.prototype.pow = function (p) {\r\n    var res = this.clone();\r\n\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\r\n    } // Adjust the power of each unit in the list\r\n\r\n\r\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\r\n      res.units[_i3].power *= p;\r\n    }\r\n\r\n    if (res.value !== null) {\r\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\r\n      // if (!isNumeric(res.value)) {\r\n      //  res.value = NaN\r\n      // }\r\n      // Update: Complex supported now\r\n    } else {\r\n      res.value = null;\r\n    }\r\n\r\n    res.skipAutomaticSimplification = false;\r\n    return getNumericIfUnitless(res);\r\n  };\r\n  /**\r\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\r\n   * @param {Unit} unit\r\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\r\n   */\r\n\r\n\r\n  function getNumericIfUnitless(unit) {\r\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\r\n      return unit.value;\r\n    } else {\r\n      return unit;\r\n    }\r\n  }\r\n  /**\r\n   * Calculate the absolute value of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} x\r\n   * @returns {Unit}      The result: |x|, absolute value of x\r\n   */\r\n\r\n\r\n  Unit.prototype.abs = function () {\r\n    var ret = this.clone();\r\n\r\n    if (ret.value !== null) {\r\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\r\n        ret.value = abs(ret.value);\r\n      } else {\r\n        // To give the correct, but unexpected, results for units with an offset.\r\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\r\n        // We must take the offset into consideration here\r\n        var convert = Unit._getNumberConverter(typeOf(ret.value)); // convert to Fraction or BigNumber if needed\r\n\r\n\r\n        var unitValue = convert(ret.units[0].unit.value);\r\n        var nominalOffset = convert(ret.units[0].unit.offset);\r\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\r\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\r\n      }\r\n    }\r\n\r\n    for (var i in ret.units) {\r\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\r\n        ret.units[i].unit = UNITS.W;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  };\r\n  /**\r\n   * Convert the unit to a specific unit name.\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\r\n   */\r\n\r\n\r\n  Unit.prototype.to = function (valuelessUnit) {\r\n    var value = this.value === null ? this._normalize(1) : this.value;\r\n    var other;\r\n\r\n    if (typeof valuelessUnit === 'string') {\r\n      other = Unit.parse(valuelessUnit);\r\n    } else if (isUnit(valuelessUnit)) {\r\n      other = valuelessUnit.clone();\r\n    } else {\r\n      throw new Error('String or Unit expected as parameter');\r\n    }\r\n\r\n    if (!this.equalBase(other)) {\r\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\r\n    }\r\n\r\n    if (other.value !== null) {\r\n      throw new Error('Cannot convert to a unit with a value');\r\n    }\r\n\r\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\r\n      other.value = clone(value);\r\n    } else {\r\n      /* Need to adjust value by difference in offset to convert */\r\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n\r\n      var thisUnitValue = convert(this.units[0].unit.value);\r\n      var thisNominalOffset = convert(this.units[0].unit.offset);\r\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\r\n      var otherUnitValue = convert(other.units[0].unit.value);\r\n      var otherNominalOffset = convert(other.units[0].unit.offset);\r\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\r\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\r\n    }\r\n\r\n    other.fixPrefix = true;\r\n    other.skipAutomaticSimplification = true;\r\n    return other;\r\n  };\r\n  /**\r\n   * Return the value of the unit when represented with given valueless unit\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number} Returns the unit value as number.\r\n   */\r\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\r\n\r\n\r\n  Unit.prototype.toNumber = function (valuelessUnit) {\r\n    return toNumber(this.toNumeric(valuelessUnit));\r\n  };\r\n  /**\r\n   * Return the value of the unit in the original numeric type\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number | BigNumber | Fraction} Returns the unit value\r\n   */\r\n\r\n\r\n  Unit.prototype.toNumeric = function (valuelessUnit) {\r\n    var other;\r\n\r\n    if (valuelessUnit) {\r\n      // Allow getting the numeric value without converting to a different unit\r\n      other = this.to(valuelessUnit);\r\n    } else {\r\n      other = this.clone();\r\n    }\r\n\r\n    if (other._isDerived() || other.units.length === 0) {\r\n      return other._denormalize(other.value);\r\n    } else {\r\n      return other._denormalize(other.value, other.units[0].prefix.value);\r\n    }\r\n  };\r\n  /**\r\n   * Get a string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  Unit.prototype.toString = function () {\r\n    return this.format();\r\n  };\r\n  /**\r\n   * Get a JSON representation of the unit\r\n   * @memberof Unit\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   */\r\n\r\n\r\n  Unit.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'Unit',\r\n      value: this._denormalize(this.value),\r\n      unit: this.formatUnits(),\r\n      fixPrefix: this.fixPrefix\r\n    };\r\n  };\r\n  /**\r\n   * Instantiate a Unit from a JSON object\r\n   * @memberof Unit\r\n   * @param {Object} json  A JSON object structured as:\r\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   * @return {Unit}\r\n   */\r\n\r\n\r\n  Unit.fromJSON = function (json) {\r\n    var unit = new Unit(json.value, json.unit);\r\n    unit.fixPrefix = json.fixPrefix || false;\r\n    return unit;\r\n  };\r\n  /**\r\n   * Returns the string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  Unit.prototype.valueOf = Unit.prototype.toString;\r\n  /**\r\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\r\n   * The returned Unit will contain a list of the \"best\" units for formatting.\r\n   */\r\n\r\n  Unit.prototype.simplify = function () {\r\n    var ret = this.clone();\r\n    var proposedUnitList = []; // Search for a matching base\r\n\r\n    var matchingBase;\r\n\r\n    for (var key in currentUnitSystem) {\r\n      if (hasOwnProperty(currentUnitSystem, key)) {\r\n        if (ret.hasBase(BASE_UNITS[key])) {\r\n          matchingBase = key;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (matchingBase === 'NONE') {\r\n      ret.units = [];\r\n    } else {\r\n      var matchingUnit;\r\n\r\n      if (matchingBase) {\r\n        // Does the unit system have a matching unit?\r\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\r\n          matchingUnit = currentUnitSystem[matchingBase];\r\n        }\r\n      }\r\n\r\n      if (matchingUnit) {\r\n        ret.units = [{\r\n          unit: matchingUnit.unit,\r\n          prefix: matchingUnit.prefix,\r\n          power: 1.0\r\n        }];\r\n      } else {\r\n        // Multiple units or units with powers are formatted like this:\r\n        // 5 (kg m^2) / (s^3 mol)\r\n        // Build an representation from the base units of the current unit system\r\n        var missingBaseDim = false;\r\n\r\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n          var baseDim = BASE_DIMENSIONS[i];\r\n\r\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\r\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\r\n              proposedUnitList.push({\r\n                unit: currentUnitSystem[baseDim].unit,\r\n                prefix: currentUnitSystem[baseDim].prefix,\r\n                power: ret.dimensions[i] || 0\r\n              });\r\n            } else {\r\n              missingBaseDim = true;\r\n            }\r\n          }\r\n        } // Is the proposed unit list \"simpler\" than the existing one?\r\n\r\n\r\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\r\n          // Replace this unit list with the proposed list\r\n          ret.units = proposedUnitList;\r\n        }\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  };\r\n  /**\r\n   * Returns a new Unit in the SI system with the same value as this one\r\n   */\r\n\r\n\r\n  Unit.prototype.toSI = function () {\r\n    var ret = this.clone();\r\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\r\n    // 5 (kg m^2) / (s^3 mol)\r\n    // Build an representation from the base units of the SI unit system\r\n\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      var baseDim = BASE_DIMENSIONS[i];\r\n\r\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\r\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\r\n          proposedUnitList.push({\r\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\r\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\r\n            power: ret.dimensions[i] || 0\r\n          });\r\n        } else {\r\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\r\n        }\r\n      }\r\n    } // Replace this unit list with the proposed list\r\n\r\n\r\n    ret.units = proposedUnitList;\r\n    ret.fixPrefix = true;\r\n    ret.skipAutomaticSimplification = true;\r\n    return ret;\r\n  };\r\n  /**\r\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  Unit.prototype.formatUnits = function () {\r\n    var strNum = '';\r\n    var strDen = '';\r\n    var nNum = 0;\r\n    var nDen = 0;\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      if (this.units[i].power > 0) {\r\n        nNum++;\r\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\r\n\r\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\r\n          strNum += '^' + this.units[i].power;\r\n        }\r\n      } else if (this.units[i].power < 0) {\r\n        nDen++;\r\n      }\r\n    }\r\n\r\n    if (nDen > 0) {\r\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\r\n        if (this.units[_i4].power < 0) {\r\n          if (nNum > 0) {\r\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\r\n\r\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\r\n              strDen += '^' + -this.units[_i4].power;\r\n            }\r\n          } else {\r\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\r\n            strDen += '^' + this.units[_i4].power;\r\n          }\r\n        }\r\n      }\r\n    } // Remove leading \" \"\r\n\r\n\r\n    strNum = strNum.substr(1);\r\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\r\n\r\n    if (nNum > 1 && nDen > 0) {\r\n      strNum = '(' + strNum + ')';\r\n    }\r\n\r\n    if (nDen > 1 && nNum > 0) {\r\n      strDen = '(' + strDen + ')';\r\n    }\r\n\r\n    var str = strNum;\r\n\r\n    if (nNum > 0 && nDen > 0) {\r\n      str += ' / ';\r\n    }\r\n\r\n    str += strDen;\r\n    return str;\r\n  };\r\n  /**\r\n   * Get a string representation of the Unit, with optional formatting options.\r\n   * @memberof Unit\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  Unit.prototype.format = function (options) {\r\n    // Simplfy the unit list, unless it is valueless or was created directly in the\r\n    // constructor or as the result of to or toSI\r\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\r\n\r\n    var isImaginary = false;\r\n\r\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\r\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\r\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\r\n    }\r\n\r\n    for (var i in simp.units) {\r\n      if (hasOwnProperty(simp.units, i)) {\r\n        if (simp.units[i].unit) {\r\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\r\n            simp.units[i].unit = UNITS.VAR;\r\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\r\n            simp.units[i].unit = UNITS.VA;\r\n          }\r\n        }\r\n      }\r\n    } // Now apply the best prefix\r\n    // Units must have only one unit and not have the fixPrefix flag set\r\n\r\n\r\n    if (simp.units.length === 1 && !simp.fixPrefix) {\r\n      // Units must have integer powers, otherwise the prefix will change the\r\n      // outputted value by not-an-integer-power-of-ten\r\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\r\n        // Apply the best prefix\r\n        simp.units[0].prefix = simp._bestPrefix();\r\n      }\r\n    }\r\n\r\n    var value = simp._denormalize(simp.value);\r\n\r\n    var str = simp.value !== null ? format(value, options || {}) : '';\r\n    var unitStr = simp.formatUnits();\r\n\r\n    if (simp.value && isComplex(simp.value)) {\r\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\r\n    }\r\n\r\n    if (unitStr.length > 0 && str.length > 0) {\r\n      str += ' ';\r\n    }\r\n\r\n    str += unitStr;\r\n    return str;\r\n  };\r\n  /**\r\n   * Calculate the best prefix using current value.\r\n   * @memberof Unit\r\n   * @returns {Object} prefix\r\n   * @private\r\n   */\r\n\r\n\r\n  Unit.prototype._bestPrefix = function () {\r\n    if (this.units.length !== 1) {\r\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\r\n    }\r\n\r\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\r\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\r\n    } // find the best prefix value (resulting in the value of which\r\n    // the absolute value of the log10 is closest to zero,\r\n    // though with a little offset of 1.2 for nicer values: you get a\r\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\r\n    // Note: the units value can be any numeric type, but to find the best\r\n    // prefix it's enough to work with limited precision of a regular number\r\n    // Update: using mathjs abs since we also allow complex numbers\r\n\r\n\r\n    var absValue = this.value !== null ? abs(this.value) : 0;\r\n    var absUnitValue = abs(this.units[0].unit.value);\r\n    var bestPrefix = this.units[0].prefix;\r\n\r\n    if (absValue === 0) {\r\n      return bestPrefix;\r\n    }\r\n\r\n    var power = this.units[0].power;\r\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\r\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\r\n\r\n    bestDiff = Math.abs(bestDiff);\r\n    var prefixes = this.units[0].unit.prefixes;\r\n\r\n    for (var p in prefixes) {\r\n      if (hasOwnProperty(prefixes, p)) {\r\n        var prefix = prefixes[p];\r\n\r\n        if (prefix.scientific) {\r\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\r\n\r\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\r\n            // choose the prefix with the smallest diff, or if equal, choose the one\r\n            // with the shortest name (can happen with SHORTLONG for example)\r\n            bestPrefix = prefix;\r\n            bestDiff = diff;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return bestPrefix;\r\n  };\r\n  /**\r\n   * Returns an array of units whose sum is equal to this unit\r\n   * @memberof Unit\r\n   * @param {Array} [parts] An array of strings or valueless units.\r\n   *\r\n   *   Example:\r\n   *\r\n   *   const u = new Unit(1, 'm')\r\n   *   u.splitUnit(['feet', 'inch'])\r\n   *     [ 3 feet, 3.3700787401575 inch ]\r\n   *\r\n   * @return {Array} An array of units.\r\n   */\r\n\r\n\r\n  Unit.prototype.splitUnit = function (parts) {\r\n    var x = this.clone();\r\n    var ret = [];\r\n\r\n    for (var i = 0; i < parts.length; i++) {\r\n      // Convert x to the requested unit\r\n      x = x.to(parts[i]);\r\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\r\n\r\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\r\n      // since fix can incorrectly round down if there is round-off error\r\n\r\n      var xRounded = round(xNumeric);\r\n      var xFixed = void 0;\r\n      var isNearlyEqual = equal(xRounded, xNumeric);\r\n\r\n      if (isNearlyEqual) {\r\n        xFixed = xRounded;\r\n      } else {\r\n        xFixed = fix(x.toNumeric());\r\n      }\r\n\r\n      var y = new Unit(xFixed, parts[i].toString());\r\n      ret.push(y);\r\n      x = subtract(x, y);\r\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\r\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\r\n    // all the parts so far with the original value. If they are nearly equal,\r\n    // we set the remainder to 0.\r\n\r\n\r\n    var testSum = 0;\r\n\r\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\r\n      testSum = addScalar(testSum, ret[_i5].value);\r\n    }\r\n\r\n    if (equal(testSum, this.value)) {\r\n      x.value = 0;\r\n    }\r\n\r\n    ret.push(x);\r\n    return ret;\r\n  };\r\n\r\n  var PREFIXES = {\r\n    NONE: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      }\r\n    },\r\n    SHORT: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e1,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-1,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-3,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-15,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-21,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-24,\r\n        scientific: true\r\n      }\r\n    },\r\n    LONG: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      deca: {\r\n        name: 'deca',\r\n        value: 1e1,\r\n        scientific: false\r\n      },\r\n      hecto: {\r\n        name: 'hecto',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      kilo: {\r\n        name: 'kilo',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      mega: {\r\n        name: 'mega',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      giga: {\r\n        name: 'giga',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      tera: {\r\n        name: 'tera',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      peta: {\r\n        name: 'peta',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      exa: {\r\n        name: 'exa',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      zetta: {\r\n        name: 'zetta',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      yotta: {\r\n        name: 'yotta',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      deci: {\r\n        name: 'deci',\r\n        value: 1e-1,\r\n        scientific: false\r\n      },\r\n      centi: {\r\n        name: 'centi',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      milli: {\r\n        name: 'milli',\r\n        value: 1e-3,\r\n        scientific: true\r\n      },\r\n      micro: {\r\n        name: 'micro',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      nano: {\r\n        name: 'nano',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      pico: {\r\n        name: 'pico',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      femto: {\r\n        name: 'femto',\r\n        value: 1e-15,\r\n        scientific: true\r\n      },\r\n      atto: {\r\n        name: 'atto',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      zepto: {\r\n        name: 'zepto',\r\n        value: 1e-21,\r\n        scientific: true\r\n      },\r\n      yocto: {\r\n        name: 'yocto',\r\n        value: 1e-24,\r\n        scientific: true\r\n      }\r\n    },\r\n    SQUARED: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e4,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e30,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e36,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e42,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e48,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-4,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-24,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-30,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-36,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-42,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-48,\r\n        scientific: true\r\n      }\r\n    },\r\n    CUBIC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e3,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e6,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e27,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e36,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e45,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e54,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e63,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e72,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-3,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-6,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-27,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-36,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-45,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-54,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-63,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-72,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_SHORT_SI: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e24,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_SHORT_IEC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      Ki: {\r\n        name: 'Ki',\r\n        value: 1024,\r\n        scientific: true\r\n      },\r\n      Mi: {\r\n        name: 'Mi',\r\n        value: Math.pow(1024, 2),\r\n        scientific: true\r\n      },\r\n      Gi: {\r\n        name: 'Gi',\r\n        value: Math.pow(1024, 3),\r\n        scientific: true\r\n      },\r\n      Ti: {\r\n        name: 'Ti',\r\n        value: Math.pow(1024, 4),\r\n        scientific: true\r\n      },\r\n      Pi: {\r\n        name: 'Pi',\r\n        value: Math.pow(1024, 5),\r\n        scientific: true\r\n      },\r\n      Ei: {\r\n        name: 'Ei',\r\n        value: Math.pow(1024, 6),\r\n        scientific: true\r\n      },\r\n      Zi: {\r\n        name: 'Zi',\r\n        value: Math.pow(1024, 7),\r\n        scientific: true\r\n      },\r\n      Yi: {\r\n        name: 'Yi',\r\n        value: Math.pow(1024, 8),\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_LONG_SI: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      kilo: {\r\n        name: 'kilo',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      mega: {\r\n        name: 'mega',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      giga: {\r\n        name: 'giga',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      tera: {\r\n        name: 'tera',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      peta: {\r\n        name: 'peta',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      exa: {\r\n        name: 'exa',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      zetta: {\r\n        name: 'zetta',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      yotta: {\r\n        name: 'yotta',\r\n        value: 1e24,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_LONG_IEC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      kibi: {\r\n        name: 'kibi',\r\n        value: 1024,\r\n        scientific: true\r\n      },\r\n      mebi: {\r\n        name: 'mebi',\r\n        value: Math.pow(1024, 2),\r\n        scientific: true\r\n      },\r\n      gibi: {\r\n        name: 'gibi',\r\n        value: Math.pow(1024, 3),\r\n        scientific: true\r\n      },\r\n      tebi: {\r\n        name: 'tebi',\r\n        value: Math.pow(1024, 4),\r\n        scientific: true\r\n      },\r\n      pebi: {\r\n        name: 'pebi',\r\n        value: Math.pow(1024, 5),\r\n        scientific: true\r\n      },\r\n      exi: {\r\n        name: 'exi',\r\n        value: Math.pow(1024, 6),\r\n        scientific: true\r\n      },\r\n      zebi: {\r\n        name: 'zebi',\r\n        value: Math.pow(1024, 7),\r\n        scientific: true\r\n      },\r\n      yobi: {\r\n        name: 'yobi',\r\n        value: Math.pow(1024, 8),\r\n        scientific: true\r\n      }\r\n    },\r\n    BTU: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      MM: {\r\n        name: 'MM',\r\n        value: 1e6,\r\n        scientific: true\r\n      }\r\n    }\r\n  };\r\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\r\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\r\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\r\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\r\n   * Index  Dimension\r\n   * -----  ---------\r\n   *   0    Length\r\n   *   1    Mass\r\n   *   2    Time\r\n   *   3    Current\r\n   *   4    Temperature\r\n   *   5    Luminous intensity\r\n   *   6    Amount of substance\r\n   *   7    Angle\r\n   *   8    Bit (digital)\r\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\r\n   *\r\n   */\r\n\r\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\r\n  var BASE_UNITS = {\r\n    NONE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    MASS: {\r\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    LENGTH: {\r\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    TIME: {\r\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    CURRENT: {\r\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\r\n    },\r\n    TEMPERATURE: {\r\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\r\n    },\r\n    LUMINOUS_INTENSITY: {\r\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\r\n    },\r\n    AMOUNT_OF_SUBSTANCE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\r\n    },\r\n    FORCE: {\r\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    SURFACE: {\r\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    VOLUME: {\r\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ENERGY: {\r\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    POWER: {\r\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    PRESSURE: {\r\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CHARGE: {\r\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CAPACITANCE: {\r\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_POTENTIAL: {\r\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_RESISTANCE: {\r\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_INDUCTANCE: {\r\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CONDUCTANCE: {\r\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\r\n    },\r\n    MAGNETIC_FLUX: {\r\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    MAGNETIC_FLUX_DENSITY: {\r\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    FREQUENCY: {\r\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ANGLE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\r\n    },\r\n    BIT: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\r\n    }\r\n  };\r\n\r\n  for (var key in BASE_UNITS) {\r\n    if (hasOwnProperty(BASE_UNITS, key)) {\r\n      BASE_UNITS[key].key = key;\r\n    }\r\n  }\r\n\r\n  var BASE_UNIT_NONE = {};\r\n  var UNIT_NONE = {\r\n    name: '',\r\n    base: BASE_UNIT_NONE,\r\n    value: 1,\r\n    offset: 0,\r\n    dimensions: BASE_DIMENSIONS.map(x => 0)\r\n  };\r\n  var UNITS = {\r\n    // length\r\n    meter: {\r\n      name: 'meter',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    inch: {\r\n      name: 'inch',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0254,\r\n      offset: 0\r\n    },\r\n    foot: {\r\n      name: 'foot',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.3048,\r\n      offset: 0\r\n    },\r\n    yard: {\r\n      name: 'yard',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.9144,\r\n      offset: 0\r\n    },\r\n    mile: {\r\n      name: 'mile',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1609.344,\r\n      offset: 0\r\n    },\r\n    link: {\r\n      name: 'link',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.201168,\r\n      offset: 0\r\n    },\r\n    rod: {\r\n      name: 'rod',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5.0292,\r\n      offset: 0\r\n    },\r\n    chain: {\r\n      name: 'chain',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 20.1168,\r\n      offset: 0\r\n    },\r\n    angstrom: {\r\n      name: 'angstrom',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1e-10,\r\n      offset: 0\r\n    },\r\n    m: {\r\n      name: 'm',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    in: {\r\n      name: 'in',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0254,\r\n      offset: 0\r\n    },\r\n    ft: {\r\n      name: 'ft',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.3048,\r\n      offset: 0\r\n    },\r\n    yd: {\r\n      name: 'yd',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.9144,\r\n      offset: 0\r\n    },\r\n    mi: {\r\n      name: 'mi',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1609.344,\r\n      offset: 0\r\n    },\r\n    li: {\r\n      name: 'li',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.201168,\r\n      offset: 0\r\n    },\r\n    rd: {\r\n      name: 'rd',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5.029210,\r\n      offset: 0\r\n    },\r\n    ch: {\r\n      name: 'ch',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 20.1168,\r\n      offset: 0\r\n    },\r\n    mil: {\r\n      name: 'mil',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000254,\r\n      offset: 0\r\n    },\r\n    // 1/1000 inch\r\n    // Surface\r\n    m2: {\r\n      name: 'm2',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.SQUARED,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    sqin: {\r\n      name: 'sqin',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00064516,\r\n      offset: 0\r\n    },\r\n    // 645.16 mm2\r\n    sqft: {\r\n      name: 'sqft',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.09290304,\r\n      offset: 0\r\n    },\r\n    // 0.09290304 m2\r\n    sqyd: {\r\n      name: 'sqyd',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.83612736,\r\n      offset: 0\r\n    },\r\n    // 0.83612736 m2\r\n    sqmi: {\r\n      name: 'sqmi',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 2589988.110336,\r\n      offset: 0\r\n    },\r\n    // 2.589988110336 km2\r\n    sqrd: {\r\n      name: 'sqrd',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 25.29295,\r\n      offset: 0\r\n    },\r\n    // 25.29295 m2\r\n    sqch: {\r\n      name: 'sqch',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 404.6873,\r\n      offset: 0\r\n    },\r\n    // 404.6873 m2\r\n    sqmil: {\r\n      name: 'sqmil',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6.4516e-10,\r\n      offset: 0\r\n    },\r\n    // 6.4516 * 10^-10 m2\r\n    acre: {\r\n      name: 'acre',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4046.86,\r\n      offset: 0\r\n    },\r\n    // 4046.86 m2\r\n    hectare: {\r\n      name: 'hectare',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 10000,\r\n      offset: 0\r\n    },\r\n    // 10000 m2\r\n    // Volume\r\n    m3: {\r\n      name: 'm3',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.CUBIC,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    L: {\r\n      name: 'L',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    // litre\r\n    l: {\r\n      name: 'l',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    // litre\r\n    litre: {\r\n      name: 'litre',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    cuin: {\r\n      name: 'cuin',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.6387064e-5,\r\n      offset: 0\r\n    },\r\n    // 1.6387064e-5 m3\r\n    cuft: {\r\n      name: 'cuft',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.028316846592,\r\n      offset: 0\r\n    },\r\n    // 28.316 846 592 L\r\n    cuyd: {\r\n      name: 'cuyd',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.764554857984,\r\n      offset: 0\r\n    },\r\n    // 764.554 857 984 L\r\n    teaspoon: {\r\n      name: 'teaspoon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000005,\r\n      offset: 0\r\n    },\r\n    // 5 mL\r\n    tablespoon: {\r\n      name: 'tablespoon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000015,\r\n      offset: 0\r\n    },\r\n    // 15 mL\r\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\r\n    drop: {\r\n      name: 'drop',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5e-8,\r\n      offset: 0\r\n    },\r\n    // 0.05 mL = 5e-8 m3\r\n    gtt: {\r\n      name: 'gtt',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5e-8,\r\n      offset: 0\r\n    },\r\n    // 0.05 mL = 5e-8 m3\r\n    // Liquid volume\r\n    minim: {\r\n      name: 'minim',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00000006161152,\r\n      offset: 0\r\n    },\r\n    // 0.06161152 mL\r\n    fluiddram: {\r\n      name: 'fluiddram',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000036966911,\r\n      offset: 0\r\n    },\r\n    // 3.696691 mL\r\n    fluidounce: {\r\n      name: 'fluidounce',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00002957353,\r\n      offset: 0\r\n    },\r\n    // 29.57353 mL\r\n    gill: {\r\n      name: 'gill',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0001182941,\r\n      offset: 0\r\n    },\r\n    // 118.2941 mL\r\n    cc: {\r\n      name: 'cc',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1e-6,\r\n      offset: 0\r\n    },\r\n    // 1e-6 L\r\n    cup: {\r\n      name: 'cup',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0002365882,\r\n      offset: 0\r\n    },\r\n    // 236.5882 mL\r\n    pint: {\r\n      name: 'pint',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0004731765,\r\n      offset: 0\r\n    },\r\n    // 473.1765 mL\r\n    quart: {\r\n      name: 'quart',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0009463529,\r\n      offset: 0\r\n    },\r\n    // 946.3529 mL\r\n    gallon: {\r\n      name: 'gallon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.003785412,\r\n      offset: 0\r\n    },\r\n    // 3.785412 L\r\n    beerbarrel: {\r\n      name: 'beerbarrel',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.1173478,\r\n      offset: 0\r\n    },\r\n    // 117.3478 L\r\n    oilbarrel: {\r\n      name: 'oilbarrel',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.1589873,\r\n      offset: 0\r\n    },\r\n    // 158.9873 L\r\n    hogshead: {\r\n      name: 'hogshead',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.2384810,\r\n      offset: 0\r\n    },\r\n    // 238.4810 L\r\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\r\n    fldr: {\r\n      name: 'fldr',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000036966911,\r\n      offset: 0\r\n    },\r\n    // 3.696691 mL\r\n    floz: {\r\n      name: 'floz',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00002957353,\r\n      offset: 0\r\n    },\r\n    // 29.57353 mL\r\n    gi: {\r\n      name: 'gi',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0001182941,\r\n      offset: 0\r\n    },\r\n    // 118.2941 mL\r\n    cp: {\r\n      name: 'cp',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0002365882,\r\n      offset: 0\r\n    },\r\n    // 236.5882 mL\r\n    pt: {\r\n      name: 'pt',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0004731765,\r\n      offset: 0\r\n    },\r\n    // 473.1765 mL\r\n    qt: {\r\n      name: 'qt',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0009463529,\r\n      offset: 0\r\n    },\r\n    // 946.3529 mL\r\n    gal: {\r\n      name: 'gal',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.003785412,\r\n      offset: 0\r\n    },\r\n    // 3.785412 L\r\n    bbl: {\r\n      name: 'bbl',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.1173478,\r\n      offset: 0\r\n    },\r\n    // 117.3478 L\r\n    obl: {\r\n      name: 'obl',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.1589873,\r\n      offset: 0\r\n    },\r\n    // 158.9873 L\r\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\r\n    // Mass\r\n    g: {\r\n      name: 'g',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    gram: {\r\n      name: 'gram',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    ton: {\r\n      name: 'ton',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 907.18474,\r\n      offset: 0\r\n    },\r\n    t: {\r\n      name: 't',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1000,\r\n      offset: 0\r\n    },\r\n    tonne: {\r\n      name: 'tonne',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1000,\r\n      offset: 0\r\n    },\r\n    grain: {\r\n      name: 'grain',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 64.79891e-6,\r\n      offset: 0\r\n    },\r\n    dram: {\r\n      name: 'dram',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.7718451953125e-3,\r\n      offset: 0\r\n    },\r\n    ounce: {\r\n      name: 'ounce',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 28.349523125e-3,\r\n      offset: 0\r\n    },\r\n    poundmass: {\r\n      name: 'poundmass',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 453.59237e-3,\r\n      offset: 0\r\n    },\r\n    hundredweight: {\r\n      name: 'hundredweight',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 45.359237,\r\n      offset: 0\r\n    },\r\n    stick: {\r\n      name: 'stick',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 115e-3,\r\n      offset: 0\r\n    },\r\n    stone: {\r\n      name: 'stone',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6.35029318,\r\n      offset: 0\r\n    },\r\n    gr: {\r\n      name: 'gr',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 64.79891e-6,\r\n      offset: 0\r\n    },\r\n    dr: {\r\n      name: 'dr',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.7718451953125e-3,\r\n      offset: 0\r\n    },\r\n    oz: {\r\n      name: 'oz',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 28.349523125e-3,\r\n      offset: 0\r\n    },\r\n    lbm: {\r\n      name: 'lbm',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 453.59237e-3,\r\n      offset: 0\r\n    },\r\n    cwt: {\r\n      name: 'cwt',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 45.359237,\r\n      offset: 0\r\n    },\r\n    // Time\r\n    s: {\r\n      name: 's',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    min: {\r\n      name: 'min',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 60,\r\n      offset: 0\r\n    },\r\n    h: {\r\n      name: 'h',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    second: {\r\n      name: 'second',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    sec: {\r\n      name: 'sec',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    minute: {\r\n      name: 'minute',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 60,\r\n      offset: 0\r\n    },\r\n    hour: {\r\n      name: 'hour',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    day: {\r\n      name: 'day',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 86400,\r\n      offset: 0\r\n    },\r\n    week: {\r\n      name: 'week',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 7 * 86400,\r\n      offset: 0\r\n    },\r\n    month: {\r\n      name: 'month',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 2629800,\r\n      // 1/12th of Julian year\r\n      offset: 0\r\n    },\r\n    year: {\r\n      name: 'year',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 31557600,\r\n      // Julian year\r\n      offset: 0\r\n    },\r\n    decade: {\r\n      name: 'decade',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 315576000,\r\n      // Julian decade\r\n      offset: 0\r\n    },\r\n    century: {\r\n      name: 'century',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3155760000,\r\n      // Julian century\r\n      offset: 0\r\n    },\r\n    millennium: {\r\n      name: 'millennium',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 31557600000,\r\n      // Julian millennium\r\n      offset: 0\r\n    },\r\n    // Frequency\r\n    hertz: {\r\n      name: 'Hertz',\r\n      base: BASE_UNITS.FREQUENCY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0,\r\n      reciprocal: true\r\n    },\r\n    Hz: {\r\n      name: 'Hz',\r\n      base: BASE_UNITS.FREQUENCY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0,\r\n      reciprocal: true\r\n    },\r\n    // Angle\r\n    rad: {\r\n      name: 'rad',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    radian: {\r\n      name: 'radian',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\r\n    deg: {\r\n      name: 'deg',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    degree: {\r\n      name: 'degree',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\r\n    grad: {\r\n      name: 'grad',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    gradian: {\r\n      name: 'gradian',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\r\n    cycle: {\r\n      name: 'cycle',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\r\n    arcsec: {\r\n      name: 'arcsec',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\r\n    arcmin: {\r\n      name: 'arcmin',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // Electric current\r\n    A: {\r\n      name: 'A',\r\n      base: BASE_UNITS.CURRENT,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    ampere: {\r\n      name: 'ampere',\r\n      base: BASE_UNITS.CURRENT,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Temperature\r\n    // K(C) = °C + 273.15\r\n    // K(F) = (°F + 459.67) / 1.8\r\n    // K(R) = °R / 1.8\r\n    K: {\r\n      name: 'K',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    degC: {\r\n      name: 'degC',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1,\r\n      offset: 273.15\r\n    },\r\n    degF: {\r\n      name: 'degF',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1 / 1.8,\r\n      offset: 459.67\r\n    },\r\n    degR: {\r\n      name: 'degR',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1 / 1.8,\r\n      offset: 0\r\n    },\r\n    kelvin: {\r\n      name: 'kelvin',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    celsius: {\r\n      name: 'celsius',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1,\r\n      offset: 273.15\r\n    },\r\n    fahrenheit: {\r\n      name: 'fahrenheit',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1 / 1.8,\r\n      offset: 459.67\r\n    },\r\n    rankine: {\r\n      name: 'rankine',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1 / 1.8,\r\n      offset: 0\r\n    },\r\n    // amount of substance\r\n    mol: {\r\n      name: 'mol',\r\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    mole: {\r\n      name: 'mole',\r\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // luminous intensity\r\n    cd: {\r\n      name: 'cd',\r\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    candela: {\r\n      name: 'candela',\r\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // TODO: units STERADIAN\r\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\r\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\r\n    // Force\r\n    N: {\r\n      name: 'N',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    newton: {\r\n      name: 'newton',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    dyn: {\r\n      name: 'dyn',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.00001,\r\n      offset: 0\r\n    },\r\n    dyne: {\r\n      name: 'dyne',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.00001,\r\n      offset: 0\r\n    },\r\n    lbf: {\r\n      name: 'lbf',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4.4482216152605,\r\n      offset: 0\r\n    },\r\n    poundforce: {\r\n      name: 'poundforce',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4.4482216152605,\r\n      offset: 0\r\n    },\r\n    kip: {\r\n      name: 'kip',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 4448.2216,\r\n      offset: 0\r\n    },\r\n    kilogramforce: {\r\n      name: 'kilogramforce',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 9.80665,\r\n      offset: 0\r\n    },\r\n    // Energy\r\n    J: {\r\n      name: 'J',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    joule: {\r\n      name: 'joule',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    erg: {\r\n      name: 'erg',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1e-7,\r\n      offset: 0\r\n    },\r\n    Wh: {\r\n      name: 'Wh',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    BTU: {\r\n      name: 'BTU',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.BTU,\r\n      value: 1055.05585262,\r\n      offset: 0\r\n    },\r\n    eV: {\r\n      name: 'eV',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1.602176565e-19,\r\n      offset: 0\r\n    },\r\n    electronvolt: {\r\n      name: 'electronvolt',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1.602176565e-19,\r\n      offset: 0\r\n    },\r\n    // Power\r\n    W: {\r\n      name: 'W',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    watt: {\r\n      name: 'watt',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    hp: {\r\n      name: 'hp',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 745.6998715386,\r\n      offset: 0\r\n    },\r\n    // Electrical power units\r\n    VAR: {\r\n      name: 'VAR',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: Complex.I,\r\n      offset: 0\r\n    },\r\n    VA: {\r\n      name: 'VA',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Pressure\r\n    Pa: {\r\n      name: 'Pa',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    psi: {\r\n      name: 'psi',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6894.75729276459,\r\n      offset: 0\r\n    },\r\n    atm: {\r\n      name: 'atm',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 101325,\r\n      offset: 0\r\n    },\r\n    bar: {\r\n      name: 'bar',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.SHORTLONG,\r\n      value: 100000,\r\n      offset: 0\r\n    },\r\n    torr: {\r\n      name: 'torr',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 133.322,\r\n      offset: 0\r\n    },\r\n    mmHg: {\r\n      name: 'mmHg',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 133.322,\r\n      offset: 0\r\n    },\r\n    mmH2O: {\r\n      name: 'mmH2O',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 9.80665,\r\n      offset: 0\r\n    },\r\n    cmH2O: {\r\n      name: 'cmH2O',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 98.0665,\r\n      offset: 0\r\n    },\r\n    // Electric charge\r\n    coulomb: {\r\n      name: 'coulomb',\r\n      base: BASE_UNITS.ELECTRIC_CHARGE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    C: {\r\n      name: 'C',\r\n      base: BASE_UNITS.ELECTRIC_CHARGE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric capacitance\r\n    farad: {\r\n      name: 'farad',\r\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    F: {\r\n      name: 'F',\r\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric potential\r\n    volt: {\r\n      name: 'volt',\r\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    V: {\r\n      name: 'V',\r\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric resistance\r\n    ohm: {\r\n      name: 'ohm',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORTLONG,\r\n      // Both Mohm and megaohm are acceptable\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n\r\n    /*\r\n     * Unicode breaks in browsers if charset is not specified\r\n    Ω: {\r\n      name: 'Ω',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    */\r\n    // Electric inductance\r\n    henry: {\r\n      name: 'henry',\r\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    H: {\r\n      name: 'H',\r\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric conductance\r\n    siemens: {\r\n      name: 'siemens',\r\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    S: {\r\n      name: 'S',\r\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Magnetic flux\r\n    weber: {\r\n      name: 'weber',\r\n      base: BASE_UNITS.MAGNETIC_FLUX,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    Wb: {\r\n      name: 'Wb',\r\n      base: BASE_UNITS.MAGNETIC_FLUX,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Magnetic flux density\r\n    tesla: {\r\n      name: 'tesla',\r\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    T: {\r\n      name: 'T',\r\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Binary\r\n    b: {\r\n      name: 'b',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    bits: {\r\n      name: 'bits',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    B: {\r\n      name: 'B',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_SHORT,\r\n      value: 8,\r\n      offset: 0\r\n    },\r\n    bytes: {\r\n      name: 'bytes',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_LONG,\r\n      value: 8,\r\n      offset: 0\r\n    }\r\n  }; // aliases (formerly plurals)\r\n\r\n  var ALIASES = {\r\n    meters: 'meter',\r\n    inches: 'inch',\r\n    feet: 'foot',\r\n    yards: 'yard',\r\n    miles: 'mile',\r\n    links: 'link',\r\n    rods: 'rod',\r\n    chains: 'chain',\r\n    angstroms: 'angstrom',\r\n    lt: 'l',\r\n    litres: 'litre',\r\n    liter: 'litre',\r\n    liters: 'litre',\r\n    teaspoons: 'teaspoon',\r\n    tablespoons: 'tablespoon',\r\n    minims: 'minim',\r\n    fluiddrams: 'fluiddram',\r\n    fluidounces: 'fluidounce',\r\n    gills: 'gill',\r\n    cups: 'cup',\r\n    pints: 'pint',\r\n    quarts: 'quart',\r\n    gallons: 'gallon',\r\n    beerbarrels: 'beerbarrel',\r\n    oilbarrels: 'oilbarrel',\r\n    hogsheads: 'hogshead',\r\n    gtts: 'gtt',\r\n    grams: 'gram',\r\n    tons: 'ton',\r\n    tonnes: 'tonne',\r\n    grains: 'grain',\r\n    drams: 'dram',\r\n    ounces: 'ounce',\r\n    poundmasses: 'poundmass',\r\n    hundredweights: 'hundredweight',\r\n    sticks: 'stick',\r\n    lb: 'lbm',\r\n    lbs: 'lbm',\r\n    kips: 'kip',\r\n    kgf: 'kilogramforce',\r\n    acres: 'acre',\r\n    hectares: 'hectare',\r\n    sqfeet: 'sqft',\r\n    sqyard: 'sqyd',\r\n    sqmile: 'sqmi',\r\n    sqmiles: 'sqmi',\r\n    mmhg: 'mmHg',\r\n    mmh2o: 'mmH2O',\r\n    cmh2o: 'cmH2O',\r\n    seconds: 'second',\r\n    secs: 'second',\r\n    minutes: 'minute',\r\n    mins: 'minute',\r\n    hours: 'hour',\r\n    hr: 'hour',\r\n    hrs: 'hour',\r\n    days: 'day',\r\n    weeks: 'week',\r\n    months: 'month',\r\n    years: 'year',\r\n    decades: 'decade',\r\n    centuries: 'century',\r\n    millennia: 'millennium',\r\n    hertz: 'hertz',\r\n    radians: 'radian',\r\n    degrees: 'degree',\r\n    gradians: 'gradian',\r\n    cycles: 'cycle',\r\n    arcsecond: 'arcsec',\r\n    arcseconds: 'arcsec',\r\n    arcminute: 'arcmin',\r\n    arcminutes: 'arcmin',\r\n    BTUs: 'BTU',\r\n    watts: 'watt',\r\n    joules: 'joule',\r\n    amperes: 'ampere',\r\n    coulombs: 'coulomb',\r\n    volts: 'volt',\r\n    ohms: 'ohm',\r\n    farads: 'farad',\r\n    webers: 'weber',\r\n    teslas: 'tesla',\r\n    electronvolts: 'electronvolt',\r\n    moles: 'mole',\r\n    bit: 'bits',\r\n    byte: 'bytes'\r\n  };\r\n  /**\r\n   * Calculate the values for the angle units.\r\n   * Value is calculated as number or BigNumber depending on the configuration\r\n   * @param {{number: 'number' | 'BigNumber'}} config\r\n   */\r\n\r\n  function calculateAngleValues(config) {\r\n    if (config.number === 'BigNumber') {\r\n      var pi = createPi(_BigNumber);\r\n      UNITS.rad.value = new _BigNumber(1);\r\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\r\n\r\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\r\n\r\n      UNITS.cycle.value = pi.times(2); // 2 * pi\r\n\r\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\r\n\r\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\r\n    } else {\r\n      // number\r\n      UNITS.rad.value = 1;\r\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\r\n\r\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\r\n\r\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\r\n\r\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\r\n\r\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\r\n    } // copy to the full names of the angles\r\n\r\n\r\n    UNITS.radian.value = UNITS.rad.value;\r\n    UNITS.degree.value = UNITS.deg.value;\r\n    UNITS.gradian.value = UNITS.grad.value;\r\n  } // apply the angle values now\r\n\r\n\r\n  calculateAngleValues(config);\r\n\r\n  if (on) {\r\n    // recalculate the values on change of configuration\r\n    on('config', function (curr, prev) {\r\n      if (curr.number !== prev.number) {\r\n        calculateAngleValues(curr);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\r\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\r\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\r\n   */\r\n\r\n\r\n  var UNIT_SYSTEMS = {\r\n    si: {\r\n      // Base units\r\n      NONE: {\r\n        unit: UNIT_NONE,\r\n        prefix: PREFIXES.NONE['']\r\n      },\r\n      LENGTH: {\r\n        unit: UNITS.m,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MASS: {\r\n        unit: UNITS.g,\r\n        prefix: PREFIXES.SHORT.k\r\n      },\r\n      TIME: {\r\n        unit: UNITS.s,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      CURRENT: {\r\n        unit: UNITS.A,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      TEMPERATURE: {\r\n        unit: UNITS.K,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      LUMINOUS_INTENSITY: {\r\n        unit: UNITS.cd,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      AMOUNT_OF_SUBSTANCE: {\r\n        unit: UNITS.mol,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ANGLE: {\r\n        unit: UNITS.rad,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      BIT: {\r\n        unit: UNITS.bits,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      // Derived units\r\n      FORCE: {\r\n        unit: UNITS.N,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ENERGY: {\r\n        unit: UNITS.J,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      POWER: {\r\n        unit: UNITS.W,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      PRESSURE: {\r\n        unit: UNITS.Pa,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CHARGE: {\r\n        unit: UNITS.C,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CAPACITANCE: {\r\n        unit: UNITS.F,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_POTENTIAL: {\r\n        unit: UNITS.V,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_RESISTANCE: {\r\n        unit: UNITS.ohm,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_INDUCTANCE: {\r\n        unit: UNITS.H,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CONDUCTANCE: {\r\n        unit: UNITS.S,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MAGNETIC_FLUX: {\r\n        unit: UNITS.Wb,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MAGNETIC_FLUX_DENSITY: {\r\n        unit: UNITS.T,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      FREQUENCY: {\r\n        unit: UNITS.Hz,\r\n        prefix: PREFIXES.SHORT['']\r\n      }\r\n    }\r\n  }; // Clone to create the other unit systems\r\n\r\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\r\n  UNIT_SYSTEMS.cgs.LENGTH = {\r\n    unit: UNITS.m,\r\n    prefix: PREFIXES.SHORT.c\r\n  };\r\n  UNIT_SYSTEMS.cgs.MASS = {\r\n    unit: UNITS.g,\r\n    prefix: PREFIXES.SHORT['']\r\n  };\r\n  UNIT_SYSTEMS.cgs.FORCE = {\r\n    unit: UNITS.dyn,\r\n    prefix: PREFIXES.SHORT['']\r\n  };\r\n  UNIT_SYSTEMS.cgs.ENERGY = {\r\n    unit: UNITS.erg,\r\n    prefix: PREFIXES.NONE['']\r\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\r\n  // so let's not worry about it unless somebody complains\r\n\r\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\r\n  UNIT_SYSTEMS.us.LENGTH = {\r\n    unit: UNITS.ft,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.MASS = {\r\n    unit: UNITS.lbm,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.TEMPERATURE = {\r\n    unit: UNITS.degF,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.FORCE = {\r\n    unit: UNITS.lbf,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.ENERGY = {\r\n    unit: UNITS.BTU,\r\n    prefix: PREFIXES.BTU['']\r\n  };\r\n  UNIT_SYSTEMS.us.POWER = {\r\n    unit: UNITS.hp,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.PRESSURE = {\r\n    unit: UNITS.psi,\r\n    prefix: PREFIXES.NONE['']\r\n  }; // Add additional unit systems here.\r\n  // Choose a unit system to seed the auto unit system.\r\n\r\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\r\n\r\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\r\n  /**\r\n   * Set a unit system for formatting derived units.\r\n   * @param {string} [name] The name of the unit system.\r\n   */\r\n\r\n  Unit.setUnitSystem = function (name) {\r\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\r\n      currentUnitSystem = UNIT_SYSTEMS[name];\r\n    } else {\r\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\r\n    }\r\n  };\r\n  /**\r\n   * Return the current unit system.\r\n   * @return {string} The current unit system.\r\n   */\r\n\r\n\r\n  Unit.getUnitSystem = function () {\r\n    for (var _key in UNIT_SYSTEMS) {\r\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\r\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\r\n          return _key;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Converters to convert from number to an other numeric type like BigNumber\r\n   * or Fraction\r\n   */\r\n\r\n\r\n  Unit.typeConverters = {\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new _Fraction(x);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x;\r\n    },\r\n    number: function number(x) {\r\n      return x;\r\n    }\r\n  };\r\n  /**\r\n   * Retrieve the right convertor function corresponding with the type\r\n   * of provided exampleValue.\r\n   *\r\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\r\n   *                        In case of an unknown type,\r\n   * @return {Function}\r\n   */\r\n\r\n  Unit._getNumberConverter = function (type) {\r\n    if (!Unit.typeConverters[type]) {\r\n      throw new TypeError('Unsupported type \"' + type + '\"');\r\n    }\r\n\r\n    return Unit.typeConverters[type];\r\n  }; // Add dimensions to each built-in unit\r\n\r\n\r\n  for (var _key2 in UNITS) {\r\n    if (hasOwnProperty(UNITS, _key2)) {\r\n      var unit = UNITS[_key2];\r\n      unit.dimensions = unit.base.dimensions;\r\n    }\r\n  } // Create aliases\r\n\r\n\r\n  for (var _name2 in ALIASES) {\r\n    if (hasOwnProperty(ALIASES, _name2)) {\r\n      var _unit2 = UNITS[ALIASES[_name2]];\r\n      var alias = {};\r\n\r\n      for (var _key3 in _unit2) {\r\n        if (hasOwnProperty(_unit2, _key3)) {\r\n          alias[_key3] = _unit2[_key3];\r\n        }\r\n      }\r\n\r\n      alias.name = _name2;\r\n      UNITS[_name2] = alias;\r\n    }\r\n  }\r\n  /**\r\n   * Checks if a character is a valid latin letter (upper or lower case).\r\n   * Note that this function can be overridden, for example to allow support of other alphabets.\r\n   * @param {string} c Tested character\r\n   */\r\n\r\n\r\n  Unit.isValidAlpha = function isValidAlpha(c) {\r\n    return /^[a-zA-Z]$/.test(c);\r\n  };\r\n\r\n  function assertUnitNameIsValid(name) {\r\n    for (var i = 0; i < name.length; i++) {\r\n      c = name.charAt(i);\r\n\r\n      if (i === 0 && !Unit.isValidAlpha(c)) {\r\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\r\n      }\r\n\r\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\r\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Wrapper around createUnitSingle.\r\n   * Example:\r\n   *  createUnit({\r\n   *    foo: { },\r\n   *    bar: {\r\n   *      definition: 'kg/foo',\r\n   *      aliases: ['ba', 'barr', 'bars'],\r\n   *      offset: 200\r\n   *    },\r\n   *    baz: '4 bar'\r\n   *  },\r\n   *  {\r\n   *    override: true\r\n   *  })\r\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\r\n   * @param {object} options\r\n   */\r\n\r\n\r\n  Unit.createUnit = function (obj, options) {\r\n    if (typeof obj !== 'object') {\r\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\r\n    } // Remove all units and aliases we are overriding\r\n\r\n\r\n    if (options && options.override) {\r\n      for (var _key4 in obj) {\r\n        if (hasOwnProperty(obj, _key4)) {\r\n          Unit.deleteUnit(_key4);\r\n        }\r\n\r\n        if (obj[_key4].aliases) {\r\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\r\n            Unit.deleteUnit(obj[_key4].aliases[i]);\r\n          }\r\n        }\r\n      }\r\n    } // TODO: traverse multiple times until all units have been added\r\n\r\n\r\n    var lastUnit;\r\n\r\n    for (var _key5 in obj) {\r\n      if (hasOwnProperty(obj, _key5)) {\r\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\r\n      }\r\n    }\r\n\r\n    return lastUnit;\r\n  };\r\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   * Example:\r\n   *  createUnitSingle('knot', '0.514444444 m/s')\r\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\r\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\r\n   * or an Object. If an Object, may have the following properties:\r\n   *   - definition {string|Unit} The definition of this unit.\r\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\r\n   *     The default is \"none\".\r\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\r\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\r\n   *     is 459.67. Default is 0.\r\n   *   - baseName {string} If the unit's dimension does not match that of any other\r\n   *     base unit, the name of the newly create base unit. Otherwise, this property\r\n   *     has no effect.\r\n   *\r\n   * @param {Object} options   (optional) An object containing any of the following\r\n   * properties:\r\n   *   - override {boolean} Whether this unit should be allowed to override existing\r\n   *     units.\r\n   *\r\n   * @return {Unit}\r\n   */\r\n\r\n\r\n  Unit.createUnitSingle = function (name, obj, options) {\r\n    if (typeof obj === 'undefined' || obj === null) {\r\n      obj = {};\r\n    }\r\n\r\n    if (typeof name !== 'string') {\r\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\r\n    } // Check collisions with existing units\r\n\r\n\r\n    if (hasOwnProperty(UNITS, name)) {\r\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\r\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\r\n\r\n\r\n    assertUnitNameIsValid(name);\r\n    var defUnit = null; // The Unit from which the new unit will be created.\r\n\r\n    var aliases = [];\r\n    var offset = 0;\r\n    var definition;\r\n    var prefixes;\r\n    var baseName;\r\n\r\n    if (obj && obj.type === 'Unit') {\r\n      defUnit = obj.clone();\r\n    } else if (typeof obj === 'string') {\r\n      if (obj !== '') {\r\n        definition = obj;\r\n      }\r\n    } else if (typeof obj === 'object') {\r\n      definition = obj.definition;\r\n      prefixes = obj.prefixes;\r\n      offset = obj.offset;\r\n      baseName = obj.baseName;\r\n\r\n      if (obj.aliases) {\r\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\r\n      }\r\n    } else {\r\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\r\n    }\r\n\r\n    if (aliases) {\r\n      for (var i = 0; i < aliases.length; i++) {\r\n        if (hasOwnProperty(UNITS, aliases[i])) {\r\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\r\n        }\r\n      }\r\n    }\r\n\r\n    if (definition && typeof definition === 'string' && !defUnit) {\r\n      try {\r\n        defUnit = Unit.parse(definition, {\r\n          allowNoUnits: true\r\n        });\r\n      } catch (ex) {\r\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\r\n        throw ex;\r\n      }\r\n    } else if (definition && definition.type === 'Unit') {\r\n      defUnit = definition.clone();\r\n    }\r\n\r\n    aliases = aliases || [];\r\n    offset = offset || 0;\r\n\r\n    if (prefixes && prefixes.toUpperCase) {\r\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\r\n    } else {\r\n      prefixes = PREFIXES.NONE;\r\n    } // If defUnit is null, it is because the user did not\r\n    // specify a defintion. So create a new base dimension.\r\n\r\n\r\n    var newUnit = {};\r\n\r\n    if (!defUnit) {\r\n      // Add a new base dimension\r\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\r\n\r\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\r\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\r\n      }\r\n\r\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\r\n\r\n      for (var b in BASE_UNITS) {\r\n        if (hasOwnProperty(BASE_UNITS, b)) {\r\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\r\n        }\r\n      } // Add the new base unit\r\n\r\n\r\n      var newBaseUnit = {\r\n        dimensions: []\r\n      };\r\n\r\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\r\n        newBaseUnit.dimensions[_i6] = 0;\r\n      }\r\n\r\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\r\n      newBaseUnit.key = baseName;\r\n      BASE_UNITS[baseName] = newBaseUnit;\r\n      newUnit = {\r\n        name,\r\n        value: 1,\r\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\r\n        prefixes,\r\n        offset,\r\n        base: BASE_UNITS[baseName]\r\n      };\r\n      currentUnitSystem[baseName] = {\r\n        unit: newUnit,\r\n        prefix: PREFIXES.NONE['']\r\n      };\r\n    } else {\r\n      newUnit = {\r\n        name,\r\n        value: defUnit.value,\r\n        dimensions: defUnit.dimensions.slice(0),\r\n        prefixes,\r\n        offset\r\n      }; // Create a new base if no matching base exists\r\n\r\n      var anyMatch = false;\r\n\r\n      for (var _i7 in BASE_UNITS) {\r\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\r\n          var match = true;\r\n\r\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\r\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\r\n              match = false;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (match) {\r\n            anyMatch = true;\r\n            newUnit.base = BASE_UNITS[_i7];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!anyMatch) {\r\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\r\n        // Add the new base unit\r\n\r\n        var _newBaseUnit = {\r\n          dimensions: defUnit.dimensions.slice(0)\r\n        };\r\n        _newBaseUnit.key = baseName;\r\n        BASE_UNITS[baseName] = _newBaseUnit;\r\n        currentUnitSystem[baseName] = {\r\n          unit: newUnit,\r\n          prefix: PREFIXES.NONE['']\r\n        };\r\n        newUnit.base = BASE_UNITS[baseName];\r\n      }\r\n    }\r\n\r\n    Unit.UNITS[name] = newUnit;\r\n\r\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\r\n      var aliasName = aliases[_i8];\r\n      var _alias = {};\r\n\r\n      for (var _key6 in newUnit) {\r\n        if (hasOwnProperty(newUnit, _key6)) {\r\n          _alias[_key6] = newUnit[_key6];\r\n        }\r\n      }\r\n\r\n      _alias.name = aliasName;\r\n      Unit.UNITS[aliasName] = _alias;\r\n    } // delete the memoization cache, since adding a new unit to the array\r\n    // invalidates all old results\r\n\r\n\r\n    delete _findUnit.cache;\r\n    return new Unit(null, name);\r\n  };\r\n\r\n  Unit.deleteUnit = function (name) {\r\n    delete Unit.UNITS[name];\r\n  }; // expose arrays with prefixes, dimensions, units, systems\r\n\r\n\r\n  Unit.PREFIXES = PREFIXES;\r\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\r\n  Unit.BASE_UNITS = BASE_UNITS;\r\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\r\n  Unit.UNITS = UNITS;\r\n  return Unit;\r\n}, {\r\n  isClass: true\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}