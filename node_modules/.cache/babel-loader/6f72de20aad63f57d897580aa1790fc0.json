{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Test whether a value is an integer number.\r\n   * The function supports `number`, `BigNumber`, and `Fraction`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isInteger(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isInteger(2)                     // returns true\r\n   *    math.isInteger(0)                     // returns true\r\n   *    math.isInteger(0.5)                   // returns false\r\n   *    math.isInteger(math.bignumber(500))   // returns true\r\n   *    math.isInteger(math.fraction(4))      // returns true\r\n   *    math.isInteger('3')                   // returns true\r\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\r\n   *    math.isInteger(math.complex('2-4i')   // throws an error\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isZero\r\n   *\r\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\r\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","isInteger","isIntegerNumber","factory","name","dependencies","createIsInteger","_ref","typed","number","BigNumber","x","isInt","Fraction","d","isFinite","n","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/utils/isInteger.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'isInteger';\r\nvar dependencies = ['typed'];\r\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test whether a value is an integer number.\r\n   * The function supports `number`, `BigNumber`, and `Fraction`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isInteger(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isInteger(2)                     // returns true\r\n   *    math.isInteger(0)                     // returns true\r\n   *    math.isInteger(0.5)                   // returns false\r\n   *    math.isInteger(math.bignumber(500))   // returns true\r\n   *    math.isInteger(math.fraction(4))      // returns true\r\n   *    math.isInteger('3')                   // returns true\r\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\r\n   *    math.isInteger(math.complex('2-4i')   // throws an error\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isZero\r\n   *\r\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\r\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isIntegerNumber,\r\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isInt();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.d === 1 && isFinite(x.n);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,uBAA7C;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC9E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBK,MAAM,EAAEP,eADS;IAEjB;IACAQ,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;MAC/B,OAAOA,CAAC,CAACC,KAAF,EAAP;IACD,CALgB;IAMjBC,QAAQ,EAAE,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;MAC7B,OAAOA,CAAC,CAACG,CAAF,KAAQ,CAAR,IAAaC,QAAQ,CAACJ,CAAC,CAACK,CAAH,CAA5B;IACD,CARgB;IASjB,kBAAkB,SAASC,WAAT,CAAqBN,CAArB,EAAwB;MACxC,OAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;IACD;EAXgB,CAAP,CAAZ;AAaD,CA/CkD,CAA5C"},"metadata":{},"sourceType":"module"}