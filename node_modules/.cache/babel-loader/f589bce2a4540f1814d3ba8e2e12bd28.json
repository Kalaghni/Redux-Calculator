{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n  /**\r\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acot(0.5)           // returns number 0.4636476090008061\r\n   *    math.acot(math.cot(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cot, atan\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x   Function input\r\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\r\n   */\n\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","acotNumber","name","dependencies","createAcot","_ref","typed","_BigNumber","BigNumber","number","Complex","x","acot","div","atan","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/trigonometry/acot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { acotNumber } from '../../plain/number/index.js';\r\nvar name = 'acot';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acot(0.5)           // returns number 0.4636476090008061\r\n   *    math.acot(math.cot(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cot, atan\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x   Function input\r\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\r\n   */\r\n  return typed(name, {\r\n    number: acotNumber,\r\n    Complex: function Complex(x) {\r\n      return x.acot();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(1).div(x).atan();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEaC,UAFb,GAGIF,IAHJ,CAEEG,SAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjBO,MAAM,EAAER,UADS;IAEjBS,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACC,IAAF,EAAP;IACD,CAJgB;IAKjBJ,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;MAC/B,OAAO,IAAIJ,UAAJ,CAAe,CAAf,EAAkBM,GAAlB,CAAsBF,CAAtB,EAAyBG,IAAzB,EAAP;IACD,CAPgB;IAQjB,kBAAkB,SAASC,WAAT,CAAqBJ,CAArB,EAAwB;MACxC,OAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;IACD;EAVgB,CAAP,CAAZ;AAYD,CAzC6C,CAAvC"},"metadata":{},"sourceType":"module"}