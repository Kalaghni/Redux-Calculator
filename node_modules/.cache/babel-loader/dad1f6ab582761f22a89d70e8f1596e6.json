{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      numeric = _ref.numeric;\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\n\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\n\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n});","map":{"version":3,"names":["deepForEach","factory","improveErrorMessage","name","dependencies","createProd","_ref","typed","config","multiplyScalar","numeric","_prod","ArrayMatrixNumberBigNumber","array","dim","Error","_","args","prod","value","undefined","err","number"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/prod.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'prod';\r\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\r\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    multiplyScalar,\r\n    numeric\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\r\n  return typed(name, {\r\n    // prod([a, b, c, d, ...])\r\n    'Array | Matrix': _prod,\r\n    // prod([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\r\n      // TODO: implement prod(A, dim)\r\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\r\n    },\r\n    // prod(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _prod(args);\r\n    }\r\n  });\r\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\r\n\r\n  function _prod(array) {\r\n    var prod;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'prod', value);\r\n      }\r\n    }); // make sure returning numeric value: parse a string into a numeric value\r\n\r\n    if (typeof prod === 'string') {\r\n      prod = numeric(prod, config.number);\r\n    }\r\n\r\n    if (prod === undefined) {\r\n      throw new Error('Cannot calculate prod of an empty array');\r\n    }\r\n\r\n    return prod;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,gBAApB,EAAsC,SAAtC,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,cAHF,GAKIH,IALJ,CAGEG,cAHF;EAAA,IAIEC,OAJF,GAKIJ,IALJ,CAIEI,OAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBQ,KAFD;IAGjB;IACA,sCAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;MACpF;MACA,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN,CAFoF,CAE9B;IACvD,CAPgB;IAQjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,OAAON,KAAK,CAACM,IAAD,CAAZ;IACD;EAXgB,CAAP,CAAZ;EAaA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASN,KAAT,CAAeE,KAAf,EAAsB;IACpB,IAAIK,IAAJ;IACAlB,WAAW,CAACa,KAAD,EAAQ,UAAUM,KAAV,EAAiB;MAClC,IAAI;QACFD,IAAI,GAAGA,IAAI,KAAKE,SAAT,GAAqBD,KAArB,GAA6BV,cAAc,CAACS,IAAD,EAAOC,KAAP,CAAlD;MACD,CAFD,CAEE,OAAOE,GAAP,EAAY;QACZ,MAAMnB,mBAAmB,CAACmB,GAAD,EAAM,MAAN,EAAcF,KAAd,CAAzB;MACD;IACF,CANU,CAAX,CAFoB,CAQhB;;IAEJ,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;MAC5BA,IAAI,GAAGR,OAAO,CAACQ,IAAD,EAAOV,MAAM,CAACc,MAAd,CAAd;IACD;;IAED,IAAIJ,IAAI,KAAKE,SAAb,EAAwB;MACtB,MAAM,IAAIL,KAAJ,CAAU,yCAAV,CAAN;IACD;;IAED,OAAOG,IAAP;EACD;AACF,CAzE6C,CAAvC"},"metadata":{},"sourceType":"module"}