{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Create a new matrix or array with the results of a callback function executed on\r\n   * each entry of a given matrix/array.\r\n   *\r\n   * For each entry of the input, the callback is invoked with three arguments:\r\n   * the value of the entry, the index at which that entry occurs, and the full\r\n   * matrix/array being traversed. Note that because the matrix/array might be\r\n   * multidimensional, the \"index\" argument is always an array of numbers giving\r\n   * the index in each dimension. This is true even for vectors: the \"index\"\r\n   * argument is an array of length 1, rather than simply a number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.map(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.map([1, 2, 3], function(value) {\r\n   *      return value * value\r\n   *    })  // returns [1, 4, 9]\r\n   *\r\n   *    // The calling convention for the callback can cause subtleties:\r\n   *    math.map([1, 2, 3], math.format)\r\n   *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean\r\n   *    // [This happens because `format` _can_ take a second argument,\r\n   *    // but its semantics don't match that of the 2nd argument `map` provides]\r\n   *\r\n   *    // To avoid this error, use a function that takes exactly the\r\n   *    // desired arguments:\r\n   *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, sort\r\n   *\r\n   * @param {Matrix | Array} x    The input to iterate on.\r\n   * @param {Function} callback\r\n   *     The function to call (as described above) on each entry of the input\r\n   * @return {Matrix | array}\r\n   *     Transformed map of x; always has the same type and shape as x\r\n   */\n\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\r\n * Map for a multi dimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @return {Array}\r\n * @private\r\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      try {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, array);\n        }\n      } catch (err) {\n        // But maybe the arguments still weren't right\n        if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {\n          var newmsg = \"map attempted to call '\".concat(err.data.fn, \"(\").concat(value);\n          var indexString = JSON.stringify(index);\n\n          if (args === 2) {\n            newmsg += ',' + indexString;\n          } else if (args !== 1) {\n            newmsg += \",\".concat(indexString, \",\").concat(array);\n          }\n\n          newmsg += \")' but argument \".concat(err.data.index + 1, \" of type \");\n          newmsg += \"\".concat(err.data.actual, \" does not match expected type \");\n          newmsg += err.data.expected.join(' or ');\n          throw new TypeError(newmsg);\n        }\n\n        throw err;\n      }\n    }\n  };\n\n  return recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","factory","name","dependencies","createMap","_ref","typed","_map","MatrixFunction","x","callback","map","array","args","recurse","value","index","Array","isArray","child","i","concat","err","TypeError","data","category","newmsg","fn","indexString","JSON","stringify","actual","expected","join"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/matrix/map.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'map';\r\nvar dependencies = ['typed'];\r\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a new matrix or array with the results of a callback function executed on\r\n   * each entry of a given matrix/array.\r\n   *\r\n   * For each entry of the input, the callback is invoked with three arguments:\r\n   * the value of the entry, the index at which that entry occurs, and the full\r\n   * matrix/array being traversed. Note that because the matrix/array might be\r\n   * multidimensional, the \"index\" argument is always an array of numbers giving\r\n   * the index in each dimension. This is true even for vectors: the \"index\"\r\n   * argument is an array of length 1, rather than simply a number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.map(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.map([1, 2, 3], function(value) {\r\n   *      return value * value\r\n   *    })  // returns [1, 4, 9]\r\n   *\r\n   *    // The calling convention for the callback can cause subtleties:\r\n   *    math.map([1, 2, 3], math.format)\r\n   *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean\r\n   *    // [This happens because `format` _can_ take a second argument,\r\n   *    // but its semantics don't match that of the 2nd argument `map` provides]\r\n   *\r\n   *    // To avoid this error, use a function that takes exactly the\r\n   *    // desired arguments:\r\n   *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, sort\r\n   *\r\n   * @param {Matrix | Array} x    The input to iterate on.\r\n   * @param {Function} callback\r\n   *     The function to call (as described above) on each entry of the input\r\n   * @return {Matrix | array}\r\n   *     Transformed map of x; always has the same type and shape as x\r\n   */\r\n  return typed(name, {\r\n    'Array, function': _map,\r\n    'Matrix, function': function MatrixFunction(x, callback) {\r\n      return x.map(callback);\r\n    }\r\n  });\r\n});\r\n/**\r\n * Map for a multi dimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @return {Array}\r\n * @private\r\n */\r\n\r\nfunction _map(array, callback) {\r\n  // figure out what number of arguments the callback function expects\r\n  var args = maxArgumentCount(callback);\r\n\r\n  var recurse = function recurse(value, index) {\r\n    if (Array.isArray(value)) {\r\n      return value.map(function (child, i) {\r\n        // we create a copy of the index array and append the new index value\r\n        return recurse(child, index.concat(i));\r\n      });\r\n    } else {\r\n      try {\r\n        // invoke the callback function with the right number of arguments\r\n        if (args === 1) {\r\n          return callback(value);\r\n        } else if (args === 2) {\r\n          return callback(value, index);\r\n        } else {\r\n          // 3 or -1\r\n          return callback(value, index, array);\r\n        }\r\n      } catch (err) {\r\n        // But maybe the arguments still weren't right\r\n        if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {\r\n          var newmsg = \"map attempted to call '\".concat(err.data.fn, \"(\").concat(value);\r\n          var indexString = JSON.stringify(index);\r\n\r\n          if (args === 2) {\r\n            newmsg += ',' + indexString;\r\n          } else if (args !== 1) {\r\n            newmsg += \",\".concat(indexString, \",\").concat(array);\r\n          }\r\n\r\n          newmsg += \")' but argument \".concat(err.data.index + 1, \" of type \");\r\n          newmsg += \"\".concat(err.data.actual, \" does not match expected type \");\r\n          newmsg += err.data.expected.join(' or ');\r\n          throw new TypeError(newmsg);\r\n        }\r\n\r\n        throw err;\r\n      }\r\n    }\r\n  };\r\n\r\n  return recurse(array, []);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}