{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger;\n  /**\r\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\r\n   * catalan only takes integer arguments.\r\n   * The following condition must be enforced: n >= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.catalan(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.catalan(3) // returns 5\r\n   *    math.catalan(8) // returns 1430\r\n   *\r\n   * See also:\r\n   *\r\n   *    bellNumbers\r\n   *\r\n   * @param {Number | BigNumber} n    nth Catalan number\r\n   * @return {Number | BigNumber}     Cn(n)\r\n   */\n\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createCatalan","_ref","typed","addScalar","divideScalar","multiplyScalar","combinations","isNegative","isInteger","numberBigNumber","n","TypeError"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/combinatorics/catalan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'catalan';\r\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\r\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    addScalar,\r\n    divideScalar,\r\n    multiplyScalar,\r\n    combinations,\r\n    isNegative,\r\n    isInteger\r\n  } = _ref;\r\n\r\n  /**\r\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\r\n   * catalan only takes integer arguments.\r\n   * The following condition must be enforced: n >= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.catalan(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.catalan(3) // returns 5\r\n   *    math.catalan(8) // returns 1430\r\n   *\r\n   * See also:\r\n   *\r\n   *    bellNumbers\r\n   *\r\n   * @param {Number | BigNumber} n    nth Catalan number\r\n   * @return {Number | BigNumber}     Cn(n)\r\n   */\r\n  return typed(name, {\r\n    'number | BigNumber': function numberBigNumber(n) {\r\n      if (!isInteger(n) || isNegative(n)) {\r\n        throw new TypeError('Non-negative integer value expected in function catalan');\r\n      }\r\n\r\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,cAAvB,EAAuC,gBAAvC,EAAyD,cAAzD,EAAyE,YAAzE,EAAuF,WAAvF,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAQID,IARJ,CACEC,KADF;EAAA,IAEEC,SAFF,GAQIF,IARJ,CAEEE,SAFF;EAAA,IAGEC,YAHF,GAQIH,IARJ,CAGEG,YAHF;EAAA,IAIEC,cAJF,GAQIJ,IARJ,CAIEI,cAJF;EAAA,IAKEC,YALF,GAQIL,IARJ,CAKEK,YALF;EAAA,IAMEC,UANF,GAQIN,IARJ,CAMEM,UANF;EAAA,IAOEC,SAPF,GAQIP,IARJ,CAOEO,SAPF;EAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAON,KAAK,CAACJ,IAAD,EAAO;IACjB,sBAAsB,SAASW,eAAT,CAAyBC,CAAzB,EAA4B;MAChD,IAAI,CAACF,SAAS,CAACE,CAAD,CAAV,IAAiBH,UAAU,CAACG,CAAD,CAA/B,EAAoC;QAClC,MAAM,IAAIC,SAAJ,CAAc,yDAAd,CAAN;MACD;;MAED,OAAOP,YAAY,CAACE,YAAY,CAACD,cAAc,CAACK,CAAD,EAAI,CAAJ,CAAf,EAAuBA,CAAvB,CAAb,EAAwCP,SAAS,CAACO,CAAD,EAAI,CAAJ,CAAjD,CAAnB;IACD;EAPgB,CAAP,CAAZ;AASD,CAzCgD,CAA1C"},"metadata":{},"sourceType":"module"}