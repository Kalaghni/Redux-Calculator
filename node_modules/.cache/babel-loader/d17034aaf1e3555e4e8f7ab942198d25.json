{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      numeric = _ref.numeric;\n  /**\r\n   * Compute the sum of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.sum(a, b, c, ...)\r\n   *     math.sum(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sum(2, 1, 4, 3)               // returns 10\r\n   *     math.sum([2, 1, 4, 3])             // returns 10\r\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, prod, std, variance, cumsum\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The sum of all values\r\n   */\n\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\r\n   * Recursively calculate the sum of an n-dimensional array\r\n   * @param {Array | Matrix} array\r\n   * @return {number} sum\r\n   * @private\r\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","name","dependencies","createSum","_ref","typed","config","add","numeric","_sum","_nsumDim","_","args","TypeError","array","sum","value","undefined","err","number","dim"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/sum.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'sum';\r\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\r\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    add,\r\n    numeric\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the sum of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.sum(a, b, c, ...)\r\n   *     math.sum(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sum(2, 1, 4, 3)               // returns 10\r\n   *     math.sum([2, 1, 4, 3])             // returns 10\r\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, prod, std, variance, cumsum\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The sum of all values\r\n   */\r\n  return typed(name, {\r\n    // sum([a, b, c, d, ...])\r\n    'Array | Matrix': _sum,\r\n    // sum([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': _nsumDim,\r\n    // sum(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function sum');\r\n      }\r\n\r\n      return _sum(args);\r\n    }\r\n  });\r\n  /**\r\n   * Recursively calculate the sum of an n-dimensional array\r\n   * @param {Array | Matrix} array\r\n   * @return {number} sum\r\n   * @private\r\n   */\r\n\r\n  function _sum(array) {\r\n    var sum;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        sum = sum === undefined ? value : add(sum, value);\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'sum', value);\r\n      }\r\n    }); // make sure returning numeric value: parse a string into a numeric value\r\n\r\n    if (sum === undefined) {\r\n      sum = numeric(0, config.number);\r\n    }\r\n\r\n    if (typeof sum === 'string') {\r\n      sum = numeric(sum, config.number);\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  function _nsumDim(array, dim) {\r\n    try {\r\n      var sum = reduce(array, dim, add);\r\n      return sum;\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'sum');\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,2BAAzD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,SAA3B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,GAHF,GAKIH,IALJ,CAGEG,GAHF;EAAA,IAIEC,OAJF,GAKIJ,IALJ,CAIEI,OAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBQ,IAFD;IAGjB;IACA,sCAAsCC,QAJrB;IAKjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,IAAIhB,mBAAmB,CAACgB,IAAD,CAAvB,EAA+B;QAC7B,MAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;MACD;;MAED,OAAOJ,IAAI,CAACG,IAAD,CAAX;IACD;EAZgB,CAAP,CAAZ;EAcA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASH,IAAT,CAAcK,KAAd,EAAqB;IACnB,IAAIC,GAAJ;IACAlB,WAAW,CAACiB,KAAD,EAAQ,UAAUE,KAAV,EAAiB;MAClC,IAAI;QACFD,GAAG,GAAGA,GAAG,KAAKE,SAAR,GAAoBD,KAApB,GAA4BT,GAAG,CAACQ,GAAD,EAAMC,KAAN,CAArC;MACD,CAFD,CAEE,OAAOE,GAAP,EAAY;QACZ,MAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,EAAaF,KAAb,CAAzB;MACD;IACF,CANU,CAAX,CAFmB,CAQf;;IAEJ,IAAID,GAAG,KAAKE,SAAZ,EAAuB;MACrBF,GAAG,GAAGP,OAAO,CAAC,CAAD,EAAIF,MAAM,CAACa,MAAX,CAAb;IACD;;IAED,IAAI,OAAOJ,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGP,OAAO,CAACO,GAAD,EAAMT,MAAM,CAACa,MAAb,CAAb;IACD;;IAED,OAAOJ,GAAP;EACD;;EAED,SAASL,QAAT,CAAkBI,KAAlB,EAAyBM,GAAzB,EAA8B;IAC5B,IAAI;MACF,IAAIL,GAAG,GAAGjB,MAAM,CAACgB,KAAD,EAAQM,GAAR,EAAab,GAAb,CAAhB;MACA,OAAOQ,GAAP;IACD,CAHD,CAGE,OAAOG,GAAP,EAAY;MACZ,MAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,CAAzB;IACD;EACF;AACF,CAjF4C,CAAtC"},"metadata":{},"sourceType":"module"}