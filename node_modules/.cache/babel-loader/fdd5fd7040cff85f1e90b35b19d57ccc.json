{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm04 = createAlgorithm04({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\n\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm10(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = this(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = this(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["factory","createAlgorithm01","createAlgorithm04","createAlgorithm10","createAlgorithm13","createAlgorithm14","gcdNumber","name","dependencies","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","_gcdBigNumber","FractionFraction","x","y","gcd","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber","a","b","args","res","i","length","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\r\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04.js';\r\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\r\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\r\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\r\nimport { gcdNumber } from '../../plain/number/index.js';\r\nvar name = 'gcd';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\r\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    BigNumber,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var algorithm01 = createAlgorithm01({\r\n    typed\r\n  });\r\n  var algorithm04 = createAlgorithm04({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm10 = createAlgorithm10({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var algorithm13 = createAlgorithm13({\r\n    typed\r\n  });\r\n  var algorithm14 = createAlgorithm14({\r\n    typed\r\n  });\r\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\r\n\r\n  return typed(name, {\r\n    'number, number': gcdNumber,\r\n    'BigNumber, BigNumber': _gcdBigNumber,\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.gcd(y);\r\n    },\r\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\r\n      return algorithm04(x, y, this);\r\n    },\r\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\r\n      return algorithm01(y, x, this, true);\r\n    },\r\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\r\n      return algorithm01(x, y, this, false);\r\n    },\r\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\r\n      return algorithm13(x, y, this);\r\n    },\r\n    'Array, Array': function ArrayArray(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), matrix(y)).valueOf();\r\n    },\r\n    'Array, Matrix': function ArrayMatrix(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), y);\r\n    },\r\n    'Matrix, Array': function MatrixArray(x, y) {\r\n      // use matrix implementation\r\n      return this(x, matrix(y));\r\n    },\r\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\r\n      return algorithm10(x, y, this, false);\r\n    },\r\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\r\n      return algorithm14(x, y, this, false);\r\n    },\r\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\r\n      return algorithm10(y, x, this, true);\r\n    },\r\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\r\n      return algorithm14(y, x, this, true);\r\n    },\r\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(x), y, this, false).valueOf();\r\n    },\r\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(y), x, this, true).valueOf();\r\n    },\r\n    // TODO: need a smarter notation here\r\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\r\n      var res = this(a, b);\r\n\r\n      for (var i = 0; i < args.length; i++) {\r\n        res = this(res, args[i]);\r\n      }\r\n\r\n      return res;\r\n    }\r\n  });\r\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\r\n\r\n  function _gcdBigNumber(a, b) {\r\n    if (!a.isInt() || !b.isInt()) {\r\n      throw new Error('Parameters in function gcd must be integer numbers');\r\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n\r\n\r\n    var zero = new BigNumber(0);\r\n\r\n    while (!b.isZero()) {\r\n      var r = a.mod(b);\r\n      a = b;\r\n      b = r;\r\n    }\r\n\r\n    return a.lt(zero) ? a.neg() : a;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,WAAnC,EAAgD,aAAhD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeT,OAAO,CAACO,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAMIF,IANJ,CAEEE,MAFF;EAAA,IAGEC,WAHF,GAMIH,IANJ,CAGEG,WAHF;EAAA,IAIEC,SAJF,GAMIJ,IANJ,CAIEI,SAJF;EAAA,IAKEC,WALF,GAMIL,IANJ,CAKEK,WALF;EAOA,IAAIC,WAAW,GAAGf,iBAAiB,CAAC;IAClCU,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA,IAAIM,WAAW,GAAGf,iBAAiB,CAAC;IAClCS,KAAK,EAALA,KADkC;IAElCE,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAIK,WAAW,GAAGf,iBAAiB,CAAC;IAClCQ,KAAK,EAALA,KADkC;IAElCI,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAII,WAAW,GAAGf,iBAAiB,CAAC;IAClCO,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA,IAAIS,WAAW,GAAGf,iBAAiB,CAAC;IAClCM,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkBD,SADD;IAEjB,wBAAwBe,aAFP;IAGjB,sBAAsB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,CAA7B,EAAgC;MACpD,OAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;IACD,CALgB;IAMjB,8BAA8B,SAASE,wBAAT,CAAkCH,CAAlC,EAAqCC,CAArC,EAAwC;MACpE,OAAOP,WAAW,CAACM,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAlB;IACD,CARgB;IASjB,6BAA6B,SAASG,uBAAT,CAAiCJ,CAAjC,EAAoCC,CAApC,EAAuC;MAClE,OAAOR,WAAW,CAACQ,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CAXgB;IAYjB,6BAA6B,SAASK,uBAAT,CAAiCL,CAAjC,EAAoCC,CAApC,EAAuC;MAClE,OAAOR,WAAW,CAACO,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CAdgB;IAejB,4BAA4B,SAASK,sBAAT,CAAgCN,CAAhC,EAAmCC,CAAnC,EAAsC;MAChE,OAAOL,WAAW,CAACI,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAlB;IACD,CAjBgB;IAkBjB,gBAAgB,SAASM,UAAT,CAAoBP,CAApB,EAAuBC,CAAvB,EAA0B;MACxC;MACA,OAAO,KAAKZ,MAAM,CAACW,CAAD,CAAX,EAAgBX,MAAM,CAACY,CAAD,CAAtB,EAA2BO,OAA3B,EAAP;IACD,CArBgB;IAsBjB,iBAAiB,SAASC,WAAT,CAAqBT,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C;MACA,OAAO,KAAKZ,MAAM,CAACW,CAAD,CAAX,EAAgBC,CAAhB,CAAP;IACD,CAzBgB;IA0BjB,iBAAiB,SAASS,WAAT,CAAqBV,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C;MACA,OAAO,KAAKD,CAAL,EAAQX,MAAM,CAACY,CAAD,CAAd,CAAP;IACD,CA7BgB;IA8BjB,oCAAoC,SAASU,2BAAT,CAAqCX,CAArC,EAAwCC,CAAxC,EAA2C;MAC7E,OAAON,WAAW,CAACK,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CAhCgB;IAiCjB,mCAAmC,SAASW,0BAAT,CAAoCZ,CAApC,EAAuCC,CAAvC,EAA0C;MAC3E,OAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CAnCgB;IAoCjB,oCAAoC,SAASY,2BAAT,CAAqCb,CAArC,EAAwCC,CAAxC,EAA2C;MAC7E,OAAON,WAAW,CAACM,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CAtCgB;IAuCjB,mCAAmC,SAASc,0BAAT,CAAoCd,CAApC,EAAuCC,CAAvC,EAA0C;MAC3E,OAAOJ,WAAW,CAACI,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CAzCgB;IA0CjB,6BAA6B,SAASe,oBAAT,CAA8Bf,CAA9B,EAAiCC,CAAjC,EAAoC;MAC/D;MACA,OAAOJ,WAAW,CAACR,MAAM,CAACW,CAAD,CAAP,EAAYC,CAAZ,EAAe,IAAf,EAAqB,KAArB,CAAX,CAAuCO,OAAvC,EAAP;IACD,CA7CgB;IA8CjB,6BAA6B,SAASQ,oBAAT,CAA8BhB,CAA9B,EAAiCC,CAAjC,EAAoC;MAC/D;MACA,OAAOJ,WAAW,CAACR,MAAM,CAACY,CAAD,CAAP,EAAYD,CAAZ,EAAe,IAAf,EAAqB,IAArB,CAAX,CAAsCQ,OAAtC,EAAP;IACD,CAjDgB;IAkDjB;IACA,oHAAoH,SAASS,8EAAT,CAAwFC,CAAxF,EAA2FC,CAA3F,EAA8FC,IAA9F,EAAoG;MACtN,IAAIC,GAAG,GAAG,KAAKH,CAAL,EAAQC,CAAR,CAAV;;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;QACpCD,GAAG,GAAG,KAAKA,GAAL,EAAUD,IAAI,CAACE,CAAD,CAAd,CAAN;MACD;;MAED,OAAOD,GAAP;IACD;EA3DgB,CAAP,CAAZ;EA6DA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASvB,aAAT,CAAuBoB,CAAvB,EAA0BC,CAA1B,EAA6B;IAC3B,IAAI,CAACD,CAAC,CAACM,KAAF,EAAD,IAAc,CAACL,CAAC,CAACK,KAAF,EAAnB,EAA8B;MAC5B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;IACD,CAH0B,CAGzB;;;IAGF,IAAIC,IAAI,GAAG,IAAInC,SAAJ,CAAc,CAAd,CAAX;;IAEA,OAAO,CAAC4B,CAAC,CAACQ,MAAF,EAAR,EAAoB;MAClB,IAAIC,CAAC,GAAGV,CAAC,CAACW,GAAF,CAAMV,CAAN,CAAR;MACAD,CAAC,GAAGC,CAAJ;MACAA,CAAC,GAAGS,CAAJ;IACD;;IAED,OAAOV,CAAC,CAACY,EAAF,CAAKJ,IAAL,IAAaR,CAAC,CAACa,GAAF,EAAb,GAAuBb,CAA9B;EACD;AACF,CAxI4C,CAAtC"},"metadata":{},"sourceType":"module"}