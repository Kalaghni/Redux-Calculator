{"ast":null,"code":"import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n/**\r\n * Calculate gcd for numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the greatest common denominator of a and b\r\n */\n\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n/**\r\n * Calculate lcm for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the least common multiple of a and b\r\n */\n\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n/**\r\n * Calculate the logarithm of a value, optionally to a given base.\r\n * @param {number} x\r\n * @param {number | null | undefined} base\r\n * @return {number}\r\n */\n\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n\n  return Math.log(x);\n}\n/**\r\n * Calculate the 10-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n/**\r\n * Calculate the 2-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n/**\r\n * Calculate the natural logarithm of a `number+1`\r\n * @param {number} x\r\n * @returns {number}\r\n */\n\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n/**\r\n * Calculate the modulus of two numbers\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number} res\r\n * @private\r\n */\n\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n/**\r\n * Calculate the nth root of a, solve x^root == a\r\n * http://rosettacode.org/wiki/Nth_root#JavaScript\r\n * @param {number} a\r\n * @param {number} [2] root\r\n * @private\r\n */\n\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\r\n  let x = 1 // Initial guess\r\n  let xPrev = 1\r\n  let i = 0\r\n  const iMax = 10000\r\n  do {\r\n    const delta = (a / Math.pow(x, root - 1) - x) / root\r\n    xPrev = x\r\n    x = x + delta\r\n    i++\r\n  }\r\n  while (xPrev !== x && i < iMax)\r\n   if (xPrev !== x) {\r\n    throw new Error('Function nthRoot failed to converge')\r\n  }\r\n   return inv ? 1 / x : x\r\n  */\n}\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n/**\r\n * Calculate xgcd for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number} result\r\n * @private\r\n */\n\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\nxgcdNumber.signature = n2;\n/**\r\n * Calculates the power of x to y, x^y, for two numbers.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number} res\r\n */\n\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n/**\r\n * round a number to the given number of decimals, or to zero if decimals is\r\n * not provided\r\n * @param {number} value\r\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\r\n * @return {number} roundedValue\r\n */\n\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n\n  return parseFloat(toFixed(value, decimals));\n}\n/**\r\n * Calculate the norm of a number, the absolute value.\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","map":{"version":3,"names":["cbrt","expm1","isInteger","log10","log1p","log2","sign","toFixed","n1","n2","absNumber","a","Math","abs","signature","addNumber","b","subtractNumber","multiplyNumber","divideNumber","unaryMinusNumber","x","unaryPlusNumber","cbrtNumber","cubeNumber","expNumber","exp","expm1Number","gcdNumber","Error","r","lcmNumber","t","prod","logNumber","y","log","log10Number","log2Number","log1pNumber","modNumber","floor","nthRootNumber","root","arguments","length","undefined","inv","Infinity","isFinite","pow","signNumber","sqrtNumber","sqrt","squareNumber","xgcdNumber","q","lastx","lasty","res","powNumber","roundNumber","value","decimals","parseFloat","normNumber"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/plain/number/arithmetic.js"],"sourcesContent":["import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\r\nvar n1 = 'number';\r\nvar n2 = 'number, number';\r\nexport function absNumber(a) {\r\n  return Math.abs(a);\r\n}\r\nabsNumber.signature = n1;\r\nexport function addNumber(a, b) {\r\n  return a + b;\r\n}\r\naddNumber.signature = n2;\r\nexport function subtractNumber(a, b) {\r\n  return a - b;\r\n}\r\nsubtractNumber.signature = n2;\r\nexport function multiplyNumber(a, b) {\r\n  return a * b;\r\n}\r\nmultiplyNumber.signature = n2;\r\nexport function divideNumber(a, b) {\r\n  return a / b;\r\n}\r\ndivideNumber.signature = n2;\r\nexport function unaryMinusNumber(x) {\r\n  return -x;\r\n}\r\nunaryMinusNumber.signature = n1;\r\nexport function unaryPlusNumber(x) {\r\n  return x;\r\n}\r\nunaryPlusNumber.signature = n1;\r\nexport function cbrtNumber(x) {\r\n  return cbrt(x);\r\n}\r\ncbrtNumber.signature = n1;\r\nexport function cubeNumber(x) {\r\n  return x * x * x;\r\n}\r\ncubeNumber.signature = n1;\r\nexport function expNumber(x) {\r\n  return Math.exp(x);\r\n}\r\nexpNumber.signature = n1;\r\nexport function expm1Number(x) {\r\n  return expm1(x);\r\n}\r\nexpm1Number.signature = n1;\r\n/**\r\n * Calculate gcd for numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the greatest common denominator of a and b\r\n */\r\n\r\nexport function gcdNumber(a, b) {\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function gcd must be integer numbers');\r\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n\r\n\r\n  var r;\r\n\r\n  while (b !== 0) {\r\n    r = a % b;\r\n    a = b;\r\n    b = r;\r\n  }\r\n\r\n  return a < 0 ? -a : a;\r\n}\r\ngcdNumber.signature = n2;\r\n/**\r\n * Calculate lcm for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the least common multiple of a and b\r\n */\r\n\r\nexport function lcmNumber(a, b) {\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function lcm must be integer numbers');\r\n  }\r\n\r\n  if (a === 0 || b === 0) {\r\n    return 0;\r\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n  // evaluate lcm here inline to reduce overhead\r\n\r\n\r\n  var t;\r\n  var prod = a * b;\r\n\r\n  while (b !== 0) {\r\n    t = b;\r\n    b = a % t;\r\n    a = t;\r\n  }\r\n\r\n  return Math.abs(prod / a);\r\n}\r\nlcmNumber.signature = n2;\r\n/**\r\n * Calculate the logarithm of a value, optionally to a given base.\r\n * @param {number} x\r\n * @param {number | null | undefined} base\r\n * @return {number}\r\n */\r\n\r\nexport function logNumber(x, y) {\r\n  if (y) {\r\n    return Math.log(x) / Math.log(y);\r\n  }\r\n\r\n  return Math.log(x);\r\n}\r\n/**\r\n * Calculate the 10-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function log10Number(x) {\r\n  return log10(x);\r\n}\r\nlog10Number.signature = n1;\r\n/**\r\n * Calculate the 2-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function log2Number(x) {\r\n  return log2(x);\r\n}\r\nlog2Number.signature = n1;\r\n/**\r\n * Calculate the natural logarithm of a `number+1`\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\n\r\nexport function log1pNumber(x) {\r\n  return log1p(x);\r\n}\r\nlog1pNumber.signature = n1;\r\n/**\r\n * Calculate the modulus of two numbers\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number} res\r\n * @private\r\n */\r\n\r\nexport function modNumber(x, y) {\r\n  if (y > 0) {\r\n    // We don't use JavaScript's % operator here as this doesn't work\r\n    // correctly for x < 0 and x === 0\r\n    // see https://en.wikipedia.org/wiki/Modulo_operation\r\n    return x - y * Math.floor(x / y);\r\n  } else if (y === 0) {\r\n    return x;\r\n  } else {\r\n    // y < 0\r\n    // TODO: implement mod for a negative divisor\r\n    throw new Error('Cannot calculate mod for a negative divisor');\r\n  }\r\n}\r\nmodNumber.signature = n2;\r\n/**\r\n * Calculate the nth root of a, solve x^root == a\r\n * http://rosettacode.org/wiki/Nth_root#JavaScript\r\n * @param {number} a\r\n * @param {number} [2] root\r\n * @private\r\n */\r\n\r\nexport function nthRootNumber(a) {\r\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\r\n  var inv = root < 0;\r\n\r\n  if (inv) {\r\n    root = -root;\r\n  }\r\n\r\n  if (root === 0) {\r\n    throw new Error('Root must be non-zero');\r\n  }\r\n\r\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\r\n    throw new Error('Root must be odd when a is negative.');\r\n  } // edge cases zero and infinity\r\n\r\n\r\n  if (a === 0) {\r\n    return inv ? Infinity : 0;\r\n  }\r\n\r\n  if (!isFinite(a)) {\r\n    return inv ? 0 : a;\r\n  }\r\n\r\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\r\n  // so (-1) ^ (1/root) = -1\r\n\r\n  x = a < 0 ? -x : x;\r\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\r\n  // Newton's method has some well-known problems at times:\r\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\r\n\r\n  /*\r\n  let x = 1 // Initial guess\r\n  let xPrev = 1\r\n  let i = 0\r\n  const iMax = 10000\r\n  do {\r\n    const delta = (a / Math.pow(x, root - 1) - x) / root\r\n    xPrev = x\r\n    x = x + delta\r\n    i++\r\n  }\r\n  while (xPrev !== x && i < iMax)\r\n   if (xPrev !== x) {\r\n    throw new Error('Function nthRoot failed to converge')\r\n  }\r\n   return inv ? 1 / x : x\r\n  */\r\n}\r\nexport function signNumber(x) {\r\n  return sign(x);\r\n}\r\nsignNumber.signature = n1;\r\nexport function sqrtNumber(x) {\r\n  return Math.sqrt(x);\r\n}\r\nsqrtNumber.signature = n1;\r\nexport function squareNumber(x) {\r\n  return x * x;\r\n}\r\nsquareNumber.signature = n1;\r\n/**\r\n * Calculate xgcd for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number} result\r\n * @private\r\n */\r\n\r\nexport function xgcdNumber(a, b) {\r\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\r\n  var t; // used to swap two variables\r\n\r\n  var q; // quotient\r\n\r\n  var r; // remainder\r\n\r\n  var x = 0;\r\n  var lastx = 1;\r\n  var y = 1;\r\n  var lasty = 0;\r\n\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function xgcd must be integer numbers');\r\n  }\r\n\r\n  while (b) {\r\n    q = Math.floor(a / b);\r\n    r = a - q * b;\r\n    t = x;\r\n    x = lastx - q * x;\r\n    lastx = t;\r\n    t = y;\r\n    y = lasty - q * y;\r\n    lasty = t;\r\n    a = b;\r\n    b = r;\r\n  }\r\n\r\n  var res;\r\n\r\n  if (a < 0) {\r\n    res = [-a, -lastx, -lasty];\r\n  } else {\r\n    res = [a, a ? lastx : 0, lasty];\r\n  }\r\n\r\n  return res;\r\n}\r\nxgcdNumber.signature = n2;\r\n/**\r\n * Calculates the power of x to y, x^y, for two numbers.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number} res\r\n */\r\n\r\nexport function powNumber(x, y) {\r\n  // x^Infinity === 0 if -1 < x < 1\r\n  // A real number 0 is returned instead of complex(0)\r\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\r\n    return 0;\r\n  }\r\n\r\n  return Math.pow(x, y);\r\n}\r\npowNumber.signature = n2;\r\n/**\r\n * round a number to the given number of decimals, or to zero if decimals is\r\n * not provided\r\n * @param {number} value\r\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\r\n * @return {number} roundedValue\r\n */\r\n\r\nexport function roundNumber(value) {\r\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\r\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\r\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\r\n  }\r\n\r\n  return parseFloat(toFixed(value, decimals));\r\n}\r\n/**\r\n * Calculate the norm of a number, the absolute value.\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function normNumber(x) {\r\n  return Math.abs(x);\r\n}\r\nnormNumber.signature = n1;"],"mappings":"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"},"metadata":{},"sourceType":"module"}