{"ast":null,"code":"import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      numeric = _ref.numeric,\n      larger = _ref.larger;\n  /**\r\n   * Compute the maximum value of a matrix or a  list with values.\r\n   * In case of a multi dimensional array, the maximum of the flattened array\r\n   * will be calculated. When `dim` is provided, the maximum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.max(a, b, c, ...)\r\n   *     math.max(A)\r\n   *     math.max(A, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.max(2, 1, 4, 3)                  // returns 4\r\n   *     math.max([2, 1, 4, 3])                // returns 4\r\n   *\r\n   *     // maximum over a specified dimension (zero-based)\r\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\r\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The maximum value\r\n   */\n\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  /**\r\n   * Return the largest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is largest, or y when y is largest\r\n   * @private\r\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\r\n   * Recursively calculate the maximum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} max\r\n   * @private\r\n   */\n\n\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n\n    return res;\n  }\n});","map":{"version":3,"names":["deepForEach","reduce","containsCollections","factory","improveErrorMessage","name","dependencies","createMax","_ref","typed","config","numeric","larger","_max","ArrayMatrixNumberBigNumber","array","dim","valueOf","_largest","_","args","TypeError","x","y","err","res","value","isNaN","NaN","undefined","Error","number"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/max.js"],"sourcesContent":["import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'max';\r\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\r\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    numeric,\r\n    larger\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the maximum value of a matrix or a  list with values.\r\n   * In case of a multi dimensional array, the maximum of the flattened array\r\n   * will be calculated. When `dim` is provided, the maximum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.max(a, b, c, ...)\r\n   *     math.max(A)\r\n   *     math.max(A, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.max(2, 1, 4, 3)                  // returns 4\r\n   *     math.max([2, 1, 4, 3])                // returns 4\r\n   *\r\n   *     // maximum over a specified dimension (zero-based)\r\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\r\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The maximum value\r\n   */\r\n  return typed(name, {\r\n    // max([a, b, c, d, ...])\r\n    'Array | Matrix': _max,\r\n    // max([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\r\n      return reduce(array, dim.valueOf(), _largest);\r\n    },\r\n    // max(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function max');\r\n      }\r\n\r\n      return _max(args);\r\n    }\r\n  });\r\n  /**\r\n   * Return the largest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is largest, or y when y is largest\r\n   * @private\r\n   */\r\n\r\n  function _largest(x, y) {\r\n    try {\r\n      return larger(x, y) ? x : y;\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'max', y);\r\n    }\r\n  }\r\n  /**\r\n   * Recursively calculate the maximum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} max\r\n   * @private\r\n   */\r\n\r\n\r\n  function _max(array) {\r\n    var res;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        if (isNaN(value) && typeof value === 'number') {\r\n          res = NaN;\r\n        } else if (res === undefined || larger(value, res)) {\r\n          res = value;\r\n        }\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'max', value);\r\n      }\r\n    });\r\n\r\n    if (res === undefined) {\r\n      throw new Error('Cannot calculate max of an empty array');\r\n    } // make sure returning numeric value: parse a string into a numeric value\r\n\r\n\r\n    if (typeof res === 'string') {\r\n      res = numeric(res, config.number);\r\n    }\r\n\r\n    return res;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,mBAA9B,QAAyD,2BAAzD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,QAA/B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,OAHF,GAKIH,IALJ,CAGEG,OAHF;EAAA,IAIEC,MAJF,GAKIJ,IALJ,CAIEI,MAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBQ,IAFD;IAGjB;IACA,sCAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;MACpF,OAAOf,MAAM,CAACc,KAAD,EAAQC,GAAG,CAACC,OAAJ,EAAR,EAAuBC,QAAvB,CAAb;IACD,CANgB;IAOjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,IAAIlB,mBAAmB,CAACkB,IAAD,CAAvB,EAA+B;QAC7B,MAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;MACD;;MAED,OAAOR,IAAI,CAACO,IAAD,CAAX;IACD;EAdgB,CAAP,CAAZ;EAgBA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASF,QAAT,CAAkBI,CAAlB,EAAqBC,CAArB,EAAwB;IACtB,IAAI;MACF,OAAOX,MAAM,CAACU,CAAD,EAAIC,CAAJ,CAAN,GAAeD,CAAf,GAAmBC,CAA1B;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,MAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaD,CAAb,CAAzB;IACD;EACF;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGE,SAASV,IAAT,CAAcE,KAAd,EAAqB;IACnB,IAAIU,GAAJ;IACAzB,WAAW,CAACe,KAAD,EAAQ,UAAUW,KAAV,EAAiB;MAClC,IAAI;QACF,IAAIC,KAAK,CAACD,KAAD,CAAL,IAAgB,OAAOA,KAAP,KAAiB,QAArC,EAA+C;UAC7CD,GAAG,GAAGG,GAAN;QACD,CAFD,MAEO,IAAIH,GAAG,KAAKI,SAAR,IAAqBjB,MAAM,CAACc,KAAD,EAAQD,GAAR,CAA/B,EAA6C;UAClDA,GAAG,GAAGC,KAAN;QACD;MACF,CAND,CAME,OAAOF,GAAP,EAAY;QACZ,MAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaE,KAAb,CAAzB;MACD;IACF,CAVU,CAAX;;IAYA,IAAID,GAAG,KAAKI,SAAZ,EAAuB;MACrB,MAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;IACD,CAhBkB,CAgBjB;;;IAGF,IAAI,OAAOL,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGd,OAAO,CAACc,GAAD,EAAMf,MAAM,CAACqB,MAAb,CAAb;IACD;;IAED,OAAON,GAAP;EACD;AACF,CAvG4C,CAAtC"},"metadata":{},"sourceType":"module"}