{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'std';\nvar dependencies = ['typed', 'sqrt', 'variance'];\nexport var createStd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      sqrt = _ref.sqrt,\n      variance = _ref.variance;\n  /**\r\n   * Compute the standard deviation of a matrix or a  list with values.\r\n   * The standard deviations is defined as the square root of the variance:\r\n   * `std(A) = sqrt(variance(A))`.\r\n   * In case of a (multi dimensional) array or matrix, the standard deviation\r\n   * over all elements will be calculated by default, unless an axis is specified\r\n   * in which case the standard deviation will be computed along that axis.\r\n   *\r\n   * Additionally, it is possible to compute the standard deviation along the rows\r\n   * or columns of a matrix by specifying the dimension as the second argument.\r\n   *\r\n   * Optionally, the type of normalization can be specified as the final\r\n   * parameter. The parameter `normalization` can be one of the following values:\r\n   *\r\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\r\n   * - 'uncorrected'        The sum of squared errors is divided by n\r\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\r\n   *\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.std(a, b, c, ...)\r\n   *     math.std(A)\r\n   *     math.std(A, normalization)\r\n   *     math.std(A, dimension)\r\n   *     math.std(A, dimension, normalization)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.std(2, 4, 6)                     // returns 2\r\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\r\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\r\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\r\n   *\r\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, min, prod, sum, variance\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or or multiple scalar values\r\n   * @param {string} [normalization='unbiased']\r\n   *                        Determines how to normalize the variance.\r\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\r\n   * @param dimension {number | BigNumber}\r\n   *                        Determines the axis to compute the standard deviation for a matrix\r\n   * @return {*} The standard deviation\r\n   */\n\n  return typed(name, {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n    // std([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': _std,\n    // std([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _std,\n    // std(a, b, c, d, ...)\n    '...': function _(args) {\n      return _std(args);\n    }\n  });\n\n  function _std(array, normalization) {\n    if (array.length === 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n\n    try {\n      return sqrt(variance.apply(null, arguments));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {\n        throw new TypeError(err.message.replace(' variance', ' std'));\n      } else {\n        throw err;\n      }\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createStd","_ref","typed","sqrt","variance","_std","_","args","array","normalization","length","SyntaxError","apply","arguments","err","TypeError","message","indexOf","replace"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/std.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'std';\r\nvar dependencies = ['typed', 'sqrt', 'variance'];\r\nexport var createStd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    sqrt,\r\n    variance\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the standard deviation of a matrix or a  list with values.\r\n   * The standard deviations is defined as the square root of the variance:\r\n   * `std(A) = sqrt(variance(A))`.\r\n   * In case of a (multi dimensional) array or matrix, the standard deviation\r\n   * over all elements will be calculated by default, unless an axis is specified\r\n   * in which case the standard deviation will be computed along that axis.\r\n   *\r\n   * Additionally, it is possible to compute the standard deviation along the rows\r\n   * or columns of a matrix by specifying the dimension as the second argument.\r\n   *\r\n   * Optionally, the type of normalization can be specified as the final\r\n   * parameter. The parameter `normalization` can be one of the following values:\r\n   *\r\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\r\n   * - 'uncorrected'        The sum of squared errors is divided by n\r\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\r\n   *\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.std(a, b, c, ...)\r\n   *     math.std(A)\r\n   *     math.std(A, normalization)\r\n   *     math.std(A, dimension)\r\n   *     math.std(A, dimension, normalization)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.std(2, 4, 6)                     // returns 2\r\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\r\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\r\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\r\n   *\r\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\r\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, min, prod, sum, variance\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or or multiple scalar values\r\n   * @param {string} [normalization='unbiased']\r\n   *                        Determines how to normalize the variance.\r\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\r\n   * @param dimension {number | BigNumber}\r\n   *                        Determines the axis to compute the standard deviation for a matrix\r\n   * @return {*} The standard deviation\r\n   */\r\n  return typed(name, {\r\n    // std([a, b, c, d, ...])\r\n    'Array | Matrix': _std,\r\n    // std([a, b, c, d, ...], normalization)\r\n    'Array | Matrix, string': _std,\r\n    // std([a, b, c, c, ...], dim)\r\n    'Array | Matrix, number | BigNumber': _std,\r\n    // std([a, b, c, c, ...], dim, normalization)\r\n    'Array | Matrix, number | BigNumber, string': _std,\r\n    // std(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _std(args);\r\n    }\r\n  });\r\n\r\n  function _std(array, normalization) {\r\n    if (array.length === 0) {\r\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\r\n    }\r\n\r\n    try {\r\n      return sqrt(variance.apply(null, arguments));\r\n    } catch (err) {\r\n      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {\r\n        throw new TypeError(err.message.replace(' variance', ' std'));\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,UAAlB,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,IAFF,GAIIF,IAJJ,CAEEE,IAFF;EAAA,IAGEC,QAHF,GAIIH,IAJJ,CAGEG,QAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBO,IAFD;IAGjB;IACA,0BAA0BA,IAJT;IAKjB;IACA,sCAAsCA,IANrB;IAOjB;IACA,8CAA8CA,IAR7B;IASjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,OAAOF,IAAI,CAACE,IAAD,CAAX;IACD;EAZgB,CAAP,CAAZ;;EAeA,SAASF,IAAT,CAAcG,KAAd,EAAqBC,aAArB,EAAoC;IAClC,IAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;MACtB,MAAM,IAAIC,WAAJ,CAAgB,2DAAhB,CAAN;IACD;;IAED,IAAI;MACF,OAAOR,IAAI,CAACC,QAAQ,CAACQ,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAD,CAAX;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,IAAIA,GAAG,YAAYC,SAAf,IAA4BD,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoB,WAApB,MAAqC,CAAC,CAAtE,EAAyE;QACvE,MAAM,IAAIF,SAAJ,CAAcD,GAAG,CAACE,OAAJ,CAAYE,OAAZ,CAAoB,WAApB,EAAiC,MAAjC,CAAd,CAAN;MACD,CAFD,MAEO;QACL,MAAMJ,GAAN;MACD;IACF;EACF;AACF,CAzF4C,CAAtC"},"metadata":{},"sourceType":"module"}