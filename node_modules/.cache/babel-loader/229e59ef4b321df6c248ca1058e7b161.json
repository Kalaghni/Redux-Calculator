{"ast":null,"code":"import { clone } from '../../utils/object.js';\nimport { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  /**\r\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\r\n   * It is guaranteed to always return a clone of the argument.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\n\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(clone(x.toArray())); // TODO: return the same matrix type as x\n\n      return matrix(flat);\n    }\n  });\n});","map":{"version":3,"names":["clone","flatten","flattenArray","factory","name","dependencies","createFlatten","_ref","typed","matrix","Array","x","Matrix","flat","toArray"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/matrix/flatten.js"],"sourcesContent":["import { clone } from '../../utils/object.js';\r\nimport { flatten as flattenArray } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'flatten';\r\nvar dependencies = ['typed', 'matrix'];\r\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix\r\n  } = _ref;\r\n\r\n  /**\r\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\r\n   * It is guaranteed to always return a clone of the argument.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      return flattenArray(clone(x));\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      var flat = flattenArray(clone(x.toArray())); // TODO: return the same matrix type as x\r\n\r\n      return matrix(flat);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAGIF,IAHJ,CAEEE,MAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjBM,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;MACvB,OAAOT,YAAY,CAACF,KAAK,CAACW,CAAD,CAAN,CAAnB;IACD,CAHgB;IAIjBC,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;MACzB,IAAIE,IAAI,GAAGX,YAAY,CAACF,KAAK,CAACW,CAAC,CAACG,OAAF,EAAD,CAAN,CAAvB,CADyB,CACoB;;MAE7C,OAAOL,MAAM,CAACI,IAAD,CAAb;IACD;EARgB,CAAP,CAAZ;AAUD,CAnCgD,CAA1C"},"metadata":{},"sourceType":"module"}