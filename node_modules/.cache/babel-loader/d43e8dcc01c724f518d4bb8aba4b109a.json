{"ast":null,"code":"import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08.js';\nimport { factory } from '../../utils/factory.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm08 = createAlgorithm08({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\r\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.rightLogShift(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.rightLogShift(4, 2)               // returns number 1\r\n   *\r\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\r\n   *\r\n   * @param  {number | Array | Matrix} x Value to be shifted\r\n   * @param  {number} y Amount of shifts\r\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\r\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["createAlgorithm02","createAlgorithm11","createAlgorithm13","createAlgorithm14","createAlgorithm01","createAlgorithm10","createAlgorithm08","factory","rightLogShiftNumber","name","dependencies","createRightLogShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","algorithm01","algorithm02","algorithm08","algorithm10","algorithm11","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","clone","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","size","storage","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js"],"sourcesContent":["import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\r\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\r\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\r\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\r\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\r\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\r\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\r\nvar name = 'rightLogShift';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\r\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var algorithm01 = createAlgorithm01({\r\n    typed\r\n  });\r\n  var algorithm02 = createAlgorithm02({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm08 = createAlgorithm08({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm10 = createAlgorithm10({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var algorithm11 = createAlgorithm11({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm13 = createAlgorithm13({\r\n    typed\r\n  });\r\n  var algorithm14 = createAlgorithm14({\r\n    typed\r\n  });\r\n  /**\r\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.rightLogShift(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.rightLogShift(4, 2)               // returns number 1\r\n   *\r\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\r\n   *\r\n   * @param  {number | Array | Matrix} x Value to be shifted\r\n   * @param  {number} y Amount of shifts\r\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\r\n   */\r\n\r\n  return typed(name, {\r\n    'number, number': rightLogShiftNumber,\r\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\r\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\r\n      return algorithm08(x, y, this, false);\r\n    },\r\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\r\n      return algorithm02(y, x, this, true);\r\n    },\r\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\r\n      return algorithm01(x, y, this, false);\r\n    },\r\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\r\n      return algorithm13(x, y, this);\r\n    },\r\n    'Array, Array': function ArrayArray(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), matrix(y)).valueOf();\r\n    },\r\n    'Array, Matrix': function ArrayMatrix(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), y);\r\n    },\r\n    'Matrix, Array': function MatrixArray(x, y) {\r\n      // use matrix implementation\r\n      return this(x, matrix(y));\r\n    },\r\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\r\n      // check scalar\r\n      if (equalScalar(y, 0)) {\r\n        return x.clone();\r\n      }\r\n\r\n      return algorithm11(x, y, this, false);\r\n    },\r\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\r\n      // check scalar\r\n      if (equalScalar(y, 0)) {\r\n        return x.clone();\r\n      }\r\n\r\n      return algorithm14(x, y, this, false);\r\n    },\r\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\r\n      // check scalar\r\n      if (equalScalar(x, 0)) {\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n\r\n      return algorithm10(y, x, this, true);\r\n    },\r\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\r\n      // check scalar\r\n      if (equalScalar(x, 0)) {\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n\r\n      return algorithm14(y, x, this, true);\r\n    },\r\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), y).valueOf();\r\n    },\r\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\r\n      // use matrix implementation\r\n      return this(x, matrix(y)).valueOf();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,OAAnC,EAA4C,aAA5C,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAClF,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAMIF,IANJ,CAEEE,MAFF;EAAA,IAGEC,WAHF,GAMIH,IANJ,CAGEG,WAHF;EAAA,IAIEC,KAJF,GAMIJ,IANJ,CAIEI,KAJF;EAAA,IAKEC,WALF,GAMIL,IANJ,CAKEK,WALF;EAOA,IAAIC,WAAW,GAAGd,iBAAiB,CAAC;IAClCS,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA,IAAIM,WAAW,GAAGnB,iBAAiB,CAAC;IAClCa,KAAK,EAALA,KADkC;IAElCE,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAIK,WAAW,GAAGd,iBAAiB,CAAC;IAClCO,KAAK,EAALA,KADkC;IAElCE,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAIM,WAAW,GAAGhB,iBAAiB,CAAC;IAClCQ,KAAK,EAALA,KADkC;IAElCI,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAIK,WAAW,GAAGrB,iBAAiB,CAAC;IAClCY,KAAK,EAALA,KADkC;IAElCE,WAAW,EAAXA;EAFkC,CAAD,CAAnC;EAIA,IAAIQ,WAAW,GAAGrB,iBAAiB,CAAC;IAClCW,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA,IAAIW,WAAW,GAAGrB,iBAAiB,CAAC;IAClCU,KAAK,EAALA;EADkC,CAAD,CAAnC;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkBD,mBADD;IAEjB;IACA,8BAA8B,SAASiB,wBAAT,CAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;MACpE,OAAOP,WAAW,CAACM,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CALgB;IAMjB,6BAA6B,SAASC,uBAAT,CAAiCF,CAAjC,EAAoCC,CAApC,EAAuC;MAClE,OAAOR,WAAW,CAACQ,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CARgB;IASjB,6BAA6B,SAASG,uBAAT,CAAiCH,CAAjC,EAAoCC,CAApC,EAAuC;MAClE,OAAOT,WAAW,CAACQ,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CAXgB;IAYjB,4BAA4B,SAASG,sBAAT,CAAgCJ,CAAhC,EAAmCC,CAAnC,EAAsC;MAChE,OAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAlB;IACD,CAdgB;IAejB,gBAAgB,SAASI,UAAT,CAAoBL,CAApB,EAAuBC,CAAvB,EAA0B;MACxC;MACA,OAAO,KAAKb,MAAM,CAACY,CAAD,CAAX,EAAgBZ,MAAM,CAACa,CAAD,CAAtB,EAA2BK,OAA3B,EAAP;IACD,CAlBgB;IAmBjB,iBAAiB,SAASC,WAAT,CAAqBP,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C;MACA,OAAO,KAAKb,MAAM,CAACY,CAAD,CAAX,EAAgBC,CAAhB,CAAP;IACD,CAtBgB;IAuBjB,iBAAiB,SAASO,WAAT,CAAqBR,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C;MACA,OAAO,KAAKD,CAAL,EAAQZ,MAAM,CAACa,CAAD,CAAd,CAAP;IACD,CA1BgB;IA2BjB,oCAAoC,SAASQ,2BAAT,CAAqCT,CAArC,EAAwCC,CAAxC,EAA2C;MAC7E;MACA,IAAIZ,WAAW,CAACY,CAAD,EAAI,CAAJ,CAAf,EAAuB;QACrB,OAAOD,CAAC,CAACU,KAAF,EAAP;MACD;;MAED,OAAOd,WAAW,CAACI,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CAlCgB;IAmCjB,mCAAmC,SAASU,0BAAT,CAAoCX,CAApC,EAAuCC,CAAvC,EAA0C;MAC3E;MACA,IAAIZ,WAAW,CAACY,CAAD,EAAI,CAAJ,CAAf,EAAuB;QACrB,OAAOD,CAAC,CAACU,KAAF,EAAP;MACD;;MAED,OAAOZ,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;IACD,CA1CgB;IA2CjB,oCAAoC,SAASW,2BAAT,CAAqCZ,CAArC,EAAwCC,CAAxC,EAA2C;MAC7E;MACA,IAAIZ,WAAW,CAACW,CAAD,EAAI,CAAJ,CAAf,EAAuB;QACrB,OAAOV,KAAK,CAACW,CAAC,CAACY,IAAF,EAAD,EAAWZ,CAAC,CAACa,OAAF,EAAX,CAAZ;MACD;;MAED,OAAOnB,WAAW,CAACM,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CAlDgB;IAmDjB,mCAAmC,SAASe,0BAAT,CAAoCf,CAApC,EAAuCC,CAAvC,EAA0C;MAC3E;MACA,IAAIZ,WAAW,CAACW,CAAD,EAAI,CAAJ,CAAf,EAAuB;QACrB,OAAOV,KAAK,CAACW,CAAC,CAACY,IAAF,EAAD,EAAWZ,CAAC,CAACa,OAAF,EAAX,CAAZ;MACD;;MAED,OAAOhB,WAAW,CAACG,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;IACD,CA1DgB;IA2DjB,6BAA6B,SAASgB,oBAAT,CAA8BhB,CAA9B,EAAiCC,CAAjC,EAAoC;MAC/D;MACA,OAAO,KAAKb,MAAM,CAACY,CAAD,CAAX,EAAgBC,CAAhB,EAAmBK,OAAnB,EAAP;IACD,CA9DgB;IA+DjB,6BAA6B,SAASW,oBAAT,CAA8BjB,CAA9B,EAAiCC,CAAjC,EAAoC;MAC/D;MACA,OAAO,KAAKD,CAAL,EAAQZ,MAAM,CAACa,CAAD,CAAd,EAAmBK,OAAnB,EAAP;IACD;EAlEgB,CAAP,CAAZ;AAoED,CA7HsD,CAAhD"},"metadata":{},"sourceType":"module"}