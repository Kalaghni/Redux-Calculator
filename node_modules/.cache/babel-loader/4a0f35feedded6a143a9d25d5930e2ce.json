{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      numeric = _ref.numeric,\n      smaller = _ref.smaller;\n  /**\r\n   * Compute the minimum value of a matrix or a  list of values.\r\n   * In case of a multi dimensional array, the minimum of the flattened array\r\n   * will be calculated. When `dim` is provided, the minimum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.min(a, b, c, ...)\r\n   *     math.min(A)\r\n   *     math.min(A, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.min(2, 1, 4, 3)                  // returns 1\r\n   *     math.min([2, 1, 4, 3])                // returns 1\r\n   *\r\n   *     // minimum over a specified dimension (zero-based)\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The minimum value\r\n   */\n\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  /**\r\n   * Return the smallest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\r\n   * @private\r\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\r\n   * Recursively calculate the minimum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} min\r\n   * @private\r\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof min === 'string') {\n      min = numeric(min, config.number);\n    }\n\n    return min;\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","name","dependencies","createMin","_ref","typed","config","numeric","smaller","_min","ArrayMatrixNumberBigNumber","array","dim","valueOf","_smallest","_","args","TypeError","x","y","err","min","value","isNaN","NaN","undefined","Error","number"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/statistics/min.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'min';\r\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\r\nexport var createMin = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    numeric,\r\n    smaller\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the minimum value of a matrix or a  list of values.\r\n   * In case of a multi dimensional array, the minimum of the flattened array\r\n   * will be calculated. When `dim` is provided, the minimum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.min(a, b, c, ...)\r\n   *     math.min(A)\r\n   *     math.min(A, dim)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.min(2, 1, 4, 3)                  // returns 1\r\n   *     math.min([2, 1, 4, 3])                // returns 1\r\n   *\r\n   *     // minimum over a specified dimension (zero-based)\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The minimum value\r\n   */\r\n  return typed(name, {\r\n    // min([a, b, c, d, ...])\r\n    'Array | Matrix': _min,\r\n    // min([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\r\n      return reduce(array, dim.valueOf(), _smallest);\r\n    },\r\n    // min(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function min');\r\n      }\r\n\r\n      return _min(args);\r\n    }\r\n  });\r\n  /**\r\n   * Return the smallest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\r\n   * @private\r\n   */\r\n\r\n  function _smallest(x, y) {\r\n    try {\r\n      return smaller(x, y) ? x : y;\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'min', y);\r\n    }\r\n  }\r\n  /**\r\n   * Recursively calculate the minimum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} min\r\n   * @private\r\n   */\r\n\r\n\r\n  function _min(array) {\r\n    var min;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        if (isNaN(value) && typeof value === 'number') {\r\n          min = NaN;\r\n        } else if (min === undefined || smaller(value, min)) {\r\n          min = value;\r\n        }\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'min', value);\r\n      }\r\n    });\r\n\r\n    if (min === undefined) {\r\n      throw new Error('Cannot calculate min of an empty array');\r\n    } // make sure returning numeric value: parse a string into a numeric value\r\n\r\n\r\n    if (typeof min === 'string') {\r\n      min = numeric(min, config.number);\r\n    }\r\n\r\n    return min;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,2BAAzD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,SAA/B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,OAHF,GAKIH,IALJ,CAGEG,OAHF;EAAA,IAIEC,OAJF,GAKIJ,IALJ,CAIEI,OAJF;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjB;IACA,kBAAkBQ,IAFD;IAGjB;IACA,sCAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;MACpF,OAAOd,MAAM,CAACa,KAAD,EAAQC,GAAG,CAACC,OAAJ,EAAR,EAAuBC,SAAvB,CAAb;IACD,CANgB;IAOjB;IACA,OAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;MACtB,IAAIpB,mBAAmB,CAACoB,IAAD,CAAvB,EAA+B;QAC7B,MAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;MACD;;MAED,OAAOR,IAAI,CAACO,IAAD,CAAX;IACD;EAdgB,CAAP,CAAZ;EAgBA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASF,SAAT,CAAmBI,CAAnB,EAAsBC,CAAtB,EAAyB;IACvB,IAAI;MACF,OAAOX,OAAO,CAACU,CAAD,EAAIC,CAAJ,CAAP,GAAgBD,CAAhB,GAAoBC,CAA3B;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,MAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaD,CAAb,CAAzB;IACD;EACF;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGE,SAASV,IAAT,CAAcE,KAAd,EAAqB;IACnB,IAAIU,GAAJ;IACAxB,WAAW,CAACc,KAAD,EAAQ,UAAUW,KAAV,EAAiB;MAClC,IAAI;QACF,IAAIC,KAAK,CAACD,KAAD,CAAL,IAAgB,OAAOA,KAAP,KAAiB,QAArC,EAA+C;UAC7CD,GAAG,GAAGG,GAAN;QACD,CAFD,MAEO,IAAIH,GAAG,KAAKI,SAAR,IAAqBjB,OAAO,CAACc,KAAD,EAAQD,GAAR,CAAhC,EAA8C;UACnDA,GAAG,GAAGC,KAAN;QACD;MACF,CAND,CAME,OAAOF,GAAP,EAAY;QACZ,MAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaE,KAAb,CAAzB;MACD;IACF,CAVU,CAAX;;IAYA,IAAID,GAAG,KAAKI,SAAZ,EAAuB;MACrB,MAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;IACD,CAhBkB,CAgBjB;;;IAGF,IAAI,OAAOL,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGd,OAAO,CAACc,GAAD,EAAMf,MAAM,CAACqB,MAAb,CAAb;IACD;;IAED,OAAON,GAAP;EACD;AACF,CAvG4C,CAAtC"},"metadata":{},"sourceType":"module"}