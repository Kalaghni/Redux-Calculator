{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on; // seeded pseudo random number generator\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\r\n   * Return a random integer number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.randomInt()                // generate a random integer between 0 and 1\r\n   *     math.randomInt(max)             // generate a random integer between 0 and max\r\n   *     math.randomInt(min, max)        // generate a random integer between min and max\r\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\r\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\r\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\r\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\r\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random integer value\r\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","map":{"version":3,"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","on","rng","randomSeed","curr","prev","_randomInt","number","max","min","size","_randomIntMatrix","res","valueOf","create","Math","floor"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { randomMatrix } from './util/randomMatrix.js';\r\nimport { createRng } from './util/seededRNG.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nvar name = 'randomInt';\r\nvar dependencies = ['typed', 'config', '?on'];\r\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    on\r\n  } = _ref;\r\n  // seeded pseudo random number generator\r\n  var rng = createRng(config.randomSeed);\r\n\r\n  if (on) {\r\n    on('config', function (curr, prev) {\r\n      if (curr.randomSeed !== prev.randomSeed) {\r\n        rng = createRng(curr.randomSeed);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Return a random integer number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.randomInt()                // generate a random integer between 0 and 1\r\n   *     math.randomInt(max)             // generate a random integer between 0 and max\r\n   *     math.randomInt(min, max)        // generate a random integer between min and max\r\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\r\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\r\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\r\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\r\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random integer value\r\n   */\r\n\r\n\r\n  return typed(name, {\r\n    '': () => _randomInt(0, 1),\r\n    number: max => _randomInt(0, max),\r\n    'number, number': (min, max) => _randomInt(min, max),\r\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\r\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\r\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\r\n  });\r\n\r\n  function _randomIntMatrix(size, min, max) {\r\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\r\n    return isMatrix(size) ? size.create(res) : res;\r\n  }\r\n\r\n  function _randomInt(min, max) {\r\n    return Math.floor(min + rng() * (max - min));\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC9E,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAIIF,IAJJ,CAEEE,MAFF;EAAA,IAGEC,EAHF,GAIIH,IAJJ,CAGEG,EAHF,CAD8E,CAM9E;;EACA,IAAIC,GAAG,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAR,CAAnB;;EAEA,IAAIF,EAAJ,EAAQ;IACNA,EAAE,CAAC,QAAD,EAAW,UAAUG,IAAV,EAAgBC,IAAhB,EAAsB;MACjC,IAAID,IAAI,CAACD,UAAL,KAAoBE,IAAI,CAACF,UAA7B,EAAyC;QACvCD,GAAG,GAAGT,SAAS,CAACW,IAAI,CAACD,UAAN,CAAf;MACD;IACF,CAJC,CAAF;EAKD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGE,OAAOJ,KAAK,CAACJ,IAAD,EAAO;IACjB,IAAI;MAAA,OAAMW,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAhB;IAAA,CADa;IAEjBC,MAAM,EAAE,gBAAAC,GAAG;MAAA,OAAIF,UAAU,CAAC,CAAD,EAAIE,GAAJ,CAAd;IAAA,CAFM;IAGjB,kBAAkB,sBAACC,GAAD,EAAMD,GAAN;MAAA,OAAcF,UAAU,CAACG,GAAD,EAAMD,GAAN,CAAxB;IAAA,CAHD;IAIjB,kBAAkB,qBAAAE,IAAI;MAAA,OAAIC,gBAAgB,CAACD,IAAD,EAAO,CAAP,EAAU,CAAV,CAApB;IAAA,CAJL;IAKjB,0BAA0B,2BAACA,IAAD,EAAOF,GAAP;MAAA,OAAeG,gBAAgB,CAACD,IAAD,EAAO,CAAP,EAAUF,GAAV,CAA/B;IAAA,CALT;IAMjB,kCAAkC,iCAACE,IAAD,EAAOD,GAAP,EAAYD,GAAZ;MAAA,OAAoBG,gBAAgB,CAACD,IAAD,EAAOD,GAAP,EAAYD,GAAZ,CAApC;IAAA;EANjB,CAAP,CAAZ;;EASA,SAASG,gBAAT,CAA0BD,IAA1B,EAAgCD,GAAhC,EAAqCD,GAArC,EAA0C;IACxC,IAAII,GAAG,GAAGpB,YAAY,CAACkB,IAAI,CAACG,OAAL,EAAD,EAAiB;MAAA,OAAMP,UAAU,CAACG,GAAD,EAAMD,GAAN,CAAhB;IAAA,CAAjB,CAAtB;IACA,OAAOd,QAAQ,CAACgB,IAAD,CAAR,GAAiBA,IAAI,CAACI,MAAL,CAAYF,GAAZ,CAAjB,GAAoCA,GAA3C;EACD;;EAED,SAASN,UAAT,CAAoBG,GAApB,EAAyBD,GAAzB,EAA8B;IAC5B,OAAOO,IAAI,CAACC,KAAL,CAAWP,GAAG,GAAGP,GAAG,MAAMM,GAAG,GAAGC,GAAZ,CAApB,CAAP;EACD;AACF,CAhEkD,CAA5C"},"metadata":{},"sourceType":"module"}