{"ast":null,"code":"export var bitOrDocs = {\n  name: 'bitOr',\n  category: 'Bitwise',\n  syntax: ['x | y', 'bitOr(x, y)'],\n  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],\n  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","map":{"version":3,"names":["bitOrDocs","name","category","syntax","description","examples","seealso"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js"],"sourcesContent":["export var bitOrDocs = {\r\n  name: 'bitOr',\r\n  category: 'Bitwise',\r\n  syntax: ['x | y', 'bitOr(x, y)'],\r\n  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\r\n  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],\r\n  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\r\n};"],"mappings":"AAAA,OAAO,IAAIA,SAAS,GAAG;EACrBC,IAAI,EAAE,OADe;EAErBC,QAAQ,EAAE,SAFW;EAGrBC,MAAM,EAAE,CAAC,OAAD,EAAU,aAAV,CAHa;EAIrBC,WAAW,EAAE,6PAJQ;EAKrBC,QAAQ,EAAE,CAAC,OAAD,EAAU,qBAAV,CALW;EAMrBC,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,WAA/B,EAA4C,iBAA5C,EAA+D,eAA/D;AANY,CAAhB"},"metadata":{},"sourceType":"module"}