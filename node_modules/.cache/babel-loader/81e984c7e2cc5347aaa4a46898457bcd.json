{"ast":null,"code":"import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n  /**\r\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setIsSubset(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\r\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {boolean}            true | false\r\n   */\n\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});","map":{"version":3,"names":["flatten","identify","factory","name","dependencies","createSetIsSubset","_ref","typed","size","subset","compareNatural","Index","ArrayMatrixArrayMatrix","a1","a2","b1","Array","isArray","toArray","sort","b2","inb2","i","length","j","value","identifier"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/set/setIsSubset.js"],"sourcesContent":["import { flatten, identify } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'setIsSubset';\r\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\r\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    size,\r\n    subset,\r\n    compareNatural,\r\n    Index\r\n  } = _ref;\r\n\r\n  /**\r\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setIsSubset(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\r\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {boolean}            true | false\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\r\n      if (subset(size(a1), new Index(0)) === 0) {\r\n        // empty is a subset of anything\r\n        return true;\r\n      } else if (subset(size(a2), new Index(0)) === 0) {\r\n        // anything is not a subset of empty\r\n        return false;\r\n      }\r\n\r\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\r\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\r\n      var inb2;\r\n\r\n      for (var i = 0; i < b1.length; i++) {\r\n        inb2 = false;\r\n\r\n        for (var j = 0; j < b2.length; j++) {\r\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\r\n            // the identifier is always a decimal int\r\n            inb2 = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (inb2 === false) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,sBAAlC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAChF,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,IAFF,GAMIF,IANJ,CAEEE,IAFF;EAAA,IAGEC,MAHF,GAMIH,IANJ,CAGEG,MAHF;EAAA,IAIEC,cAJF,GAMIJ,IANJ,CAIEI,cAJF;EAAA,IAKEC,KALF,GAMIL,IANJ,CAKEK,KALF;EAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOJ,KAAK,CAACJ,IAAD,EAAO;IACjB,kCAAkC,SAASS,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwC;MACxE,IAAIL,MAAM,CAACD,IAAI,CAACK,EAAD,CAAL,EAAW,IAAIF,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;QACxC;QACA,OAAO,IAAP;MACD,CAHD,MAGO,IAAIF,MAAM,CAACD,IAAI,CAACM,EAAD,CAAL,EAAW,IAAIH,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;QAC/C;QACA,OAAO,KAAP;MACD;;MAED,IAAII,EAAE,GAAGd,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcJ,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACK,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDT,cAApD,CAAD,CAAjB;MACA,IAAIU,EAAE,GAAGnB,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcH,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACI,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDT,cAApD,CAAD,CAAjB;MACA,IAAIW,IAAJ;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,EAAE,CAACQ,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;QAClCD,IAAI,GAAG,KAAP;;QAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;UAClC,IAAId,cAAc,CAACK,EAAE,CAACO,CAAD,CAAF,CAAMG,KAAP,EAAcL,EAAE,CAACI,CAAD,CAAF,CAAMC,KAApB,CAAd,KAA6C,CAA7C,IAAkDV,EAAE,CAACO,CAAD,CAAF,CAAMI,UAAN,KAAqBN,EAAE,CAACI,CAAD,CAAF,CAAME,UAAjF,EAA6F;YAC3F;YACAL,IAAI,GAAG,IAAP;YACA;UACD;QACF;;QAED,IAAIA,IAAI,KAAK,KAAb,EAAoB;UAClB,OAAO,KAAP;QACD;MACF;;MAED,OAAO,IAAP;IACD;EA/BgB,CAAP,CAAZ;AAiCD,CA/DoD,CAA9C"},"metadata":{},"sourceType":"module"}