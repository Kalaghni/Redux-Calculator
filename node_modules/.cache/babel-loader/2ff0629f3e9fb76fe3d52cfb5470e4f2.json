{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { flatten } from '../../utils/array.js';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      sqrt = _ref.sqrt,\n      smaller = _ref.smaller,\n      isPositive = _ref.isPositive;\n  /**\r\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\r\n   *\r\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\r\n   *\r\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hypot(a, b, ...)\r\n   *     math.hypot([a, b, c, ...])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.hypot(3, 4)      // 5\r\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\r\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\r\n   *     math.hypot(-2)        // 2\r\n   *\r\n   * See also:\r\n   *\r\n   *     abs, norm\r\n   *\r\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\r\n   *                                                          Matrix and Array input is flattened and returns a\r\n   *                                                          single number for the whole matrix.\r\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\r\n   */\n\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: function Array(x) {\n      return this.apply(this, flatten(x));\n    },\n    Matrix: function Matrix(x) {\n      return this.apply(this, flatten(x.toArray()));\n    }\n  });\n  /**\r\n   * Calculate the hypotenusa for an Array with values\r\n   * @param {Array.<number | BigNumber>} args\r\n   * @return {number | BigNumber} Returns the result\r\n   * @private\r\n   */\n\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n\n    return multiplyScalar(largest, sqrt(result));\n  }\n});","map":{"version":3,"names":["factory","flatten","name","dependencies","createHypot","_ref","typed","abs","addScalar","divideScalar","multiplyScalar","sqrt","smaller","isPositive","_hypot","Array","x","apply","Matrix","toArray","args","result","largest","i","length","value"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/hypot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { flatten } from '../../utils/array.js';\r\nvar name = 'hypot';\r\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\r\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    addScalar,\r\n    divideScalar,\r\n    multiplyScalar,\r\n    sqrt,\r\n    smaller,\r\n    isPositive\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\r\n   *\r\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\r\n   *\r\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hypot(a, b, ...)\r\n   *     math.hypot([a, b, c, ...])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.hypot(3, 4)      // 5\r\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\r\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\r\n   *     math.hypot(-2)        // 2\r\n   *\r\n   * See also:\r\n   *\r\n   *     abs, norm\r\n   *\r\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\r\n   *                                                          Matrix and Array input is flattened and returns a\r\n   *                                                          single number for the whole matrix.\r\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\r\n   */\r\n  return typed(name, {\r\n    '... number | BigNumber': _hypot,\r\n    Array: function Array(x) {\r\n      return this.apply(this, flatten(x));\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      return this.apply(this, flatten(x.toArray()));\r\n    }\r\n  });\r\n  /**\r\n   * Calculate the hypotenusa for an Array with values\r\n   * @param {Array.<number | BigNumber>} args\r\n   * @return {number | BigNumber} Returns the result\r\n   * @private\r\n   */\r\n\r\n  function _hypot(args) {\r\n    // code based on `hypot` from es6-shim:\r\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\r\n    var result = 0;\r\n    var largest = 0;\r\n\r\n    for (var i = 0; i < args.length; i++) {\r\n      var value = abs(args[i]);\r\n\r\n      if (smaller(largest, value)) {\r\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\r\n        result = addScalar(result, 1);\r\n        largest = value;\r\n      } else {\r\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\r\n      }\r\n    }\r\n\r\n    return multiplyScalar(largest, sqrt(result));\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,WAAjB,EAA8B,cAA9B,EAA8C,gBAA9C,EAAgE,MAAhE,EAAwE,SAAxE,EAAmF,YAAnF,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GASID,IATJ,CACEC,KADF;EAAA,IAEEC,GAFF,GASIF,IATJ,CAEEE,GAFF;EAAA,IAGEC,SAHF,GASIH,IATJ,CAGEG,SAHF;EAAA,IAIEC,YAJF,GASIJ,IATJ,CAIEI,YAJF;EAAA,IAKEC,cALF,GASIL,IATJ,CAKEK,cALF;EAAA,IAMEC,IANF,GASIN,IATJ,CAMEM,IANF;EAAA,IAOEC,OAPF,GASIP,IATJ,CAOEO,OAPF;EAAA,IAQEC,UARF,GASIR,IATJ,CAQEQ,UARF;EAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOP,KAAK,CAACJ,IAAD,EAAO;IACjB,0BAA0BY,MADT;IAEjBC,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;MACvB,OAAO,KAAKC,KAAL,CAAW,IAAX,EAAiBhB,OAAO,CAACe,CAAD,CAAxB,CAAP;IACD,CAJgB;IAKjBE,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;MACzB,OAAO,KAAKC,KAAL,CAAW,IAAX,EAAiBhB,OAAO,CAACe,CAAC,CAACG,OAAF,EAAD,CAAxB,CAAP;IACD;EAPgB,CAAP,CAAZ;EASA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASL,MAAT,CAAgBM,IAAhB,EAAsB;IACpB;IACA;IACA,IAAIC,MAAM,GAAG,CAAb;IACA,IAAIC,OAAO,GAAG,CAAd;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAIE,KAAK,GAAGlB,GAAG,CAACa,IAAI,CAACG,CAAD,CAAL,CAAf;;MAEA,IAAIX,OAAO,CAACU,OAAD,EAAUG,KAAV,CAAX,EAA6B;QAC3BJ,MAAM,GAAGX,cAAc,CAACW,MAAD,EAASX,cAAc,CAACD,YAAY,CAACa,OAAD,EAAUG,KAAV,CAAb,EAA+BhB,YAAY,CAACa,OAAD,EAAUG,KAAV,CAA3C,CAAvB,CAAvB;QACAJ,MAAM,GAAGb,SAAS,CAACa,MAAD,EAAS,CAAT,CAAlB;QACAC,OAAO,GAAGG,KAAV;MACD,CAJD,MAIO;QACLJ,MAAM,GAAGb,SAAS,CAACa,MAAD,EAASR,UAAU,CAACY,KAAD,CAAV,GAAoBf,cAAc,CAACD,YAAY,CAACgB,KAAD,EAAQH,OAAR,CAAb,EAA+Bb,YAAY,CAACgB,KAAD,EAAQH,OAAR,CAA3C,CAAlC,GAAiGG,KAA1G,CAAlB;MACD;IACF;;IAED,OAAOf,cAAc,CAACY,OAAD,EAAUX,IAAI,CAACU,MAAD,CAAd,CAArB;EACD;AACF,CA5E8C,CAAxC"},"metadata":{},"sourceType":"module"}