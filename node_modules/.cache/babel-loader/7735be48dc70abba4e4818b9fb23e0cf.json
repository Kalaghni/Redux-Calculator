{"ast":null,"code":"import { isInteger } from '../number.js';\n/**\r\n * Formats a BigNumber in a given base\r\n * @param {BigNumber} n\r\n * @param {number} base\r\n * @param {number} size\r\n * @returns {string}\r\n */\n\nfunction formatBigNumberToBase(n, base, size) {\n  var BigNumberCtor = n.constructor;\n  var big2 = new BigNumberCtor(2);\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!n.isInteger()) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n.lessThan(0)) {\n      n = n.add(big2.pow(size));\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  switch (base) {\n    case 2:\n      return \"\".concat(n.toBinary()).concat(suffix);\n\n    case 8:\n      return \"\".concat(n.toOctal()).concat(suffix);\n\n    case 16:\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\n\n    default:\n      throw new Error(\"Base \".concat(base, \" not supported \"));\n  }\n}\n/**\r\n * Convert a BigNumber to a formatted string representation.\r\n *\r\n * Syntax:\r\n *\r\n *    format(value)\r\n *    format(value, options)\r\n *    format(value, precision)\r\n *    format(value, fn)\r\n *\r\n * Where:\r\n *\r\n *    {number} value   The value to be formatted\r\n *    {Object} options An object with formatting options. Available options:\r\n *                     {string} notation\r\n *                         Number notation. Choose from:\r\n *                         'fixed'          Always use regular number notation.\r\n *                                          For example '123.40' and '14000000'\r\n *                         'exponential'    Always use exponential notation.\r\n *                                          For example '1.234e+2' and '1.4e+7'\r\n *                         'auto' (default) Regular number notation for numbers\r\n *                                          having an absolute value between\r\n *                                          `lower` and `upper` bounds, and uses\r\n *                                          exponential notation elsewhere.\r\n *                                          Lower bound is included, upper bound\r\n *                                          is excluded.\r\n *                                          For example '123.4' and '1.4e7'.\r\n *                         'bin', 'oct, or\r\n *                         'hex'            Format the number using binary, octal,\r\n *                                          or hexadecimal notation.\r\n *                                          For example '0b1101' and '0x10fe'.\r\n *                     {number} wordSize    The word size in bits to use for formatting\r\n *                                          in binary, octal, or hexadecimal notation.\r\n *                                          To be used only with 'bin', 'oct', or 'hex'\r\n *                                          values for 'notation' option. When this option\r\n *                                          is defined the value is formatted as a signed\r\n *                                          twos complement integer of the given word size\r\n *                                          and the size suffix is appended to the output.\r\n *                                          For example\r\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\r\n *                                          Default value is undefined.\r\n *                     {number} precision   A number between 0 and 16 to round\r\n *                                          the digits of the number.\r\n *                                          In case of notations 'exponential',\r\n *                                          'engineering', and 'auto',\r\n *                                          `precision` defines the total\r\n *                                          number of significant digits returned.\r\n *                                          In case of notation 'fixed',\r\n *                                          `precision` defines the number of\r\n *                                          significant digits after the decimal\r\n *                                          point.\r\n *                                          `precision` is undefined by default.\r\n *                     {number} lowerExp    Exponent determining the lower boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `-3`.\r\n *                     {number} upperExp    Exponent determining the upper boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `5`.\r\n *    {Function} fn    A custom formatting function. Can be used to override the\r\n *                     built-in notations. Function `fn` is called with `value` as\r\n *                     parameter and must return a string. Is useful for example to\r\n *                     format all values inside a matrix in a particular way.\r\n *\r\n * Examples:\r\n *\r\n *    format(6.4)                                        // '6.4'\r\n *    format(1240000)                                    // '1.24e6'\r\n *    format(1/3)                                        // '0.3333333333333333'\r\n *    format(1/3, 3)                                     // '0.333'\r\n *    format(21385, 2)                                   // '21000'\r\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\r\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\r\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\r\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\r\n *\r\n * @param {BigNumber} value\r\n * @param {Object | Function | number} [options]\r\n * @return {string} str The formatted value\r\n */\n\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatBigNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatBigNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatBigNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        } // remove trailing zeros after the decimal point\n\n\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\r\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\r\n * @param {BigNumber | string} value\r\n * @param {number} [precision]        Optional number of significant figures to return.\r\n */\n\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\n\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n/**\r\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\r\n * @param {BigNumber} value\r\n * @param {number} [precision]  Number of digits in formatted output.\r\n *                              If not provided, the maximum available digits\r\n *                              is used.\r\n * @returns {string} str\r\n */\n\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n/**\r\n * Format a number with fixed notation.\r\n * @param {BigNumber} value\r\n * @param {number} [precision=undefined] Optional number of decimals after the\r\n *                                       decimal point. Undefined by default.\r\n */\n\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}","map":{"version":3,"names":["isInteger","formatBigNumberToBase","n","base","size","BigNumberCtor","constructor","big2","suffix","Error","greaterThan","pow","sub","lessThan","mul","concat","add","toBinary","toOctal","toHexadecimal","format","value","options","isFinite","isNaN","gt","notation","precision","wordSize","undefined","toFixed","toExponential","toEngineering","lowerExp","upperExp","isZero","str","rounded","toSignificantDigits","exp","e","replace","digits","arguments","newExp","valueWithoutExp","Math","valueStr","toPrecision","indexOf","toString"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/utils/bignumber/formatter.js"],"sourcesContent":["import { isInteger } from '../number.js';\r\n/**\r\n * Formats a BigNumber in a given base\r\n * @param {BigNumber} n\r\n * @param {number} base\r\n * @param {number} size\r\n * @returns {string}\r\n */\r\n\r\nfunction formatBigNumberToBase(n, base, size) {\r\n  var BigNumberCtor = n.constructor;\r\n  var big2 = new BigNumberCtor(2);\r\n  var suffix = '';\r\n\r\n  if (size) {\r\n    if (size < 1) {\r\n      throw new Error('size must be in greater than 0');\r\n    }\r\n\r\n    if (!isInteger(size)) {\r\n      throw new Error('size must be an integer');\r\n    }\r\n\r\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\r\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\r\n    }\r\n\r\n    if (!n.isInteger()) {\r\n      throw new Error('Value must be an integer');\r\n    }\r\n\r\n    if (n.lessThan(0)) {\r\n      n = n.add(big2.pow(size));\r\n    }\r\n\r\n    suffix = \"i\".concat(size);\r\n  }\r\n\r\n  switch (base) {\r\n    case 2:\r\n      return \"\".concat(n.toBinary()).concat(suffix);\r\n\r\n    case 8:\r\n      return \"\".concat(n.toOctal()).concat(suffix);\r\n\r\n    case 16:\r\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\r\n\r\n    default:\r\n      throw new Error(\"Base \".concat(base, \" not supported \"));\r\n  }\r\n}\r\n/**\r\n * Convert a BigNumber to a formatted string representation.\r\n *\r\n * Syntax:\r\n *\r\n *    format(value)\r\n *    format(value, options)\r\n *    format(value, precision)\r\n *    format(value, fn)\r\n *\r\n * Where:\r\n *\r\n *    {number} value   The value to be formatted\r\n *    {Object} options An object with formatting options. Available options:\r\n *                     {string} notation\r\n *                         Number notation. Choose from:\r\n *                         'fixed'          Always use regular number notation.\r\n *                                          For example '123.40' and '14000000'\r\n *                         'exponential'    Always use exponential notation.\r\n *                                          For example '1.234e+2' and '1.4e+7'\r\n *                         'auto' (default) Regular number notation for numbers\r\n *                                          having an absolute value between\r\n *                                          `lower` and `upper` bounds, and uses\r\n *                                          exponential notation elsewhere.\r\n *                                          Lower bound is included, upper bound\r\n *                                          is excluded.\r\n *                                          For example '123.4' and '1.4e7'.\r\n *                         'bin', 'oct, or\r\n *                         'hex'            Format the number using binary, octal,\r\n *                                          or hexadecimal notation.\r\n *                                          For example '0b1101' and '0x10fe'.\r\n *                     {number} wordSize    The word size in bits to use for formatting\r\n *                                          in binary, octal, or hexadecimal notation.\r\n *                                          To be used only with 'bin', 'oct', or 'hex'\r\n *                                          values for 'notation' option. When this option\r\n *                                          is defined the value is formatted as a signed\r\n *                                          twos complement integer of the given word size\r\n *                                          and the size suffix is appended to the output.\r\n *                                          For example\r\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\r\n *                                          Default value is undefined.\r\n *                     {number} precision   A number between 0 and 16 to round\r\n *                                          the digits of the number.\r\n *                                          In case of notations 'exponential',\r\n *                                          'engineering', and 'auto',\r\n *                                          `precision` defines the total\r\n *                                          number of significant digits returned.\r\n *                                          In case of notation 'fixed',\r\n *                                          `precision` defines the number of\r\n *                                          significant digits after the decimal\r\n *                                          point.\r\n *                                          `precision` is undefined by default.\r\n *                     {number} lowerExp    Exponent determining the lower boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `-3`.\r\n *                     {number} upperExp    Exponent determining the upper boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `5`.\r\n *    {Function} fn    A custom formatting function. Can be used to override the\r\n *                     built-in notations. Function `fn` is called with `value` as\r\n *                     parameter and must return a string. Is useful for example to\r\n *                     format all values inside a matrix in a particular way.\r\n *\r\n * Examples:\r\n *\r\n *    format(6.4)                                        // '6.4'\r\n *    format(1240000)                                    // '1.24e6'\r\n *    format(1/3)                                        // '0.3333333333333333'\r\n *    format(1/3, 3)                                     // '0.333'\r\n *    format(21385, 2)                                   // '21000'\r\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\r\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\r\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\r\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\r\n *\r\n * @param {BigNumber} value\r\n * @param {Object | Function | number} [options]\r\n * @return {string} str The formatted value\r\n */\r\n\r\n\r\nexport function format(value, options) {\r\n  if (typeof options === 'function') {\r\n    // handle format(value, fn)\r\n    return options(value);\r\n  } // handle special cases\r\n\r\n\r\n  if (!value.isFinite()) {\r\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\r\n  } // default values for options\r\n\r\n\r\n  var notation = 'auto';\r\n  var precision;\r\n  var wordSize;\r\n\r\n  if (options !== undefined) {\r\n    // determine notation from options\r\n    if (options.notation) {\r\n      notation = options.notation;\r\n    } // determine precision from options\r\n\r\n\r\n    if (typeof options === 'number') {\r\n      precision = options;\r\n    } else if (options.precision) {\r\n      precision = options.precision;\r\n    }\r\n\r\n    if (options.wordSize) {\r\n      wordSize = options.wordSize;\r\n\r\n      if (typeof wordSize !== 'number') {\r\n        throw new Error('Option \"wordSize\" must be a number');\r\n      }\r\n    }\r\n  } // handle the various notations\r\n\r\n\r\n  switch (notation) {\r\n    case 'fixed':\r\n      return toFixed(value, precision);\r\n\r\n    case 'exponential':\r\n      return toExponential(value, precision);\r\n\r\n    case 'engineering':\r\n      return toEngineering(value, precision);\r\n\r\n    case 'bin':\r\n      return formatBigNumberToBase(value, 2, wordSize);\r\n\r\n    case 'oct':\r\n      return formatBigNumberToBase(value, 8, wordSize);\r\n\r\n    case 'hex':\r\n      return formatBigNumberToBase(value, 16, wordSize);\r\n\r\n    case 'auto':\r\n      {\r\n        // determine lower and upper bound for exponential notation.\r\n        // TODO: implement support for upper and lower to be BigNumbers themselves\r\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\r\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\r\n\r\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\r\n\r\n        var str;\r\n        var rounded = value.toSignificantDigits(precision);\r\n        var exp = rounded.e;\r\n\r\n        if (exp >= lowerExp && exp < upperExp) {\r\n          // normal number notation\r\n          str = rounded.toFixed();\r\n        } else {\r\n          // exponential notation\r\n          str = toExponential(value, precision);\r\n        } // remove trailing zeros after the decimal point\r\n\r\n\r\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\r\n          var digits = arguments[2];\r\n          var e = arguments[4];\r\n          return digits !== '.' ? digits + e : e;\r\n        });\r\n      }\r\n\r\n    default:\r\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\r\n  }\r\n}\r\n/**\r\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\r\n * @param {BigNumber | string} value\r\n * @param {number} [precision]        Optional number of significant figures to return.\r\n */\r\n\r\nexport function toEngineering(value, precision) {\r\n  // find nearest lower multiple of 3 for exponent\r\n  var e = value.e;\r\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\r\n\r\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\r\n  var valueStr = valueWithoutExp.toPrecision(precision);\r\n\r\n  if (valueStr.indexOf('e') !== -1) {\r\n    valueStr = valueWithoutExp.toString();\r\n  }\r\n\r\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\r\n}\r\n/**\r\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\r\n * @param {BigNumber} value\r\n * @param {number} [precision]  Number of digits in formatted output.\r\n *                              If not provided, the maximum available digits\r\n *                              is used.\r\n * @returns {string} str\r\n */\r\n\r\nexport function toExponential(value, precision) {\r\n  if (precision !== undefined) {\r\n    return value.toExponential(precision - 1); // Note the offset of one\r\n  } else {\r\n    return value.toExponential();\r\n  }\r\n}\r\n/**\r\n * Format a number with fixed notation.\r\n * @param {BigNumber} value\r\n * @param {number} [precision=undefined] Optional number of decimals after the\r\n *                                       decimal point. Undefined by default.\r\n */\r\n\r\nexport function toFixed(value, precision) {\r\n  return value.toFixed(precision);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}