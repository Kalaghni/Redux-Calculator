{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'atan';\nvar dependencies = ['typed'];\nexport var createAtan = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Calculate the inverse tangent of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atan(0.5)           // returns number 0.4636476090008061\r\n   *    math.atan(math.tan(1.5)) // returns number 1.5\r\n   *\r\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    tan, asin, acos\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\r\n   */\n\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createAtan","_ref","typed","number","x","Math","atan","Complex","BigNumber","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/trigonometry/atan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'atan';\r\nvar dependencies = ['typed'];\r\nexport var createAtan = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the inverse tangent of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atan(0.5)           // returns number 0.4636476090008061\r\n   *    math.atan(math.tan(1.5)) // returns number 1.5\r\n   *\r\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    tan, asin, acos\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\r\n   */\r\n  return typed('atan', {\r\n    number: function number(x) {\r\n      return Math.atan(x);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.atan();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.atan();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since atan(0) = 0\r\n      return deepMap(x, this, true);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAAC,MAAD,EAAS;IACnBC,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,OAAOC,IAAI,CAACC,IAAL,CAAUF,CAAV,CAAP;IACD,CAHkB;IAInBG,OAAO,EAAE,SAASA,OAAT,CAAiBH,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACE,IAAF,EAAP;IACD,CANkB;IAOnBE,SAAS,EAAE,SAASA,SAAT,CAAmBJ,CAAnB,EAAsB;MAC/B,OAAOA,CAAC,CAACE,IAAF,EAAP;IACD,CATkB;IAUnB,kBAAkB,SAASG,WAAT,CAAqBL,CAArB,EAAwB;MACxC;MACA,OAAOP,OAAO,CAACO,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;IACD;EAbkB,CAAT,CAAZ;AAeD,CA3C6C,CAAvC"},"metadata":{},"sourceType":"module"}