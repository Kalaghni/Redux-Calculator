{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      multiply = _ref.multiply,\n      sqrt = _ref.sqrt,\n      subtract = _ref.subtract,\n      inv = _ref.inv,\n      size = _ref.size,\n      max = _ref.max,\n      identity = _ref.identity;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n  /**\r\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\r\n   *\r\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\r\n   *\r\n   * @param  {Array | Matrix} A   The square matrix `A`\r\n   * @return {Array | Matrix}     The principal square root of matrix `A`\r\n   * @private\r\n   */\n\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n\n    return Y;\n  }\n  /**\r\n   * Calculate the principal square root of a square matrix.\r\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\r\n   *\r\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     X = math.sqrtm(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     sqrt, pow\r\n   *\r\n   * @param  {Array | Matrix} A   The square matrix `A`\r\n   * @return {Array | Matrix}     The principal square root of matrix `A`\r\n   */\n\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return sqrt(A);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});","map":{"version":3,"names":["isMatrix","format","arraySize","factory","name","dependencies","createSqrtm","_ref","typed","abs","add","multiply","sqrt","subtract","inv","size","max","identity","_maxIterations","_tolerance","_denmanBeavers","A","error","iterations","Y","Z","Yk","Error","ArrayMatrix","length","RangeError","rows","cols"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/matrix/sqrtm.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\r\nimport { format } from '../../utils/string.js';\r\nimport { arraySize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'sqrtm';\r\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\r\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    add,\r\n    multiply,\r\n    sqrt,\r\n    subtract,\r\n    inv,\r\n    size,\r\n    max,\r\n    identity\r\n  } = _ref;\r\n  var _maxIterations = 1e3;\r\n  var _tolerance = 1e-6;\r\n  /**\r\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\r\n   *\r\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\r\n   *\r\n   * @param  {Array | Matrix} A   The square matrix `A`\r\n   * @return {Array | Matrix}     The principal square root of matrix `A`\r\n   * @private\r\n   */\r\n\r\n  function _denmanBeavers(A) {\r\n    var error;\r\n    var iterations = 0;\r\n    var Y = A;\r\n    var Z = identity(size(A));\r\n\r\n    do {\r\n      var Yk = Y;\r\n      Y = multiply(0.5, add(Yk, inv(Z)));\r\n      Z = multiply(0.5, add(Z, inv(Yk)));\r\n      error = max(abs(subtract(Y, Yk)));\r\n\r\n      if (error > _tolerance && ++iterations > _maxIterations) {\r\n        throw new Error('computing square root of matrix: iterative method could not converge');\r\n      }\r\n    } while (error > _tolerance);\r\n\r\n    return Y;\r\n  }\r\n  /**\r\n   * Calculate the principal square root of a square matrix.\r\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\r\n   *\r\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     X = math.sqrtm(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     sqrt, pow\r\n   *\r\n   * @param  {Array | Matrix} A   The square matrix `A`\r\n   * @return {Array | Matrix}     The principal square root of matrix `A`\r\n   */\r\n\r\n\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(A) {\r\n      var size = isMatrix(A) ? A.size() : arraySize(A);\r\n\r\n      switch (size.length) {\r\n        case 1:\r\n          // Single element Array | Matrix\r\n          if (size[0] === 1) {\r\n            return sqrt(A);\r\n          } else {\r\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\r\n          }\r\n\r\n        case 2:\r\n          {\r\n            // Two-dimensional Array | Matrix\r\n            var rows = size[0];\r\n            var cols = size[1];\r\n\r\n            if (rows === cols) {\r\n              return _denmanBeavers(A);\r\n            } else {\r\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\r\n            }\r\n          }\r\n\r\n        default:\r\n          // Multi dimensional array\r\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\r\n      }\r\n    }\r\n  });\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}