{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      combinations = _ref.combinations,\n      isPositive = _ref.isPositive,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n  /**\r\n   * The composition counts of n into k parts.\r\n   *\r\n   * composition only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.composition(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.composition(5, 3) // returns 6\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations\r\n   *\r\n   * @param {Number | BigNumber} n    Total number of objects in the set\r\n   * @param {Number | BigNumber} k    Number of objects in the subset\r\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\r\n   */\n\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createComposition","_ref","typed","addScalar","combinations","isPositive","isNegative","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/combinatorics/composition.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'composition';\r\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\r\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    addScalar,\r\n    combinations,\r\n    isPositive,\r\n    isNegative,\r\n    isInteger,\r\n    larger\r\n  } = _ref;\r\n\r\n  /**\r\n   * The composition counts of n into k parts.\r\n   *\r\n   * composition only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.composition(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.composition(5, 3) // returns 6\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations\r\n   *\r\n   * @param {Number | BigNumber} n    Total number of objects in the set\r\n   * @param {Number | BigNumber} k    Number of objects in the subset\r\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\r\n   */\r\n  return typed(name, {\r\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\r\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\r\n        throw new TypeError('Positive integer value expected in function composition');\r\n      } else if (larger(k, n)) {\r\n        throw new TypeError('k must be less than or equal to n in function composition');\r\n      }\r\n\r\n      return combinations(addScalar(n, -1), addScalar(k, -1));\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,cAAvB,EAAuC,YAAvC,EAAqD,YAArD,EAAmE,WAAnE,EAAgF,QAAhF,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAChF,IACEC,KADF,GAQID,IARJ,CACEC,KADF;EAAA,IAEEC,SAFF,GAQIF,IARJ,CAEEE,SAFF;EAAA,IAGEC,YAHF,GAQIH,IARJ,CAGEG,YAHF;EAAA,IAIEC,UAJF,GAQIJ,IARJ,CAIEI,UAJF;EAAA,IAKEC,UALF,GAQIL,IARJ,CAKEK,UALF;EAAA,IAMEC,SANF,GAQIN,IARJ,CAMEM,SANF;EAAA,IAOEC,MAPF,GAQIP,IARJ,CAOEO,MAPF;EAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAON,KAAK,CAACJ,IAAD,EAAO;IACjB,0CAA0C,SAASW,8BAAT,CAAwCC,CAAxC,EAA2CC,CAA3C,EAA8C;MACtF,IAAI,CAACJ,SAAS,CAACG,CAAD,CAAV,IAAiB,CAACL,UAAU,CAACK,CAAD,CAA5B,IAAmC,CAACH,SAAS,CAACI,CAAD,CAA7C,IAAoD,CAACN,UAAU,CAACM,CAAD,CAAnE,EAAwE;QACtE,MAAM,IAAIC,SAAJ,CAAc,yDAAd,CAAN;MACD,CAFD,MAEO,IAAIJ,MAAM,CAACG,CAAD,EAAID,CAAJ,CAAV,EAAkB;QACvB,MAAM,IAAIE,SAAJ,CAAc,2DAAd,CAAN;MACD;;MAED,OAAOR,YAAY,CAACD,SAAS,CAACO,CAAD,EAAI,CAAC,CAAL,CAAV,EAAmBP,SAAS,CAACQ,CAAD,EAAI,CAAC,CAAL,CAA5B,CAAnB;IACD;EATgB,CAAP,CAAZ;AAWD,CA5CoD,CAA9C"},"metadata":{},"sourceType":"module"}