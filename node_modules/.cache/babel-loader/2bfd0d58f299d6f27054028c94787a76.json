{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { xgcdNumber } from '../../plain/number/index.js';\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n  /**\r\n   * Calculate the extended greatest common divisor for two values.\r\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.xgcd(a, b)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\r\n   *\r\n   * See also:\r\n   *\r\n   *    gcd, lcm\r\n   *\r\n   * @param {number | BigNumber} a  An integer number\r\n   * @param {number | BigNumber} b  An integer number\r\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\r\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\r\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = xgcdNumber(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n\n  });\n  /**\r\n   * Calculate xgcd for two BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @return {BigNumber[]} result\r\n   * @private\r\n   */\n\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var // used to swap two variables\n    t;\n    var // quotient\n    q;\n    var // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});","map":{"version":3,"names":["factory","xgcdNumber","name","dependencies","createXgcd","_ref","typed","config","matrix","BigNumber","numberNumber","a","b","res","_xgcdBigNumber","t","q","r","zero","one","x","lastx","y","lasty","isInt","Error","isZero","div","floor","mod","minus","times","lt","neg"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { xgcdNumber } from '../../plain/number/index.js';\r\nvar name = 'xgcd';\r\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\r\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix,\r\n    BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the extended greatest common divisor for two values.\r\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.xgcd(a, b)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\r\n   *\r\n   * See also:\r\n   *\r\n   *    gcd, lcm\r\n   *\r\n   * @param {number | BigNumber} a  An integer number\r\n   * @param {number | BigNumber} b  An integer number\r\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\r\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\r\n   */\r\n  return typed(name, {\r\n    'number, number': function numberNumber(a, b) {\r\n      var res = xgcdNumber(a, b);\r\n      return config.matrix === 'Array' ? res : matrix(res);\r\n    },\r\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\r\n\r\n  });\r\n  /**\r\n   * Calculate xgcd for two BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @return {BigNumber[]} result\r\n   * @private\r\n   */\r\n\r\n  function _xgcdBigNumber(a, b) {\r\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\r\n    var // used to swap two variables\r\n    t;\r\n    var // quotient\r\n    q;\r\n    var // remainder\r\n    r;\r\n    var zero = new BigNumber(0);\r\n    var one = new BigNumber(1);\r\n    var x = zero;\r\n    var lastx = one;\r\n    var y = one;\r\n    var lasty = zero;\r\n\r\n    if (!a.isInt() || !b.isInt()) {\r\n      throw new Error('Parameters in function xgcd must be integer numbers');\r\n    }\r\n\r\n    while (!b.isZero()) {\r\n      q = a.div(b).floor();\r\n      r = a.mod(b);\r\n      t = x;\r\n      x = lastx.minus(q.times(x));\r\n      lastx = t;\r\n      t = y;\r\n      y = lasty.minus(q.times(y));\r\n      lasty = t;\r\n      a = b;\r\n      b = r;\r\n    }\r\n\r\n    var res;\r\n\r\n    if (a.lt(zero)) {\r\n      res = [a.neg(), lastx.neg(), lasty.neg()];\r\n    } else {\r\n      res = [a, !a.isZero() ? lastx : 0, lasty];\r\n    }\r\n\r\n    return config.matrix === 'Array' ? res : matrix(res);\r\n  }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}