{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Complex = _ref.Complex;\n  /**\r\n   * Create a complex value or convert a value to a complex value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.complex()                           // creates a complex value with zero\r\n   *                                              // as real and imaginary part.\r\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\r\n   *                                              // values for real and imaginary part.\r\n   *     math.complex(re : number)                // creates a complex value with provided\r\n   *                                              // real value and zero imaginary part.\r\n   *     math.complex(complex : Complex)          // clones the provided complex value.\r\n   *     math.complex(arg : string)               // parses a string into a complex value.\r\n   *     math.complex(array : Array)              // converts the elements of the array\r\n   *                                              // or matrix element wise into a\r\n   *                                              // complex value.\r\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\r\n   *                                              // values for real an imaginary part.\r\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\r\n   *                                              // polar coordinates\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\r\n   *    a.re = 5                          // a = Complex 5 - 4i\r\n   *    const i = a.im                    // Number -4\r\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\r\n   *    const c = math.complex()          // Complex 0 + 0i\r\n   *    const d = math.add(a, b)          // Complex 5 + 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, index, matrix, number, string, unit\r\n   *\r\n   * @param {* | Array | Matrix} [args]\r\n   *            Arguments specifying the real and imaginary part of the complex number\r\n   * @return {Complex | Array | Matrix} Returns a complex value\r\n   */\n\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    null: function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createComplex","_ref","typed","Complex","_","ZERO","number","x","numberNumber","re","im","BigNumberBigNumber","toNumber","Fraction","valueOf","clone","string","null","_null","Object","Error","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/type/complex/function/complex.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { deepMap } from '../../../utils/collection.js';\r\nvar name = 'complex';\r\nvar dependencies = ['typed', 'Complex'];\r\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Complex\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a complex value or convert a value to a complex value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.complex()                           // creates a complex value with zero\r\n   *                                              // as real and imaginary part.\r\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\r\n   *                                              // values for real and imaginary part.\r\n   *     math.complex(re : number)                // creates a complex value with provided\r\n   *                                              // real value and zero imaginary part.\r\n   *     math.complex(complex : Complex)          // clones the provided complex value.\r\n   *     math.complex(arg : string)               // parses a string into a complex value.\r\n   *     math.complex(array : Array)              // converts the elements of the array\r\n   *                                              // or matrix element wise into a\r\n   *                                              // complex value.\r\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\r\n   *                                              // values for real an imaginary part.\r\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\r\n   *                                              // polar coordinates\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\r\n   *    a.re = 5                          // a = Complex 5 - 4i\r\n   *    const i = a.im                    // Number -4\r\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\r\n   *    const c = math.complex()          // Complex 0 + 0i\r\n   *    const d = math.add(a, b)          // Complex 5 + 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, index, matrix, number, string, unit\r\n   *\r\n   * @param {* | Array | Matrix} [args]\r\n   *            Arguments specifying the real and imaginary part of the complex number\r\n   * @return {Complex | Array | Matrix} Returns a complex value\r\n   */\r\n  return typed('complex', {\r\n    '': function _() {\r\n      return Complex.ZERO;\r\n    },\r\n    number: function number(x) {\r\n      return new Complex(x, 0);\r\n    },\r\n    'number, number': function numberNumber(re, im) {\r\n      return new Complex(re, im);\r\n    },\r\n    // TODO: this signature should be redundant\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\r\n      return new Complex(re.toNumber(), im.toNumber());\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new Complex(x.valueOf(), 0);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.clone();\r\n    },\r\n    string: function string(x) {\r\n      return Complex(x); // for example '2 + 3i'\r\n    },\r\n    null: function _null(x) {\r\n      return Complex(0);\r\n    },\r\n    Object: function Object(x) {\r\n      if ('re' in x && 'im' in x) {\r\n        return new Complex(x.re, x.im);\r\n      }\r\n\r\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\r\n        return new Complex(x);\r\n      }\r\n\r\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC5E,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,OAFF,GAGIF,IAHJ,CAEEE,OAFF;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOD,KAAK,CAAC,SAAD,EAAY;IACtB,IAAI,SAASE,CAAT,GAAa;MACf,OAAOD,OAAO,CAACE,IAAf;IACD,CAHqB;IAItBC,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,OAAO,IAAIJ,OAAJ,CAAYI,CAAZ,EAAe,CAAf,CAAP;IACD,CANqB;IAOtB,kBAAkB,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;MAC9C,OAAO,IAAIP,OAAJ,CAAYM,EAAZ,EAAgBC,EAAhB,CAAP;IACD,CATqB;IAUtB;IACA,wBAAwB,SAASC,kBAAT,CAA4BF,EAA5B,EAAgCC,EAAhC,EAAoC;MAC1D,OAAO,IAAIP,OAAJ,CAAYM,EAAE,CAACG,QAAH,EAAZ,EAA2BF,EAAE,CAACE,QAAH,EAA3B,CAAP;IACD,CAbqB;IActBC,QAAQ,EAAE,SAASA,QAAT,CAAkBN,CAAlB,EAAqB;MAC7B,OAAO,IAAIJ,OAAJ,CAAYI,CAAC,CAACO,OAAF,EAAZ,EAAyB,CAAzB,CAAP;IACD,CAhBqB;IAiBtBX,OAAO,EAAE,SAASA,OAAT,CAAiBI,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACQ,KAAF,EAAP;IACD,CAnBqB;IAoBtBC,MAAM,EAAE,SAASA,MAAT,CAAgBT,CAAhB,EAAmB;MACzB,OAAOJ,OAAO,CAACI,CAAD,CAAd,CADyB,CACN;IACpB,CAtBqB;IAuBtBU,IAAI,EAAE,SAASC,KAAT,CAAeX,CAAf,EAAkB;MACtB,OAAOJ,OAAO,CAAC,CAAD,CAAd;IACD,CAzBqB;IA0BtBgB,MAAM,EAAE,SAASA,MAAT,CAAgBZ,CAAhB,EAAmB;MACzB,IAAI,QAAQA,CAAR,IAAa,QAAQA,CAAzB,EAA4B;QAC1B,OAAO,IAAIJ,OAAJ,CAAYI,CAAC,CAACE,EAAd,EAAkBF,CAAC,CAACG,EAApB,CAAP;MACD;;MAED,IAAI,OAAOH,CAAP,IAAY,SAASA,CAArB,IAA0B,SAASA,CAAT,IAAc,SAASA,CAArD,EAAwD;QACtD,OAAO,IAAIJ,OAAJ,CAAYI,CAAZ,CAAP;MACD;;MAED,MAAM,IAAIa,KAAJ,CAAU,6EAAV,CAAN;IACD,CApCqB;IAqCtB,kBAAkB,SAASC,WAAT,CAAqBd,CAArB,EAAwB;MACxC,OAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;IACD;EAvCqB,CAAZ,CAAZ;AAyCD,CArFgD,CAA1C"},"metadata":{},"sourceType":"module"}