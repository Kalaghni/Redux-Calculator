{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log10Number } from '../../plain/number/index.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      _Complex = _ref.Complex;\n  /**\r\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log10(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log10(0.00001)            // returns -5\r\n   *    math.log10(10000)              // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log2\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 10-base logarithm of `x`\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","log10Number","name","dependencies","createLog10","_ref","typed","config","_Complex","Complex","number","x","predictable","log","div","Math","LN10","BigNumber","isNegative","toNumber","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/arithmetic/log10.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { log10Number } from '../../plain/number/index.js';\r\nvar name = 'log10';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex: _Complex\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log10(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log10(0.00001)            // returns -5\r\n   *    math.log10(10000)              // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log2\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 10-base logarithm of `x`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= 0 || config.predictable) {\r\n        return log10Number(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return new _Complex(x, 0).log().div(Math.LN10);\r\n      }\r\n    },\r\n    Complex: function Complex(x) {\r\n      return new _Complex(x).log().div(Math.LN10);\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.log();\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\r\n      }\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAIID,IAJJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAIIF,IAJJ,CAEEE,MAFF;EAAA,IAGWC,QAHX,GAIIH,IAJJ,CAGEI,OAHF;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOH,KAAK,CAACJ,IAAD,EAAO;IACjBQ,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,IAAIA,CAAC,IAAI,CAAL,IAAUJ,MAAM,CAACK,WAArB,EAAkC;QAChC,OAAOX,WAAW,CAACU,CAAD,CAAlB;MACD,CAFD,MAEO;QACL;QACA,OAAO,IAAIH,QAAJ,CAAaG,CAAb,EAAgB,CAAhB,EAAmBE,GAAnB,GAAyBC,GAAzB,CAA6BC,IAAI,CAACC,IAAlC,CAAP;MACD;IACF,CARgB;IASjBP,OAAO,EAAE,SAASA,OAAT,CAAiBE,CAAjB,EAAoB;MAC3B,OAAO,IAAIH,QAAJ,CAAaG,CAAb,EAAgBE,GAAhB,GAAsBC,GAAtB,CAA0BC,IAAI,CAACC,IAA/B,CAAP;IACD,CAXgB;IAYjBC,SAAS,EAAE,SAASA,SAAT,CAAmBN,CAAnB,EAAsB;MAC/B,IAAI,CAACA,CAAC,CAACO,UAAF,EAAD,IAAmBX,MAAM,CAACK,WAA9B,EAA2C;QACzC,OAAOD,CAAC,CAACE,GAAF,EAAP;MACD,CAFD,MAEO;QACL;QACA,OAAO,IAAIL,QAAJ,CAAaG,CAAC,CAACQ,QAAF,EAAb,EAA2B,CAA3B,EAA8BN,GAA9B,GAAoCC,GAApC,CAAwCC,IAAI,CAACC,IAA7C,CAAP;MACD;IACF,CAnBgB;IAoBjB,kBAAkB,SAASI,WAAT,CAAqBT,CAArB,EAAwB;MACxC,OAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;IACD;EAtBgB,CAAP,CAAZ;AAwBD,CAxD8C,CAAxC"},"metadata":{},"sourceType":"module"}