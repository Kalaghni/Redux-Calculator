{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm06 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\r\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\r\n   *\r\n   *\r\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0            ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\n\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","DimensionError","scatter","name","dependencies","createAlgorithm06","_ref","typed","equalScalar","algorithm06","a","b","callback","avalues","_values","asize","_size","adt","_datatype","bvalues","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","x","w","u","j","mark","k","i","v","push","splice","p","r","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/type/matrix/utils/algorithm06.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { DimensionError } from '../../../error/DimensionError.js';\r\nimport { scatter } from '../../../utils/collection.js';\r\nvar name = 'algorithm06';\r\nvar dependencies = ['typed', 'equalScalar'];\r\nexport var createAlgorithm06 = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref;\r\n\r\n  /**\r\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\r\n   *\r\n   *\r\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0            ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\r\n  return function algorithm06(a, b, callback) {\r\n    // sparse matrix arrays\r\n    var avalues = a._values;\r\n    var asize = a._size;\r\n    var adt = a._datatype; // sparse matrix arrays\r\n\r\n    var bvalues = b._values;\r\n    var bsize = b._size;\r\n    var bdt = b._datatype; // validate dimensions\r\n\r\n    if (asize.length !== bsize.length) {\r\n      throw new DimensionError(asize.length, bsize.length);\r\n    } // check rows & columns\r\n\r\n\r\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\r\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\r\n    } // rows & columns\r\n\r\n\r\n    var rows = asize[0];\r\n    var columns = asize[1]; // datatype\r\n\r\n    var dt; // equal signature to use\r\n\r\n    var eq = equalScalar; // zero value\r\n\r\n    var zero = 0; // callback signature to use\r\n\r\n    var cf = callback; // process data types\r\n\r\n    if (typeof adt === 'string' && adt === bdt) {\r\n      // datatype\r\n      dt = adt; // find signature that matches (dt, dt)\r\n\r\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\r\n\r\n      zero = typed.convert(0, dt); // callback\r\n\r\n      cf = typed.find(callback, [dt, dt]);\r\n    } // result arrays\r\n\r\n\r\n    var cvalues = avalues && bvalues ? [] : undefined;\r\n    var cindex = [];\r\n    var cptr = []; // workspaces\r\n\r\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\r\n\r\n    var w = []; // marks indicating value in a given row has been updated\r\n\r\n    var u = []; // loop columns\r\n\r\n    for (var j = 0; j < columns; j++) {\r\n      // update cptr\r\n      cptr[j] = cindex.length; // columns mark\r\n\r\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\r\n\r\n      scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\r\n\r\n      scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\r\n\r\n      if (x) {\r\n        // initialize first index in j\r\n        var k = cptr[j]; // loop index in j\r\n\r\n        while (k < cindex.length) {\r\n          // row\r\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\r\n\r\n          if (u[i] === mark) {\r\n            // value @ i\r\n            var v = x[i]; // check for zero value\r\n\r\n            if (!eq(v, zero)) {\r\n              // push value\r\n              cvalues.push(v); // increment pointer\r\n\r\n              k++;\r\n            } else {\r\n              // remove value @ i, do not increment pointer\r\n              cindex.splice(k, 1);\r\n            }\r\n          } else {\r\n            // remove value @ i, do not increment pointer\r\n            cindex.splice(k, 1);\r\n          }\r\n        }\r\n      } else {\r\n        // initialize first index in j\r\n        var p = cptr[j]; // loop index in j\r\n\r\n        while (p < cindex.length) {\r\n          // row\r\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\r\n\r\n          if (u[r] !== mark) {\r\n            // remove value @ i, do not increment pointer\r\n            cindex.splice(p, 1);\r\n          } else {\r\n            // increment pointer\r\n            p++;\r\n          }\r\n        }\r\n      }\r\n    } // update cptr\r\n\r\n\r\n    cptr[columns] = cindex.length; // return sparse matrix\r\n\r\n    return a.createSparseMatrix({\r\n      values: cvalues,\r\n      index: cindex,\r\n      ptr: cptr,\r\n      size: [rows, columns],\r\n      datatype: dt\r\n    });\r\n  };\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}