{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isPositiveNumber } from '../../plain/number/index.js';\nvar name = 'isPositive';\nvar dependencies = ['typed'];\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Test whether a value is positive: larger than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isPositive(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isPositive(3)                     // returns true\r\n   *    math.isPositive(-2)                    // returns false\r\n   *    math.isPositive(0)                     // returns false\r\n   *    math.isPositive(-0)                    // returns false\r\n   *    math.isPositive(0.5)                   // returns true\r\n   *    math.isPositive(math.bignumber(2))     // returns true\r\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\r\n   *    math.isPositive(math.fraction(1,3))    // returns false\r\n   *    math.isPositive('2')                   // returns true\r\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isZero, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n\n  return typed(name, {\n    number: isPositiveNumber,\n    BigNumber: function BigNumber(x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s > 0 && x.n > 0;\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","isPositiveNumber","name","dependencies","createIsPositive","_ref","typed","number","BigNumber","x","isNeg","isZero","isNaN","Fraction","s","n","Unit","value","ArrayMatrix"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/function/utils/isPositive.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isPositiveNumber } from '../../plain/number/index.js';\r\nvar name = 'isPositive';\r\nvar dependencies = ['typed'];\r\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test whether a value is positive: larger than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isPositive(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isPositive(3)                     // returns true\r\n   *    math.isPositive(-2)                    // returns false\r\n   *    math.isPositive(0)                     // returns false\r\n   *    math.isPositive(-0)                    // returns false\r\n   *    math.isPositive(0.5)                   // returns true\r\n   *    math.isPositive(math.bignumber(2))     // returns true\r\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\r\n   *    math.isPositive(math.fraction(1,3))    // returns false\r\n   *    math.isPositive('2')                   // returns true\r\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isZero, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isPositiveNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.s > 0 && x.n > 0;\r\n    },\r\n    Unit: function Unit(x) {\r\n      return this(x.value);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC/E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBK,MAAM,EAAEN,gBADS;IAEjBO,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;MAC/B,OAAO,CAACA,CAAC,CAACC,KAAF,EAAD,IAAc,CAACD,CAAC,CAACE,MAAF,EAAf,IAA6B,CAACF,CAAC,CAACG,KAAF,EAArC;IACD,CAJgB;IAKjBC,QAAQ,EAAE,SAASA,QAAT,CAAkBJ,CAAlB,EAAqB;MAC7B,OAAOA,CAAC,CAACK,CAAF,GAAM,CAAN,IAAWL,CAAC,CAACM,CAAF,GAAM,CAAxB;IACD,CAPgB;IAQjBC,IAAI,EAAE,SAASA,IAAT,CAAcP,CAAd,EAAiB;MACrB,OAAO,KAAKA,CAAC,CAACQ,KAAP,CAAP;IACD,CAVgB;IAWjB,kBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;MACxC,OAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;IACD;EAbgB,CAAP,CAAZ;AAeD,CAnDmD,CAA7C"},"metadata":{},"sourceType":"module"}