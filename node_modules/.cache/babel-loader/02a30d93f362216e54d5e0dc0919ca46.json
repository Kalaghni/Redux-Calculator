{"ast":null,"code":"import { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\r\n   * @constructor ArrayNode\r\n   * @extends {Node}\r\n   * Holds an 1-dimensional array with items\r\n   * @param {Node[]} [items]   1 dimensional array with items\r\n   */\n\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config.matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\r\n   * Create a new ArrayNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {ArrayNode} Returns a transformed copy of the node\r\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {ArrayNode}\r\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\r\n   * Get string representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   * @override\r\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\r\n   * Instantiate an ArrayNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\r\n   *                       where mathjs is optional\r\n   * @returns {ArrayNode}\r\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\r\n   * Get HTML representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   * @override\r\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\r\n   * Get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    function itemsToTex(items, nested) {\n      var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n      var itemsFormRow = nested || mixedItems;\n      var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n      var itemsTex = items.map(function (node) {\n        if (node.items) {\n          return itemsToTex(node.items, !nested);\n        } else {\n          return node.toTex(options);\n        }\n      }).join(itemSep);\n      return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n    }\n\n    return itemsToTex(this.items, false);\n  };\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isArrayNode","isNode","map","factory","name","dependencies","createArrayNode","_ref","Node","ArrayNode","items","SyntaxError","Array","isArray","every","TypeError","prototype","type","_compile","math","argNames","evalItems","item","asMatrix","config","matrix","evalArrayNode","scope","args","context","evalItem","forEach","callback","i","length","node","_ifNode","clone","slice","_toString","options","toString","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","itemsToTex","nested","mixedItems","some","itemsFormRow","itemSep","itemsTex","toTex","isClass"],"sources":["C:/laragon/www/testsite.thewateringcan/wp-content/plugins/Redux-Calculator/node_modules/mathjs/lib/esm/expression/node/ArrayNode.js"],"sourcesContent":["import { isArrayNode, isNode } from '../../utils/is.js';\r\nimport { map } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'ArrayNode';\r\nvar dependencies = ['Node'];\r\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    Node\r\n  } = _ref;\r\n\r\n  /**\r\n   * @constructor ArrayNode\r\n   * @extends {Node}\r\n   * Holds an 1-dimensional array with items\r\n   * @param {Node[]} [items]   1 dimensional array with items\r\n   */\r\n  function ArrayNode(items) {\r\n    if (!(this instanceof ArrayNode)) {\r\n      throw new SyntaxError('Constructor must be called with the new operator');\r\n    }\r\n\r\n    this.items = items || []; // validate input\r\n\r\n    if (!Array.isArray(this.items) || !this.items.every(isNode)) {\r\n      throw new TypeError('Array containing Nodes expected');\r\n    }\r\n  }\r\n\r\n  ArrayNode.prototype = new Node();\r\n  ArrayNode.prototype.type = 'ArrayNode';\r\n  ArrayNode.prototype.isArrayNode = true;\r\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\r\n\r\n  ArrayNode.prototype._compile = function (math, argNames) {\r\n    var evalItems = map(this.items, function (item) {\r\n      return item._compile(math, argNames);\r\n    });\r\n    var asMatrix = math.config.matrix !== 'Array';\r\n\r\n    if (asMatrix) {\r\n      var matrix = math.matrix;\r\n      return function evalArrayNode(scope, args, context) {\r\n        return matrix(map(evalItems, function (evalItem) {\r\n          return evalItem(scope, args, context);\r\n        }));\r\n      };\r\n    } else {\r\n      return function evalArrayNode(scope, args, context) {\r\n        return map(evalItems, function (evalItem) {\r\n          return evalItem(scope, args, context);\r\n        });\r\n      };\r\n    }\r\n  };\r\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\r\n\r\n\r\n  ArrayNode.prototype.forEach = function (callback) {\r\n    for (var i = 0; i < this.items.length; i++) {\r\n      var node = this.items[i];\r\n      callback(node, 'items[' + i + ']', this);\r\n    }\r\n  };\r\n  /**\r\n   * Create a new ArrayNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {ArrayNode} Returns a transformed copy of the node\r\n   */\r\n\r\n\r\n  ArrayNode.prototype.map = function (callback) {\r\n    var items = [];\r\n\r\n    for (var i = 0; i < this.items.length; i++) {\r\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\r\n    }\r\n\r\n    return new ArrayNode(items);\r\n  };\r\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {ArrayNode}\r\n   */\r\n\r\n\r\n  ArrayNode.prototype.clone = function () {\r\n    return new ArrayNode(this.items.slice(0));\r\n  };\r\n  /**\r\n   * Get string representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   * @override\r\n   */\r\n\r\n\r\n  ArrayNode.prototype._toString = function (options) {\r\n    var items = this.items.map(function (node) {\r\n      return node.toString(options);\r\n    });\r\n    return '[' + items.join(', ') + ']';\r\n  };\r\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\r\n\r\n\r\n  ArrayNode.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'ArrayNode',\r\n      items: this.items\r\n    };\r\n  };\r\n  /**\r\n   * Instantiate an ArrayNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\r\n   *                       where mathjs is optional\r\n   * @returns {ArrayNode}\r\n   */\r\n\r\n\r\n  ArrayNode.fromJSON = function (json) {\r\n    return new ArrayNode(json.items);\r\n  };\r\n  /**\r\n   * Get HTML representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   * @override\r\n   */\r\n\r\n\r\n  ArrayNode.prototype.toHTML = function (options) {\r\n    var items = this.items.map(function (node) {\r\n      return node.toHTML(options);\r\n    });\r\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\r\n  };\r\n  /**\r\n   * Get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\r\n\r\n\r\n  ArrayNode.prototype._toTex = function (options) {\r\n    function itemsToTex(items, nested) {\r\n      var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\r\n      var itemsFormRow = nested || mixedItems;\r\n      var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\r\n      var itemsTex = items.map(function (node) {\r\n        if (node.items) {\r\n          return itemsToTex(node.items, !nested);\r\n        } else {\r\n          return node.toTex(options);\r\n        }\r\n      }).join(itemSep);\r\n      return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\r\n    }\r\n\r\n    return itemsToTex(this.items, false);\r\n  };\r\n\r\n  return ArrayNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}